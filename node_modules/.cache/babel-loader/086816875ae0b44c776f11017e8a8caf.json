{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/src/utils/find-path-with-tree.js","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/utils/find-path-with-tree.js","mtime":1591147717093},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418}],"contextDependencies":[],"result":["import { isNil } from 'lodash-es';\nimport { walkTree } from \"./walk-tree\";\n/**\n * 通过tree树结构寻找该id所属于的id路径数组\n * @param { string | number } value 要寻找的值id\n * @param { array } tree 树结构\n */\n\nexport var findPathWithTree = function findPathWithTree(value) {\n  var tree = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$keyField = _ref.keyField,\n      keyField = _ref$keyField === void 0 ? 'id' : _ref$keyField;\n\n  if (isNil(value)) {\n    return [];\n  }\n\n  var paths = [];\n  var finded = false;\n  walkTree(tree, function (node, _ref2) {\n    var depth = _ref2.depth;\n\n    if (!finded) {\n      if (depth === 0) {\n        paths = [node[keyField]];\n      }\n\n      paths[depth] = node[keyField];\n    }\n\n    if (node.id === value) {\n      finded = true;\n    }\n  });\n\n  if (!finded) {\n    return [];\n  }\n\n  return paths;\n};",{"version":3,"sources":["/Users/wangzhigang/Desktop/styd/web/src/utils/find-path-with-tree.js"],"names":["isNil","walkTree","findPathWithTree","value","tree","keyField","paths","finded","node","depth","id"],"mappings":"AAAA,SAASA,KAAT,QAAsB,WAAtB;AACA,SAASC,QAAT;AACA;;;;;;AAMA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAC9BC,KAD8B,EAI3B;AAAA,MAFHC,IAEG,uEAFI,EAEJ;;AAAA,iFADmB,EACnB;AAAA,2BADDC,QACC;AAAA,MADDA,QACC,8BADU,IACV;;AACH,MAAIL,KAAK,CAACG,KAAD,CAAT,EAAkB;AAChB,WAAO,EAAP;AACD;;AACD,MAAIG,KAAK,GAAG,EAAZ;AACA,MAAIC,MAAM,GAAG,KAAb;AACAN,EAAAA,QAAQ,CAACG,IAAD,EAAO,UAACI,IAAD,SAAqB;AAAA,QAAZC,KAAY,SAAZA,KAAY;;AAClC,QAAI,CAACF,MAAL,EAAa;AACX,UAAIE,KAAK,KAAK,CAAd,EAAiB;AACfH,QAAAA,KAAK,GAAG,CAACE,IAAI,CAACH,QAAD,CAAL,CAAR;AACD;;AACDC,MAAAA,KAAK,CAACG,KAAD,CAAL,GAAeD,IAAI,CAACH,QAAD,CAAnB;AACD;;AACD,QAAIG,IAAI,CAACE,EAAL,KAAYP,KAAhB,EAAuB;AACrBI,MAAAA,MAAM,GAAG,IAAT;AACD;AACF,GAVO,CAAR;;AAWA,MAAI,CAACA,MAAL,EAAa;AACX,WAAO,EAAP;AACD;;AACD,SAAOD,KAAP;AACD,CAzBM","sourcesContent":["import { isNil } from 'lodash-es'\nimport { walkTree } from './walk-tree'\n/**\n * 通过tree树结构寻找该id所属于的id路径数组\n * @param { string | number } value 要寻找的值id\n * @param { array } tree 树结构\n */\n\nexport const findPathWithTree = (\n  value,\n  tree = [],\n  { keyField = 'id' } = {}\n) => {\n  if (isNil(value)) {\n    return []\n  }\n  let paths = []\n  let finded = false\n  walkTree(tree, (node, { depth }) => {\n    if (!finded) {\n      if (depth === 0) {\n        paths = [node[keyField]]\n      }\n      paths[depth] = node[keyField]\n    }\n    if (node.id === value) {\n      finded = true\n    }\n  })\n  if (!finded) {\n    return []\n  }\n  return paths\n}\n"]}]}