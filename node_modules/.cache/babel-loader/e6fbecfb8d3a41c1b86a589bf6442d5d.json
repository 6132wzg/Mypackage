{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/src/utils/tree.js","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/utils/tree.js","mtime":1591147717094},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport _classCallCheck from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { merge, omit } from 'lodash-es';\n\nvar TreeNode = /*#__PURE__*/function () {\n  function TreeNode(data) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TreeNode);\n\n    this.data = omit(data, [options.children]);\n    this.id = data[options.id];\n    this.name = data[options.name];\n    this.parent = null;\n    this.children = [];\n  }\n\n  _createClass(TreeNode, [{\n    key: \"setParent\",\n    value: function setParent(parentNode) {\n      this.parent = parentNode;\n    }\n  }]);\n\n  return TreeNode;\n}();\n\nexport var Tree = /*#__PURE__*/function () {\n  function Tree() {\n    var treeData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Tree);\n\n    this.options = merge({\n      id: 'id',\n      children: 'children',\n      name: 'name'\n    }, options);\n    this._treeData = treeData;\n    this._tree = [];\n\n    this._init();\n  }\n\n  _createClass(Tree, [{\n    key: \"_init\",\n    value: function _init() {\n      var _this = this;\n\n      this._tree = [];\n\n      var walk = function walk(tree) {\n        var parentTreeNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var childrenInsert = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        tree.forEach(function (data) {\n          var treeNode = new TreeNode(data, _this.options);\n          treeNode.setParent(parentTreeNode);\n          childrenInsert.push(treeNode);\n\n          if (data.children && data.children.length) {\n            walk(data.children, treeNode, treeNode.children);\n          }\n        });\n      };\n\n      walk(this._treeData, null, this._tree);\n      console.log(this._tree);\n    }\n  }, {\n    key: \"findNodeById\",\n    value: function findNodeById(id) {\n      var find = undefined;\n\n      var walk = function walk(tree) {\n        tree.forEach(function (node) {\n          if (node.id === id) {\n            find = node;\n          }\n\n          if (!find && node.children && node.children.length) {\n            walk(node.children);\n          }\n        });\n      };\n\n      walk(this._tree);\n      return find;\n    }\n  }]);\n\n  return Tree;\n}();",{"version":3,"sources":["/Users/wangzhigang/Desktop/styd/web/src/utils/tree.js"],"names":["merge","omit","TreeNode","data","options","children","id","name","parent","parentNode","Tree","treeData","_treeData","_tree","_init","walk","tree","parentTreeNode","childrenInsert","forEach","treeNode","setParent","push","length","console","log","find","undefined","node"],"mappings":";;;;AAAA,SAASA,KAAT,EAAgBC,IAAhB,QAA4B,WAA5B;;IACMC,Q;AACJ,oBAAYC,IAAZ,EAAgC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAC9B,SAAKD,IAAL,GAAYF,IAAI,CAACE,IAAD,EAAO,CAACC,OAAO,CAACC,QAAT,CAAP,CAAhB;AACA,SAAKC,EAAL,GAAUH,IAAI,CAACC,OAAO,CAACE,EAAT,CAAd;AACA,SAAKC,IAAL,GAAYJ,IAAI,CAACC,OAAO,CAACG,IAAT,CAAhB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKH,QAAL,GAAgB,EAAhB;AACD;;;;8BACSI,U,EAAY;AACpB,WAAKD,MAAL,GAAcC,UAAd;AACD;;;;;;AAEH,WAAaC,IAAb;AACE,kBAAyC;AAAA,QAA7BC,QAA6B,uEAAlB,EAAkB;AAAA,QAAdP,OAAc,uEAAJ,EAAI;;AAAA;;AACvC,SAAKA,OAAL,GAAeJ,KAAK,CAClB;AACEM,MAAAA,EAAE,EAAE,IADN;AAEED,MAAAA,QAAQ,EAAE,UAFZ;AAGEE,MAAAA,IAAI,EAAE;AAHR,KADkB,EAMlBH,OANkB,CAApB;AAQA,SAAKQ,SAAL,GAAiBD,QAAjB;AACA,SAAKE,KAAL,GAAa,EAAb;;AACA,SAAKC,KAAL;AACD;;AAbH;AAAA;AAAA,4BAcU;AAAA;;AACN,WAAKD,KAAL,GAAa,EAAb;;AACA,UAAME,IAAI,GAAG,SAAPA,IAAO,CAACC,IAAD,EAAsD;AAAA,YAA/CC,cAA+C,uEAA9B,IAA8B;AAAA,YAAxBC,cAAwB,uEAAP,EAAO;AACjEF,QAAAA,IAAI,CAACG,OAAL,CAAa,UAAAhB,IAAI,EAAI;AACnB,cAAMiB,QAAQ,GAAG,IAAIlB,QAAJ,CAAaC,IAAb,EAAmB,KAAI,CAACC,OAAxB,CAAjB;AACAgB,UAAAA,QAAQ,CAACC,SAAT,CAAmBJ,cAAnB;AACAC,UAAAA,cAAc,CAACI,IAAf,CAAoBF,QAApB;;AAEA,cAAIjB,IAAI,CAACE,QAAL,IAAiBF,IAAI,CAACE,QAAL,CAAckB,MAAnC,EAA2C;AACzCR,YAAAA,IAAI,CAACZ,IAAI,CAACE,QAAN,EAAgBe,QAAhB,EAA0BA,QAAQ,CAACf,QAAnC,CAAJ;AACD;AACF,SARD;AASD,OAVD;;AAWAU,MAAAA,IAAI,CAAC,KAAKH,SAAN,EAAiB,IAAjB,EAAuB,KAAKC,KAA5B,CAAJ;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKZ,KAAjB;AACD;AA7BH;AAAA;AAAA,iCA8BeP,EA9Bf,EA8BmB;AACf,UAAIoB,IAAI,GAAGC,SAAX;;AACA,UAAMZ,IAAI,GAAG,SAAPA,IAAO,CAAAC,IAAI,EAAI;AACnBA,QAAAA,IAAI,CAACG,OAAL,CAAa,UAAAS,IAAI,EAAI;AACnB,cAAIA,IAAI,CAACtB,EAAL,KAAYA,EAAhB,EAAoB;AAClBoB,YAAAA,IAAI,GAAGE,IAAP;AACD;;AACD,cAAI,CAACF,IAAD,IAASE,IAAI,CAACvB,QAAd,IAA0BuB,IAAI,CAACvB,QAAL,CAAckB,MAA5C,EAAoD;AAClDR,YAAAA,IAAI,CAACa,IAAI,CAACvB,QAAN,CAAJ;AACD;AACF,SAPD;AAQD,OATD;;AAUAU,MAAAA,IAAI,CAAC,KAAKF,KAAN,CAAJ;AACA,aAAOa,IAAP;AACD;AA5CH;;AAAA;AAAA","sourcesContent":["import { merge, omit } from 'lodash-es'\nclass TreeNode {\n  constructor(data, options = {}) {\n    this.data = omit(data, [options.children])\n    this.id = data[options.id]\n    this.name = data[options.name]\n    this.parent = null\n    this.children = []\n  }\n  setParent(parentNode) {\n    this.parent = parentNode\n  }\n}\nexport class Tree {\n  constructor(treeData = [], options = {}) {\n    this.options = merge(\n      {\n        id: 'id',\n        children: 'children',\n        name: 'name'\n      },\n      options\n    )\n    this._treeData = treeData\n    this._tree = []\n    this._init()\n  }\n  _init() {\n    this._tree = []\n    const walk = (tree, parentTreeNode = null, childrenInsert = []) => {\n      tree.forEach(data => {\n        const treeNode = new TreeNode(data, this.options)\n        treeNode.setParent(parentTreeNode)\n        childrenInsert.push(treeNode)\n\n        if (data.children && data.children.length) {\n          walk(data.children, treeNode, treeNode.children)\n        }\n      })\n    }\n    walk(this._treeData, null, this._tree)\n    console.log(this._tree)\n  }\n  findNodeById(id) {\n    let find = undefined\n    const walk = tree => {\n      tree.forEach(node => {\n        if (node.id === id) {\n          find = node\n        }\n        if (!find && node.children && node.children.length) {\n          walk(node.children)\n        }\n      })\n    }\n    walk(this._tree)\n    return find\n  }\n}\n"]}]}