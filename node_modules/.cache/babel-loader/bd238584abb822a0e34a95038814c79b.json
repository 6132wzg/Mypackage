{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/face/recognition.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/face/recognition.vue","mtime":1600926555853},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { OssService } from '@/services/oss.service';\nimport { AppConfig } from '@/constants/config';\nimport { MessageService } from '@/services/message.service';\nimport { RecognitionService } from \"./recognition.service\";\nimport BrowserType from \"./recognition-browser\";\nimport { get } from 'lodash-es';\nexport default {\n  bem: {\n    recognition: 'st-face-recognition'\n  },\n  serviceInject: function serviceInject() {\n    return {\n      oss: OssService,\n      appConfig: AppConfig,\n      messageService: MessageService,\n      recognitionService: RecognitionService\n    };\n  },\n  rxState: function rxState() {\n    return {\n      loading: this.recognitionService.loading$\n    };\n  },\n  props: {\n    fileList: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    props: {\n      type: Object,\n      default: function _default() {\n        return {\n          image_id: 'image_id',\n          image_key: 'image_key',\n          image_url: 'image_url'\n        };\n      }\n    }\n  },\n  data: function data() {\n    return {\n      title: '人脸信息录入',\n      okText: '确认上传',\n      show: false,\n      list: this.fileList,\n      face: null,\n      canvasElm: null,\n      confirmLoading: false,\n      openCameraError: false,\n      // 开启摄像头失败\n      isLoading: false,\n      picWidth: 270,\n      picHeight: 270,\n      canvasCardContext: '',\n      canvasCard: ''\n    };\n  },\n  watch: {\n    fileList: function fileList(newList) {\n      this.list = this.fileList;\n\n      if (this.list.length) {\n        this.face = {\n          url: this.list[0][this.imageUrl],\n          fileKey: this.list[0][this.imageKey]\n        };\n      }\n    },\n    'loading.getMemberCheckResult': function loadingGetMemberCheckResult(v) {\n      this.$emit('loadingChange', v);\n    },\n    progress: function progress(v) {\n      this.$emit('progressChange', v);\n    }\n  },\n  computed: {\n    imageId: function imageId() {\n      return this.props.image_id;\n    },\n    imageKey: function imageKey() {\n      return this.props.image_key;\n    },\n    imageUrl: function imageUrl() {\n      return this.props.image_url;\n    },\n    userImgSrc: function userImgSrc() {\n      return get(this.face, 'url', '');\n    }\n  },\n  created: function created() {\n    // 现在已不需要在兼容firefox\n    // const browserV = BrowserType()\n    // if (browserV === 'FF') {\n    //   this.picHeight = 202\n    // }\n    this.createOutCanvas();\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      if (navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) {\n        // 调用用户媒体设备, 访问摄像头\n        _this.openCamera();\n\n        _this.canvasElm = _this.$refs.canvas;\n      } else {\n        _this.openCameraError = true;\n        _this.face = null;\n      }\n    });\n  },\n  methods: {\n    // 取消人脸识别图片上传\n    onCancel: function onCancel() {\n      this.show = false;\n    },\n    // 人脸图片上传\n    uploadUserImageFormPhoto: function uploadUserImageFormPhoto(data) {\n      var _this2 = this;\n\n      this.isLoading = true;\n      this.oss.put({\n        business: 'face',\n        isPrivate: true,\n        file: data.file\n      }).subscribe({\n        next: function next(val) {\n          console.log('val', val);\n          _this2.face = val;\n        },\n        error: function error(val) {\n          _this2.messageService.error({\n            content: \"Error \".concat(val.message)\n          });\n\n          _this2.isLoading = false;\n        },\n        complete: function complete() {\n          _this2.isLoading = false;\n        }\n      });\n    },\n    uploadUserImageFormCamera: function uploadUserImageFormCamera(data) {\n      var _this3 = this;\n\n      var canvas = this.canvasElm;\n      canvas.toBlob(function (blob) {\n        _this3.isLoading = true;\n\n        _this3.oss.put({\n          file: blob,\n          isPrivate: true,\n          business: 'face',\n          uploadProgress: function uploadProgress(e) {\n            _this3.progress = parseInt(e.loaded / e.total * 100);\n          }\n        }).subscribe({\n          next: function next(val) {\n            _this3.isLoading = false;\n            _this3.face = val;\n          },\n          error: function error(val) {\n            _this3.isLoading = false;\n\n            _this3.messageService.error({\n              content: \"Error \".concat(val.message)\n            });\n          },\n          complete: function complete() {\n            // 图片上传成功\n            _this3.isLoading = false;\n          }\n        });\n      });\n    },\n    // 图片质量检测\n    uploadUserImageAndQualityTest: function uploadUserImageAndQualityTest() {\n      var _this4 = this;\n\n      var image = this.face;\n      this.recognitionService.getMemberCheckResult({\n        image_key: image.fileKey\n      }).subscribe(function (res) {\n        var isScan = res.is_scan;\n\n        if (isScan) {\n          var imageId = _this4.list.length && _this4.list[0][_this4.imageId];\n          var current = _this4.list.length && _this4.list[0];\n\n          if (current) {\n            current[_this4.imageKey] = image.fileKey;\n          } else {\n            var _this4$list$push;\n\n            _this4.list.push((_this4$list$push = {}, _defineProperty(_this4$list$push, _this4.imageId, 0), _defineProperty(_this4$list$push, _this4.imageKey, image.fileKey), _defineProperty(_this4$list$push, _this4.imageUrl, image.url), _this4$list$push));\n          }\n\n          _this4.$emit('change', _this4.list);\n\n          _this4.show = false;\n        } else {\n          _this4.messageService.error({\n            content: \"\\u4E0A\\u4F20\\u56FE\\u7247\\u8D28\\u91CF\\u4E0D\\u4F73,\\u8BF7\\u91CD\\u65B0\\u62CD\\u7167\"\n          });\n\n          _this4.face = null;\n        }\n      });\n    },\n    // 创建人脸照片绘制所需的canvas\n    createOutCanvas: function createOutCanvas() {\n      this.canvasCard = document.createElement('canvas');\n      this.canvasCard.style.opacity = 0;\n      this.canvasCard.width = this.picWidth;\n      this.canvasCard.height = this.picHeight;\n      this.canvasCard.style.width = this.picWidth + 'px';\n      this.canvasCard.style.height = this.picHeight + 'px';\n      this.canvasCardContext = this.canvasCard.getContext('2d');\n      this.canvasCardContext.fillStyle = '#ffffff';\n      this.canvasCardContext.fillRect(0, 0, this.picWidth, this.picHeight);\n    },\n    // 拍照\n    handlerTakePhoto: function handlerTakePhoto() {\n      // 如果已有用户头像,则对数组操作,去除当前数据\n      if (this.userImgSrc) {\n        this.face = null;\n        return;\n      } // 如果已拍照,显示重拍,点击重新展示相机\n      // 如果未拍照,显示为拍照,点击拍照\n\n\n      var context = this.canvasElm.getContext('2d');\n      var video = this.$refs.video;\n      context.drawImage(video, 0, 0, this.picWidth, this.picHeight); //const imgSrc = this.canvasElm.toDataURL('image/png')\n\n      this.canvasCardContext.drawImage(this.canvasElm, 0, 0, this.picWidth, this.picHeight, 0, 0, this.picWidth, this.picHeight); //this.userImgSrc = this.canvasElm.toDataURL('image/png')\n\n      this.uploadUserImageFormCamera();\n    },\n    // 开启摄像头\n    openCamera: function openCamera() {\n      if (!navigator.mediaDevices.getUserMedia) {\n        navigator.mediaDevices.getUserMedia = function (constraints) {\n          // 首先获取现存的getUserMedia(如果存在)\n          var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.getUserMedia; // 有些浏览器不支持，会返回错误信息\n          // 保持接口一致\n\n          if (!getUserMedia) {\n            this.openCameraError = true;\n            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\n          }\n\n          this.openCameraError = false; // 否则，使用Promise将调用包装到旧的navigator.getUserMedia\n\n          return new Promise(function (resolve, reject) {\n            getUserMedia.call(navigator, constraints, resolve, reject);\n          });\n        };\n      }\n\n      var constraints = {\n        video: {\n          width: this.picWidth,\n          height: this.picHeight\n        }\n      };\n      this.isLoading = true;\n      navigator.mediaDevices.getUserMedia(constraints).then(this.CameraOpensuccess).catch(this.CameraOpenerror);\n    },\n    // 关闭摄像头\n    closeCamera: function closeCamera() {\n      console.log('关闭摄像头');\n      if (!this.$refs['video'].srcObject) return;\n      var stream = this.$refs['video'].srcObject;\n      var tracks = stream.getTracks();\n      tracks.forEach(function (track) {\n        track.stop();\n      });\n      this.$refs['video'].srcObject = null;\n    },\n    // 摄像头开启成功\n    CameraOpensuccess: function CameraOpensuccess(stream) {\n      var video = this.$refs.video;\n\n      if ('srcObject' in video) {\n        video.srcObject = stream;\n      } else {\n        // 避免在新的浏览器中使用它，因为它正在被弃用。\n        video.src = window.URL.createObjectURL(stream);\n      }\n\n      var that = this;\n\n      video.oncanplay = function (e) {\n        console.log('oncanplay');\n        that.isLoading = false;\n      };\n\n      video.onloadedmetadata = function (e) {\n        video.play(); // video.style.transform = 'scaleX(-1)'\n      };\n    },\n    // 摄像呕吐开启失败\n    CameraOpenerror: function CameraOpenerror(error) {\n      console.log(\"error message \".concat(error));\n      this.openCameraError = true;\n      this.isLoading = false;\n    },\n    // 图片uri转化\n    dataURItoBlob: function dataURItoBlob(dataURI) {\n      // 图片转成Buffer\n      var byteString = atob(dataURI.split(',')[1]);\n      var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n      var ab = new ArrayBuffer(byteString.length);\n      var ia = new Uint8Array(ab);\n\n      for (var i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n      }\n\n      return new Blob([ab], {\n        type: mimeString\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.closeCamera();\n  }\n};",{"version":3,"sources":["recognition.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyFA,SAAA,UAAA,QAAA,wBAAA;AACA,SAAA,SAAA,QAAA,oBAAA;AACA,SAAA,cAAA,QAAA,4BAAA;AACA,SAAA,kBAAA;AACA,OAAA,WAAA;AACA,SAAA,GAAA,QAAA,WAAA;AACA,eAAA;AACA,EAAA,GAAA,EAAA;AACA,IAAA,WAAA,EAAA;AADA,GADA;AAIA,EAAA,aAJA,2BAIA;AACA,WAAA;AACA,MAAA,GAAA,EAAA,UADA;AAEA,MAAA,SAAA,EAAA,SAFA;AAGA,MAAA,cAAA,EAAA,cAHA;AAIA,MAAA,kBAAA,EAAA;AAJA,KAAA;AAMA,GAXA;AAYA,EAAA,OAZA,qBAYA;AACA,WAAA;AACA,MAAA,OAAA,EAAA,KAAA,kBAAA,CAAA;AADA,KAAA;AAGA,GAhBA;AAiBA,EAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA,EAAA;AAAA;AAFA,KADA;AAKA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAAA,eAAA;AACA,UAAA,QAAA,EAAA,UADA;AAEA,UAAA,SAAA,EAAA,WAFA;AAGA,UAAA,SAAA,EAAA;AAHA,SAAA;AAAA;AAFA;AALA,GAjBA;AA+BA,EAAA,IA/BA,kBA+BA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,QADA;AAEA,MAAA,MAAA,EAAA,MAFA;AAGA,MAAA,IAAA,EAAA,KAHA;AAIA,MAAA,IAAA,EAAA,KAAA,QAJA;AAKA,MAAA,IAAA,EAAA,IALA;AAMA,MAAA,SAAA,EAAA,IANA;AAOA,MAAA,cAAA,EAAA,KAPA;AAQA,MAAA,eAAA,EAAA,KARA;AAQA;AACA,MAAA,SAAA,EAAA,KATA;AAUA,MAAA,QAAA,EAAA,GAVA;AAWA,MAAA,SAAA,EAAA,GAXA;AAYA,MAAA,iBAAA,EAAA,EAZA;AAaA,MAAA,UAAA,EAAA;AAbA,KAAA;AAeA,GA/CA;AAgDA,EAAA,KAAA,EAAA;AACA,IAAA,QADA,oBACA,OADA,EACA;AACA,WAAA,IAAA,GAAA,KAAA,QAAA;;AACA,UAAA,KAAA,IAAA,CAAA,MAAA,EAAA;AACA,aAAA,IAAA,GAAA;AACA,UAAA,GAAA,EAAA,KAAA,IAAA,CAAA,CAAA,EAAA,KAAA,QAAA,CADA;AAEA,UAAA,OAAA,EAAA,KAAA,IAAA,CAAA,CAAA,EAAA,KAAA,QAAA;AAFA,SAAA;AAIA;AACA,KATA;AAUA,kCAVA,uCAUA,CAVA,EAUA;AACA,WAAA,KAAA,CAAA,eAAA,EAAA,CAAA;AACA,KAZA;AAaA,IAAA,QAbA,oBAaA,CAbA,EAaA;AACA,WAAA,KAAA,CAAA,gBAAA,EAAA,CAAA;AACA;AAfA,GAhDA;AAiEA,EAAA,QAAA,EAAA;AACA,IAAA,OADA,qBACA;AACA,aAAA,KAAA,KAAA,CAAA,QAAA;AACA,KAHA;AAIA,IAAA,QAJA,sBAIA;AACA,aAAA,KAAA,KAAA,CAAA,SAAA;AACA,KANA;AAOA,IAAA,QAPA,sBAOA;AACA,aAAA,KAAA,KAAA,CAAA,SAAA;AACA,KATA;AAUA,IAAA,UAVA,wBAUA;AACA,aAAA,GAAA,CAAA,KAAA,IAAA,EAAA,KAAA,EAAA,EAAA,CAAA;AACA;AAZA,GAjEA;AA+EA,EAAA,OA/EA,qBA+EA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,eAAA;AACA,GAtFA;AAuFA,EAAA,OAvFA,qBAuFA;AAAA;;AACA,SAAA,SAAA,CAAA,YAAA;AACA,UACA,SAAA,CAAA,YAAA,CAAA,YAAA,IACA,SAAA,CAAA,YADA,IAEA,SAAA,CAAA,kBAFA,IAGA,SAAA,CAAA,eAJA,EAKA;AACA;AACA,QAAA,KAAA,CAAA,UAAA;;AACA,QAAA,KAAA,CAAA,SAAA,GAAA,KAAA,CAAA,KAAA,CAAA,MAAA;AACA,OATA,MASA;AACA,QAAA,KAAA,CAAA,eAAA,GAAA,IAAA;AACA,QAAA,KAAA,CAAA,IAAA,GAAA,IAAA;AACA;AACA,KAdA;AAeA,GAvGA;AAwGA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,QAFA,sBAEA;AACA,WAAA,IAAA,GAAA,KAAA;AACA,KAJA;AAKA;AACA,IAAA,wBANA,oCAMA,IANA,EAMA;AAAA;;AACA,WAAA,SAAA,GAAA,IAAA;AACA,WAAA,GAAA,CACA,GADA,CACA;AACA,QAAA,QAAA,EAAA,MADA;AAEA,QAAA,SAAA,EAAA,IAFA;AAGA,QAAA,IAAA,EAAA,IAAA,CAAA;AAHA,OADA,EAMA,SANA,CAMA;AACA,QAAA,IAAA,EAAA,cAAA,GAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,KAAA,EAAA,GAAA;AACA,UAAA,MAAA,CAAA,IAAA,GAAA,GAAA;AACA,SAJA;AAKA,QAAA,KAAA,EAAA,eAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,cAAA,CAAA,KAAA,CAAA;AAAA,YAAA,OAAA,kBAAA,GAAA,CAAA,OAAA;AAAA,WAAA;;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,KAAA;AACA,SARA;AASA,QAAA,QAAA,EAAA,oBAAA;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,KAAA;AACA;AAXA,OANA;AAmBA,KA3BA;AA4BA,IAAA,yBA5BA,qCA4BA,IA5BA,EA4BA;AAAA;;AACA,UAAA,MAAA,GAAA,KAAA,SAAA;AACA,MAAA,MAAA,CAAA,MAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,MAAA,CAAA,SAAA,GAAA,IAAA;;AACA,QAAA,MAAA,CAAA,GAAA,CACA,GADA,CACA;AACA,UAAA,IAAA,EAAA,IADA;AAEA,UAAA,SAAA,EAAA,IAFA;AAGA,UAAA,QAAA,EAAA,MAHA;AAIA,UAAA,cAAA,EAAA,wBAAA,CAAA,EAAA;AACA,YAAA,MAAA,CAAA,QAAA,GAAA,QAAA,CAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA,KAAA,GAAA,GAAA,CAAA;AACA;AANA,SADA,EASA,SATA,CASA;AACA,UAAA,IAAA,EAAA,cAAA,GAAA,EAAA;AACA,YAAA,MAAA,CAAA,SAAA,GAAA,KAAA;AACA,YAAA,MAAA,CAAA,IAAA,GAAA,GAAA;AACA,WAJA;AAKA,UAAA,KAAA,EAAA,eAAA,GAAA,EAAA;AACA,YAAA,MAAA,CAAA,SAAA,GAAA,KAAA;;AACA,YAAA,MAAA,CAAA,cAAA,CAAA,KAAA,CAAA;AAAA,cAAA,OAAA,kBAAA,GAAA,CAAA,OAAA;AAAA,aAAA;AACA,WARA;AASA,UAAA,QAAA,EAAA,oBAAA;AACA;AACA,YAAA,MAAA,CAAA,SAAA,GAAA,KAAA;AACA;AAZA,SATA;AAuBA,OAzBA;AA0BA,KAxDA;AAyDA;AACA,IAAA,6BA1DA,2CA0DA;AAAA;;AACA,UAAA,KAAA,GAAA,KAAA,IAAA;AACA,WAAA,kBAAA,CACA,oBADA,CACA;AACA,QAAA,SAAA,EAAA,KAAA,CAAA;AADA,OADA,EAIA,SAJA,CAIA,UAAA,GAAA,EAAA;AACA,YAAA,MAAA,GAAA,GAAA,CAAA,OAAA;;AACA,YAAA,MAAA,EAAA;AACA,cAAA,OAAA,GAAA,MAAA,CAAA,IAAA,CAAA,MAAA,IAAA,MAAA,CAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,OAAA,CAAA;AACA,cAAA,OAAA,GAAA,MAAA,CAAA,IAAA,CAAA,MAAA,IAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA;;AACA,cAAA,OAAA,EAAA;AACA,YAAA,OAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,KAAA,CAAA,OAAA;AACA,WAFA,MAEA;AAAA;;AACA,YAAA,MAAA,CAAA,IAAA,CAAA,IAAA,2DACA,MAAA,CAAA,OADA,EACA,CADA,qCAEA,MAAA,CAAA,QAFA,EAEA,KAAA,CAAA,OAFA,qCAGA,MAAA,CAAA,QAHA,EAGA,KAAA,CAAA,GAHA;AAKA;;AACA,UAAA,MAAA,CAAA,KAAA,CAAA,QAAA,EAAA,MAAA,CAAA,IAAA;;AACA,UAAA,MAAA,CAAA,IAAA,GAAA,KAAA;AACA,SAdA,MAcA;AACA,UAAA,MAAA,CAAA,cAAA,CAAA,KAAA,CAAA;AACA,YAAA,OAAA;AADA,WAAA;;AAGA,UAAA,MAAA,CAAA,IAAA,GAAA,IAAA;AACA;AACA,OA1BA;AA2BA,KAvFA;AAwFA;AACA,IAAA,eAzFA,6BAyFA;AACA,WAAA,UAAA,GAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA;AACA,WAAA,UAAA,CAAA,KAAA,CAAA,OAAA,GAAA,CAAA;AACA,WAAA,UAAA,CAAA,KAAA,GAAA,KAAA,QAAA;AACA,WAAA,UAAA,CAAA,MAAA,GAAA,KAAA,SAAA;AACA,WAAA,UAAA,CAAA,KAAA,CAAA,KAAA,GAAA,KAAA,QAAA,GAAA,IAAA;AACA,WAAA,UAAA,CAAA,KAAA,CAAA,MAAA,GAAA,KAAA,SAAA,GAAA,IAAA;AACA,WAAA,iBAAA,GAAA,KAAA,UAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AACA,WAAA,iBAAA,CAAA,SAAA,GAAA,SAAA;AACA,WAAA,iBAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,QAAA,EAAA,KAAA,SAAA;AACA,KAnGA;AAoGA;AACA,IAAA,gBArGA,8BAqGA;AACA;AACA,UAAA,KAAA,UAAA,EAAA;AACA,aAAA,IAAA,GAAA,IAAA;AACA;AACA,OALA,CAMA;AACA;;;AACA,UAAA,OAAA,GAAA,KAAA,SAAA,CAAA,UAAA,CAAA,IAAA,CAAA;AACA,UAAA,KAAA,GAAA,KAAA,KAAA,CAAA,KAAA;AACA,MAAA,OAAA,CAAA,SAAA,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,QAAA,EAAA,KAAA,SAAA,EAVA,CAWA;;AACA,WAAA,iBAAA,CAAA,SAAA,CACA,KAAA,SADA,EAEA,CAFA,EAGA,CAHA,EAIA,KAAA,QAJA,EAKA,KAAA,SALA,EAMA,CANA,EAOA,CAPA,EAQA,KAAA,QARA,EASA,KAAA,SATA,EAZA,CAuBA;;AACA,WAAA,yBAAA;AACA,KA9HA;AA+HA;AACA,IAAA,UAhIA,wBAgIA;AACA,UAAA,CAAA,SAAA,CAAA,YAAA,CAAA,YAAA,EAAA;AACA,QAAA,SAAA,CAAA,YAAA,CAAA,YAAA,GAAA,UAAA,WAAA,EAAA;AACA;AACA,cAAA,YAAA,GACA,SAAA,CAAA,kBAAA,IACA,SAAA,CAAA,eADA,IAEA,SAAA,CAAA,YAHA,CAFA,CAMA;AACA;;AACA,cAAA,CAAA,YAAA,EAAA;AACA,iBAAA,eAAA,GAAA,IAAA;AACA,mBAAA,OAAA,CAAA,MAAA,CACA,IAAA,KAAA,CAAA,iDAAA,CADA,CAAA;AAGA;;AACA,eAAA,eAAA,GAAA,KAAA,CAdA,CAeA;;AACA,iBAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AACA,YAAA,YAAA,CAAA,IAAA,CAAA,SAAA,EAAA,WAAA,EAAA,OAAA,EAAA,MAAA;AACA,WAFA,CAAA;AAGA,SAnBA;AAoBA;;AACA,UAAA,WAAA,GAAA;AACA,QAAA,KAAA,EAAA;AACA,UAAA,KAAA,EAAA,KAAA,QADA;AAEA,UAAA,MAAA,EAAA,KAAA;AAFA;AADA,OAAA;AAMA,WAAA,SAAA,GAAA,IAAA;AACA,MAAA,SAAA,CAAA,YAAA,CACA,YADA,CACA,WADA,EAEA,IAFA,CAEA,KAAA,iBAFA,EAGA,KAHA,CAGA,KAAA,eAHA;AAIA,KAlKA;AAmKA;AACA,IAAA,WApKA,yBAoKA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,OAAA;AACA,UAAA,CAAA,KAAA,KAAA,CAAA,OAAA,EAAA,SAAA,EAAA;AACA,UAAA,MAAA,GAAA,KAAA,KAAA,CAAA,OAAA,EAAA,SAAA;AACA,UAAA,MAAA,GAAA,MAAA,CAAA,SAAA,EAAA;AACA,MAAA,MAAA,CAAA,OAAA,CAAA,UAAA,KAAA,EAAA;AACA,QAAA,KAAA,CAAA,IAAA;AACA,OAFA;AAGA,WAAA,KAAA,CAAA,OAAA,EAAA,SAAA,GAAA,IAAA;AACA,KA7KA;AA8KA;AACA,IAAA,iBA/KA,6BA+KA,MA/KA,EA+KA;AACA,UAAA,KAAA,GAAA,KAAA,KAAA,CAAA,KAAA;;AACA,UAAA,eAAA,KAAA,EAAA;AACA,QAAA,KAAA,CAAA,SAAA,GAAA,MAAA;AACA,OAFA,MAEA;AACA;AACA,QAAA,KAAA,CAAA,GAAA,GAAA,MAAA,CAAA,GAAA,CAAA,eAAA,CAAA,MAAA,CAAA;AACA;;AACA,UAAA,IAAA,GAAA,IAAA;;AACA,MAAA,KAAA,CAAA,SAAA,GAAA,UAAA,CAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,WAAA;AACA,QAAA,IAAA,CAAA,SAAA,GAAA,KAAA;AACA,OAHA;;AAIA,MAAA,KAAA,CAAA,gBAAA,GAAA,UAAA,CAAA,EAAA;AACA,QAAA,KAAA,CAAA,IAAA,GADA,CAEA;AACA,OAHA;AAIA,KAhMA;AAiMA;AACA,IAAA,eAlMA,2BAkMA,KAlMA,EAkMA;AACA,MAAA,OAAA,CAAA,GAAA,yBAAA,KAAA;AACA,WAAA,eAAA,GAAA,IAAA;AACA,WAAA,SAAA,GAAA,KAAA;AACA,KAtMA;AAuMA;AACA,IAAA,aAxMA,yBAwMA,OAxMA,EAwMA;AACA;AACA,UAAA,UAAA,GAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAAA;AACA,UAAA,UAAA,GAAA,OAAA,CACA,KADA,CACA,GADA,EACA,CADA,EAEA,KAFA,CAEA,GAFA,EAEA,CAFA,EAGA,KAHA,CAGA,GAHA,EAGA,CAHA,CAAA;AAIA,UAAA,EAAA,GAAA,IAAA,WAAA,CAAA,UAAA,CAAA,MAAA,CAAA;AACA,UAAA,EAAA,GAAA,IAAA,UAAA,CAAA,EAAA,CAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,UAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,QAAA,EAAA,CAAA,CAAA,CAAA,GAAA,UAAA,CAAA,UAAA,CAAA,CAAA,CAAA;AACA;;AACA,aAAA,IAAA,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAAA,CAAA;AACA;AArNA,GAxGA;AA+TA,EAAA,aA/TA,2BA+TA;AACA,SAAA,WAAA;AACA;AAjUA,CAAA","sourcesContent":["<template>\n  <st-modal\n    :title=\"title\"\n    :ok-text=\"okText\"\n    :okButtonProps=\"{ props: { disabled: !userImgSrc } }\"\n    :bodyStyle=\"{ padding: 0 }\"\n    :confirmLoading=\"loading.getMemberCheckResult\"\n    v-model=\"show\"\n    width=\"484px\"\n    @ok=\"uploadUserImageAndQualityTest\"\n    @cancel=\"onCancel\"\n  >\n    <a-alert\n      slot=\"prepend\"\n      message=\"为保证人脸录入质量，请确保光线充足，以免影响识别精度。\"\n      type=\"warning\"\n      banner\n    />\n    <div :class=\"recognition()\">\n      <div :class=\"recognition('header')\">\n        <div :class=\"recognition('space')\">\n          <a-spin :spinning=\"isLoading\" :class=\"recognition('loading')\">\n            <div :class=\"recognition('img')\">\n              <!-- <img :src=\"userImgSrc\" v-show=\"userImgSrc\" /> -->\n              <div\n                class=\"user-img-src\"\n                v-show=\"userImgSrc\"\n                :style=\"{\n                  backgroundImage: 'url(' + userImgSrc + ')'\n                }\"\n              ></div>\n              <video\n                ref=\"video\"\n                width=\"270\"\n                height=\"270\"\n                autoplay\n                v-show=\"!userImgSrc\"\n              ></video>\n              <canvas\n                :class=\"recognition('canvas')\"\n                ref=\"canvas\"\n                width=\"270\"\n                height=\"270\"\n              ></canvas>\n              <img\n                src=\"~@/assets/img/userBitmap.png\"\n                alt=\"\"\n                :class=\"recognition('userLinePic')\"\n                v-show=\"openCameraError && !userImgSrc\"\n              />\n              <img\n                src=\"~@/assets/img/userLinePic.png\"\n                alt=\"\"\n                :class=\"recognition('userLinePic')\"\n                v-show=\"!openCameraError && !userImgSrc\"\n              />\n            </div>\n          </a-spin>\n          <div :class=\"recognition('operation')\">\n            <st-button\n              type=\"primary\"\n              @click=\"handlerTakePhoto\"\n              :disabled=\"openCameraError\"\n              class=\"mg-b8\"\n            >\n              {{ userImgSrc ? '重拍' : '拍照' }}\n            </st-button>\n            <a-upload\n              name=\"file\"\n              :showUploadList=\"false\"\n              :customRequest=\"uploadUserImageFormPhoto\"\n            >\n              <st-button>\n                {{ userImgSrc ? '重新上传' : '上传照片' }}\n              </st-button>\n            </a-upload>\n\n            <!-- <div :class=\"recognition('tips')\">\n              <div>若录入遇到问题</div>\n              <a href=\"\" :class=\"recognition('question')\">请点击此处</a>\n            </div> -->\n          </div>\n        </div>\n      </div>\n    </div>\n  </st-modal>\n</template>\n\n<script>\nimport { OssService } from '@/services/oss.service'\nimport { AppConfig } from '@/constants/config'\nimport { MessageService } from '@/services/message.service'\nimport { RecognitionService } from './recognition.service'\nimport BrowserType from './recognition-browser'\nimport { get } from 'lodash-es'\nexport default {\n  bem: {\n    recognition: 'st-face-recognition'\n  },\n  serviceInject() {\n    return {\n      oss: OssService,\n      appConfig: AppConfig,\n      messageService: MessageService,\n      recognitionService: RecognitionService\n    }\n  },\n  rxState() {\n    return {\n      loading: this.recognitionService.loading$\n    }\n  },\n  props: {\n    fileList: {\n      type: Array,\n      default: () => []\n    },\n    props: {\n      type: Object,\n      default: () => ({\n        image_id: 'image_id',\n        image_key: 'image_key',\n        image_url: 'image_url'\n      })\n    }\n  },\n  data() {\n    return {\n      title: '人脸信息录入',\n      okText: '确认上传',\n      show: false,\n      list: this.fileList,\n      face: null,\n      canvasElm: null,\n      confirmLoading: false,\n      openCameraError: false, // 开启摄像头失败\n      isLoading: false,\n      picWidth: 270,\n      picHeight: 270,\n      canvasCardContext: '',\n      canvasCard: ''\n    }\n  },\n  watch: {\n    fileList(newList) {\n      this.list = this.fileList\n      if (this.list.length) {\n        this.face = {\n          url: this.list[0][this.imageUrl],\n          fileKey: this.list[0][this.imageKey]\n        }\n      }\n    },\n    'loading.getMemberCheckResult'(v) {\n      this.$emit('loadingChange', v)\n    },\n    progress(v) {\n      this.$emit('progressChange', v)\n    }\n  },\n  computed: {\n    imageId() {\n      return this.props.image_id\n    },\n    imageKey() {\n      return this.props.image_key\n    },\n    imageUrl() {\n      return this.props.image_url\n    },\n    userImgSrc() {\n      return get(this.face, 'url', '')\n    }\n  },\n  created() {\n    // 现在已不需要在兼容firefox\n    // const browserV = BrowserType()\n    // if (browserV === 'FF') {\n    //   this.picHeight = 202\n    // }\n    this.createOutCanvas()\n  },\n  mounted() {\n    this.$nextTick(() => {\n      if (\n        navigator.mediaDevices.getUserMedia ||\n        navigator.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia\n      ) {\n        // 调用用户媒体设备, 访问摄像头\n        this.openCamera()\n        this.canvasElm = this.$refs.canvas\n      } else {\n        this.openCameraError = true\n        this.face = null\n      }\n    })\n  },\n  methods: {\n    // 取消人脸识别图片上传\n    onCancel() {\n      this.show = false\n    },\n    // 人脸图片上传\n    uploadUserImageFormPhoto(data) {\n      this.isLoading = true\n      this.oss\n        .put({\n          business: 'face',\n          isPrivate: true,\n          file: data.file\n        })\n        .subscribe({\n          next: val => {\n            console.log('val', val)\n            this.face = val\n          },\n          error: val => {\n            this.messageService.error({ content: `Error ${val.message}` })\n            this.isLoading = false\n          },\n          complete: () => {\n            this.isLoading = false\n          }\n        })\n    },\n    uploadUserImageFormCamera(data) {\n      let canvas = this.canvasElm\n      canvas.toBlob(blob => {\n        this.isLoading = true\n        this.oss\n          .put({\n            file: blob,\n            isPrivate: true,\n            business: 'face',\n            uploadProgress: e => {\n              this.progress = parseInt((e.loaded / e.total) * 100)\n            }\n          })\n          .subscribe({\n            next: val => {\n              this.isLoading = false\n              this.face = val\n            },\n            error: val => {\n              this.isLoading = false\n              this.messageService.error({ content: `Error ${val.message}` })\n            },\n            complete: () => {\n              // 图片上传成功\n              this.isLoading = false\n            }\n          })\n      })\n    },\n    // 图片质量检测\n    uploadUserImageAndQualityTest() {\n      let image = this.face\n      this.recognitionService\n        .getMemberCheckResult({\n          image_key: image.fileKey\n        })\n        .subscribe(res => {\n          let isScan = res.is_scan\n          if (isScan) {\n            let imageId = this.list.length && this.list[0][this.imageId]\n            let current = this.list.length && this.list[0]\n            if (current) {\n              current[this.imageKey] = image.fileKey\n            } else {\n              this.list.push({\n                [this.imageId]: 0,\n                [this.imageKey]: image.fileKey,\n                [this.imageUrl]: image.url\n              })\n            }\n            this.$emit('change', this.list)\n            this.show = false\n          } else {\n            this.messageService.error({\n              content: `上传图片质量不佳,请重新拍照`\n            })\n            this.face = null\n          }\n        })\n    },\n    // 创建人脸照片绘制所需的canvas\n    createOutCanvas() {\n      this.canvasCard = document.createElement('canvas')\n      this.canvasCard.style.opacity = 0\n      this.canvasCard.width = this.picWidth\n      this.canvasCard.height = this.picHeight\n      this.canvasCard.style.width = this.picWidth + 'px'\n      this.canvasCard.style.height = this.picHeight + 'px'\n      this.canvasCardContext = this.canvasCard.getContext('2d')\n      this.canvasCardContext.fillStyle = '#ffffff'\n      this.canvasCardContext.fillRect(0, 0, this.picWidth, this.picHeight)\n    },\n    // 拍照\n    handlerTakePhoto() {\n      // 如果已有用户头像,则对数组操作,去除当前数据\n      if (this.userImgSrc) {\n        this.face = null\n        return\n      }\n      // 如果已拍照,显示重拍,点击重新展示相机\n      // 如果未拍照,显示为拍照,点击拍照\n      let context = this.canvasElm.getContext('2d')\n      let video = this.$refs.video\n      context.drawImage(video, 0, 0, this.picWidth, this.picHeight)\n      //const imgSrc = this.canvasElm.toDataURL('image/png')\n      this.canvasCardContext.drawImage(\n        this.canvasElm,\n        0,\n        0,\n        this.picWidth,\n        this.picHeight,\n        0,\n        0,\n        this.picWidth,\n        this.picHeight\n      )\n      //this.userImgSrc = this.canvasElm.toDataURL('image/png')\n      this.uploadUserImageFormCamera()\n    },\n    // 开启摄像头\n    openCamera() {\n      if (!navigator.mediaDevices.getUserMedia) {\n        navigator.mediaDevices.getUserMedia = function(constraints) {\n          // 首先获取现存的getUserMedia(如果存在)\n          let getUserMedia =\n            navigator.webkitGetUserMedia ||\n            navigator.mozGetUserMedia ||\n            navigator.getUserMedia\n          // 有些浏览器不支持，会返回错误信息\n          // 保持接口一致\n          if (!getUserMedia) {\n            this.openCameraError = true\n            return Promise.reject(\n              new Error('getUserMedia is not implemented in this browser')\n            )\n          }\n          this.openCameraError = false\n          // 否则，使用Promise将调用包装到旧的navigator.getUserMedia\n          return new Promise(function(resolve, reject) {\n            getUserMedia.call(navigator, constraints, resolve, reject)\n          })\n        }\n      }\n      let constraints = {\n        video: {\n          width: this.picWidth,\n          height: this.picHeight\n        }\n      }\n      this.isLoading = true\n      navigator.mediaDevices\n        .getUserMedia(constraints)\n        .then(this.CameraOpensuccess)\n        .catch(this.CameraOpenerror)\n    },\n    // 关闭摄像头\n    closeCamera() {\n      console.log('关闭摄像头')\n      if (!this.$refs['video'].srcObject) return\n      let stream = this.$refs['video'].srcObject\n      let tracks = stream.getTracks()\n      tracks.forEach(track => {\n        track.stop()\n      })\n      this.$refs['video'].srcObject = null\n    },\n    // 摄像头开启成功\n    CameraOpensuccess(stream) {\n      let video = this.$refs.video\n      if ('srcObject' in video) {\n        video.srcObject = stream\n      } else {\n        // 避免在新的浏览器中使用它，因为它正在被弃用。\n        video.src = window.URL.createObjectURL(stream)\n      }\n      let that = this\n      video.oncanplay = function(e) {\n        console.log('oncanplay')\n        that.isLoading = false\n      }\n      video.onloadedmetadata = function(e) {\n        video.play()\n        // video.style.transform = 'scaleX(-1)'\n      }\n    },\n    // 摄像呕吐开启失败\n    CameraOpenerror(error) {\n      console.log(`error message ${error}`)\n      this.openCameraError = true\n      this.isLoading = false\n    },\n    // 图片uri转化\n    dataURItoBlob(dataURI) {\n      // 图片转成Buffer\n      let byteString = atob(dataURI.split(',')[1])\n      let mimeString = dataURI\n        .split(',')[0]\n        .split(':')[1]\n        .split(';')[0]\n      let ab = new ArrayBuffer(byteString.length)\n      let ia = new Uint8Array(ab)\n      for (let i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i)\n      }\n      return new Blob([ab], { type: mimeString })\n    }\n  },\n  beforeDestroy() {\n    this.closeCamera()\n  }\n}\n</script>\n"],"sourceRoot":"src/views/biz-modals/face"}]}