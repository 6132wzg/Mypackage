{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/shop-store-data-ring.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/shop-store-data-ring.vue","mtime":1591147717127},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.function.name\";\nimport _toConsumableArray from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\nimport { Chart } from '@antv/g2';\nimport { View } from 'st-data-set';\nimport chartMixin from \"./mixin\";\nimport { decimalFilter } from \"./filters\";\nexport default {\n  name: 'BrandStatCourseRing',\n  mixins: [chartMixin],\n  data: function data() {\n    return {\n      intervalStack: {},\n      resize: -99\n    };\n  },\n  props: {\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    height: {\n      type: Number,\n      default: 198\n    },\n    name: {\n      type: String,\n      default: ''\n    },\n    tooltipId: {\n      type: String,\n      default: ''\n    },\n    total: {\n      type: Number,\n      default: 0\n    },\n    padding: {\n      type: Array,\n      default: function _default() {\n        return [50, 80, 30, 'auto'];\n      }\n    },\n    colors: {\n      type: Array,\n      default: function _default() {\n        return ['#4679F9', '#894BFF'];\n      }\n    },\n    unit: {\n      type: String,\n      default: '元'\n    },\n    options: {\n      type: Object,\n      default: function _default() {\n        return {\n          height: 198,\n          totalName: '',\n          color: ['#4679F9', '#894BFF'],\n          totalCount: 0,\n          unit: ''\n        };\n      }\n    }\n  },\n  computed: {\n    dataSource: function dataSource() {\n      //传入的总计为0时，多一个环形图为0的灰色环形图\n      if (this.total === 0) {\n        return [].concat(_toConsumableArray(this.data), [{\n          name: 'empty',\n          value: 1\n        }]);\n      }\n\n      return this.data;\n    }\n  },\n  methods: {\n    initDv: function initDv() {\n      this.dv = new View();\n      this.dv.source(this.dataSource);\n      this.dv.transform({\n        type: 'map',\n        callback: function callback(row) {\n          row.value = +row.value;\n          return row;\n        }\n      });\n    },\n    initChart: function initChart() {\n      var _this = this;\n\n      // chart初始化实例\n      this.getChartInstance(); // 加载数据\n\n      this.chart.source(this.dv, {\n        value: {\n          formatter: function formatter(v) {\n            return v + _this.unit;\n          }\n        }\n      }); // 设置坐标系\n\n      this.setCoord(); // 设置提示信息\n\n      this.setTooltip(); // 设置图例\n\n      this.setLegend(); // 设置复制元素\n\n      this.setGuideHtml(); // 设置渲染环形图\n\n      this.getintervalStack();\n    },\n    getintervalStack: function getintervalStack() {\n      // 环形图初始化\n      this.intervalStack = this.chart.intervalStack().style({\n        fillOpacity: 1,\n        cursor: 'pointer'\n      }).tooltip('name*value', function (item, percent, a) {\n        return {\n          name: item,\n          value: percent\n        };\n      }).position('value').color('name', [].concat(_toConsumableArray(this.colors), ['#e9edf2'])).select(false).active({\n        style: {\n          fillOpacity: 1,\n          lineWidth: 8\n        }\n      });\n      this.chart.render(); // 自定义监听环形图事件\n\n      this.chartEvent();\n    },\n    getChartInstance: function getChartInstance() {\n      this.chart = new Chart({\n        container: this.$el,\n        forceFit: true,\n        padding: this.padding,\n        height: this.height\n      });\n    },\n    setTooltip: function setTooltip() {\n      this.chart.tooltip({\n        showTitle: false,\n        itemTpl: \"<li class=\\\"tooltip-item-{name}\\\">\\n                    <span style=\\\"background-color:{color};\\\" class=\\\"g2-tooltip-marker\\\"></span>\\n                    {name}\\n                    <span class=\\\"st-g2-tooltip-value\\\">| {value}</span>\\n                  </li>\"\n      });\n    },\n    setCoord: function setCoord() {\n      this.chart.coord('theta', {\n        innerRadius: 0.65\n      });\n    },\n    setLegend: function setLegend() {\n      var _this2 = this;\n\n      this.chart.legend({\n        position: 'right-center',\n        useHtml: true,\n        clickable: false,\n        itemTpl: function itemTpl(name, color, checked, index) {\n          var row = _this2.dv.findRow({\n            name: name\n          });\n\n          var value = row.value;\n          return \"<li class=\\\"g2-legend-list-item item-{originValue} item-{index} {checked}\\\" data-color=\\\"{originColor}\\\" data-value=\\\"{originValue}\\\">\\n                    <i class=\\\"g2-legend-marker\\\" style=\\\"background-color:{color};\\\"></i>\\n                    <span class=\\\"g2-legend-text\\\">\".concat(name, \"</span>\\n                    <div class='legend-right mg-l12'>\\n                      <span class='legend-percent'>\").concat(_this2.thousandBit(value)).concat(_this2.unit, \"</span>\\n                    </div>\\n                  </li>\");\n        },\n        onHover: function onHover(ev) {\n          // 总计为 0 是执行hover\n          // if (this.total === 0) return\n          var $s = _this2.$el.querySelector.bind(_this2.$el);\n\n          var name = ev.item.value;\n\n          var row = _this2.dv.findRow({\n            name: name\n          });\n\n          var shapes = ev.shapes;\n          var geom = ev.geom;\n          var legend = ev.currentTarget; // 选中对应单元\n\n          _this2.total !== 0 && geom.setShapesActived(shapes);\n          legend.addEventListener('mouseleave', function () {\n            _this2.resetTotal();\n          });\n          $s('.guide-value').textContent = _this2.thousandBit(row.value);\n          $s('.guide-name-text').textContent = row.name;\n        }\n      });\n    },\n    setGuideHtml: function setGuideHtml() {\n      var _this3 = this;\n\n      // 总计的自定义DOM\n      this.chart.guide().html({\n        position: ['50%', '50%'],\n        html: function html() {\n          _this3.resize = Math.random();\n          return \"<div class='guide'>\\n                    <div class='guide-title'>\\n                      <span class='guide-value'>\".concat(_this3.thousandBit(_this3.total), \"</span>\\n                      <span class='guide-unit'>\").concat(_this3.unit, \"</span>\\n                    </div>\\n                    <div class='guide-name'>\\n                      <span class=\\\"guide-name-text\\\">\").concat(_this3.name, \"</span>\\n                    </div>\\n                  </div>\");\n        }\n      });\n    },\n    resetTotal: function resetTotal() {\n      var $s = this.$el.querySelector.bind(this.$el);\n      $s('.guide-value').textContent = this.thousandBit(this.total);\n      $s('.guide-name-text').textContent = this.name;\n    },\n    setUnit: function setUnit(e) {\n      var $s = this.$el.querySelector.bind(this.$el); // 当环形图总计都是零的时候隐藏tooltip\n\n      if (e.data._origin.name === 'empty') {\n        $s('.g2-tooltip').setAttribute('style', 'display: none');\n        return;\n      }\n\n      var origin = e.data._origin;\n      var shapes = e.shapes;\n      var geom = e.geom;\n      $s('.guide-value').textContent = this.thousandBit(origin.value);\n      $s('.guide-name-text').textContent = origin.name;\n    },\n    chartEvent: function chartEvent() {\n      var _this4 = this;\n\n      // 鼠标进入环形显示相关的值\n      this.chart.on('interval:mouseenter', function (ev) {\n        var shape = ev.shape;\n        var origin = ev.data._origin;\n\n        if (origin.name === 'empty') {\n          _this4.intervalStack.clearActivedShapes(shape);\n        }\n\n        _this4.setUnit(ev);\n      }); // 鼠标离开显示总值\n\n      this.chart.on('interval:mouseleave', function (e) {\n        _this4.resetTotal();\n      });\n    },\n    thousandBit: function thousandBit(value) {\n      var valueArr = (value + '').split('.');\n      return \"\".concat(valueArr[0].replace(/\\d{1,3}(?=(\\d{3})+$)/g, '$&,')).concat(valueArr[1] ? '.' + valueArr[1] : '');\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.chart) {\n      // 注销图形所有事件\n      this.chart.off();\n    }\n  }\n};",null]}