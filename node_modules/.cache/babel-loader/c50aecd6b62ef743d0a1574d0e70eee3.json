{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/schedule/small-course/edit-course.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/schedule/small-course/edit-course.vue","mtime":1591147717193},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { cloneDeep } from 'lodash-es';\nimport { SmallCourseScheduleService } from '@/views/pages/shop/product/course/schedule/small-course/service#/schedule.service';\nimport { SmallCourseScheduleCommonService } from '@/views/pages/shop/product/course/schedule/small-course/service#/common.service';\nimport { ruleOptions } from \"./edit-course.config\";\nexport default {\n  name: 'AddCourseSchedule',\n  serviceInject: function serviceInject() {\n    return {\n      smallCourseScheduleService: SmallCourseScheduleService,\n      smallCourseScheduleCommonService: SmallCourseScheduleCommonService\n    };\n  },\n  rxState: function rxState() {\n    var tss = this.smallCourseScheduleCommonService;\n    return {\n      loading: this.smallCourseScheduleService.loading$,\n      coachSmallCourseOptions: tss.coachBindOptions$,\n      courtOptions: tss.courtOptions$\n    };\n  },\n  computed: {\n    compareTime: function compareTime() {\n      return this.startTime >= this.endTime ? true : '';\n    }\n  },\n  data: function data() {\n    var form = this.$stForm.create();\n    var decorators = form.decorators(ruleOptions);\n    return {\n      form: form,\n      decorators: decorators,\n      show: false,\n      courseItem: '',\n      params: {},\n      cycle_start_date: '',\n      cycle_end_date: '',\n      startTime: '',\n      endTime: ''\n    };\n  },\n  props: {\n    item: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    cycleIndex: {\n      type: Number,\n      default: function _default() {\n        return 0;\n      }\n    },\n    cycle: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    positionIndex: {\n      type: Number,\n      default: function _default() {\n        return 0;\n      }\n    },\n    cycle_type: {\n      type: Number,\n      default: 0\n    },\n    courseInfo: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  created: function created() {\n    var cycleDate = this.cycle;\n    this.cycle_start_date = cycleDate[0].format('YYYY-MM-DD');\n    this.cycle_end_date = cycleDate[1].format('YYYY-MM-DD');\n  },\n  mounted: function mounted() {\n    var item = cloneDeep(this.item);\n    console.log(item);\n    console.log(this.cycle);\n    var court_item = [item.court_id, item.court_site_id];\n    var time = moment(item.start_date);\n    this.form.setFieldsValue({\n      current_course_name: item.current_course_name,\n      coach_id: item.coach_id,\n      court_id: court_item\n    });\n    var start_time, end_time;\n\n    if (this.cycle_type === 2) {\n      start_time = moment(this.item.start_time);\n      end_time = moment(this.item.end_time);\n      this.form.setFieldsValue({\n        start_days: time\n      });\n    } else {\n      start_time = moment(\"\".concat(this.cycle_start_date, \" \").concat(this.item.start_time));\n      end_time = moment(\"\".concat(this.cycle_start_date, \" \").concat(this.item.end_time));\n    }\n\n    this.form.setFieldsValue({\n      start_time: start_time,\n      end_time: end_time\n    });\n    this.startTime = start_time;\n    this.endTime = end_time;\n    this.onChangeCoach(item.coach_id);\n    this.onChangeCourt(court_item);\n  },\n  methods: {\n    changeStartTime: function changeStartTime(value) {\n      this.startTime = value;\n      var endTime = this.form.getFieldValue('end_time');\n    },\n    changeEndTime: function changeEndTime(value) {\n      this.endTime = value;\n    },\n    onChangeCoach: function onChangeCoach(value) {\n      var _this = this;\n\n      this.coachSmallCourseOptions.forEach(function (item, index) {\n        if (item.id === value) {\n          _this.params.coach_name = item.name;\n        }\n      });\n    },\n    onChangeCourt: function onChangeCourt(data) {\n      var _this2 = this;\n\n      this.courtOptions.forEach(function (item, index) {\n        if (item.id === data[0]) {\n          _this2.params.court_name = item.name;\n\n          if (data[1]) {\n            item.children.forEach(function (childrenItem, index) {\n              if (childrenItem.id === data[1]) {\n                _this2.params.court_site_name = childrenItem.name;\n              }\n            });\n          } else {\n            _this2.params.court_site_name = '';\n          }\n        }\n\n        return;\n      });\n    },\n    editCourse: function editCourse(cycleIndex, conflict, params, list) {\n      this.$emit('editCourse', cycleIndex, this.positionIndex, conflict, params, list);\n      this.show = false;\n    },\n    editCustomCourse: function editCustomCourse(params) {\n      this.$emit('editCustomCourse', this.positionIndex, params);\n      this.show = false;\n    },\n    editSchedule: function editSchedule(verifyParams) {\n      var _this3 = this;\n\n      this.smallCourseScheduleService.editScheduleInBatchs(verifyParams).subscribe(function (res) {\n        console.log(res);\n\n        _this3.editCourse(_this3.cycleIndex, res.conflict, verifyParams, res.list);\n      });\n    },\n    editScheduleCustom: function editScheduleCustom(verifyParams) {\n      var _this4 = this;\n\n      this.smallCourseScheduleService.editScheduleInBatchCustoms(verifyParams).subscribe(function (res) {\n        console.log(res);\n\n        if (!res.conflict) {\n          _this4.editCustomCourse(verifyParams);\n        }\n      });\n    },\n    addSchedule: function addSchedule(verifyParams) {\n      var _this5 = this;\n\n      this.smallCourseScheduleService.addScheduleInBatch(verifyParams).subscribe(function (res) {\n        console.log(res);\n\n        if (!res.conflict) {\n          verifyParams.schedule_ids = res.schedule_ids;\n        }\n\n        _this5.editCourse(_this5.cycleIndex, res.conflict, verifyParams, res.list);\n      });\n    },\n    addCourse: function addCourse(cycleIndex, conflict, params, list) {\n      this.$emit('addCourse', cycleIndex, conflict, params, list);\n      this.show = false;\n    },\n    addScheduleCustom: function addScheduleCustom(verifyParams) {\n      var _this6 = this;\n\n      this.smallCourseScheduleService.addScheduleInBatchCustom(verifyParams).subscribe(function (res) {\n        console.log(res);\n\n        if (!res.conflict) {\n          verifyParams.id = res.schedule_id;\n\n          _this6.addCustomCourse(verifyParams);\n        }\n      });\n    },\n    addCustomCourse: function addCustomCourse(params) {\n      this.$emit('addCustomCourse', params);\n      this.show = false;\n    },\n    onSubmit: function onSubmit() {\n      var _this7 = this;\n\n      this.form.validate().then(function (values) {\n        console.log(values);\n        var form = cloneDeep(values);\n\n        if (_this7.cycle_type === 2) {\n          var start_days = values.start_days.format('YYYY-MM-DD');\n          var start_time = values.start_time.format('HH:mm');\n          var end_time = values.end_time.format('HH:mm');\n          form.start_time = start_days + ' ' + start_time;\n          form.end_time = start_days + ' ' + end_time;\n        } else {\n          form.start_time = form.start_time.format('HH:mm');\n          form.end_time = form.end_time.format('HH:mm');\n        }\n\n        form.court_id = values.court_id[0];\n        form.court_site_id = values.court_id[1];\n        form.week = _this7.item.week;\n        form.cycle_start_date = _this7.cycle[0].format('YYYY-MM-DD');\n        form.cycle_end_date = _this7.cycle[1].format('YYYY-MM-DD');\n        form.id = _this7.item.id;\n        form.course_id = _this7.courseInfo.course_id;\n        form.schedule_ids = _this7.item.schedule_ids;\n        var verifyParams = Object.assign(_this7.params, form);\n        console.log('提交参数');\n        console.log(verifyParams);\n\n        if (verifyParams.schedule_ids === undefined && _this7.cycle_type === 1) {\n          _this7.addSchedule(verifyParams);\n\n          return;\n        }\n\n        if (verifyParams.id === undefined && _this7.cycle_type === 2) {\n          _this7.addScheduleCustom(verifyParams);\n\n          return;\n        }\n\n        if (_this7.cycle_type === 1) {\n          _this7.editSchedule(verifyParams);\n        } else {\n          _this7.editScheduleCustom(verifyParams);\n        }\n      });\n    },\n    onClick: function onClick() {\n      this.show = false;\n    },\n    onScheduleChange: function onScheduleChange() {\n      this.$router.reload();\n    }\n  }\n};",null]}