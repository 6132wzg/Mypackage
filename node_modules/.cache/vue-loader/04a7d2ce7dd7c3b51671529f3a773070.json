{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/shop/binding-entity-card.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/shop/binding-entity-card.vue","mtime":1600926555914},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { BindingEntityCardService } from './binding-entity-card.service'\nimport { ruleOptions } from './binding-entity-card.config'\nexport default {\n  serviceInject() {\n    return {\n      service: BindingEntityCardService\n    }\n  },\n  name: 'bindingEntityCard',\n  bem: {\n    b: 'shop-binding-card'\n  },\n  props: {\n    record: {\n      type: Object\n    }\n  },\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      form,\n      decorators,\n      show: false\n    }\n  },\n  methods: {\n    save(e) {\n      e.preventDefault()\n      this.form.validate().then(values => {\n        values.card_num =\n          typeof values.card_num === 'string'\n            ? values.card_num.trim()\n            : values.card_num\n        values.rfid =\n          typeof values.rfid === 'string' ? values.rfid.trim() : values.rfid\n        this.getLableList(values)\n      })\n    },\n    getLableList(data) {\n      this.service\n        .getMemberCard(this.record.member_id, data)\n        .subscribe(state => {\n          this.show = false\n          this.$emit('success')\n        })\n    }\n  }\n}\n",{"version":3,"sources":["binding-entity-card.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"binding-entity-card.vue","sourceRoot":"src/views/biz-modals/shop","sourcesContent":["<template>\n  <st-modal\n    title=\"绑定实体卡\"\n    @ok=\"save\"\n    v-model=\"show\"\n    size=\"small\"\n    wrapClassName=\"shop-binding-card\"\n  >\n    <section>\n      <st-form :form=\"form\" @submit=\"save\" labelWidth=\"67px\">\n        <st-info>\n          <st-info-item label=\"姓名\">{{ record.member_name }}</st-info-item>\n          <st-info-item label=\"手机号\">{{ record.mobile }}</st-info-item>\n        </st-info>\n        <st-form-item label=\"实体卡号\" required>\n          <a-input\n            placeholder=\"输入实体卡号\"\n            v-decorator=\"decorators.card_num\"\n          />\n        </st-form-item>\n        <st-form-item label=\"物理ID\" required>\n          <a-input\n            placeholder=\"请将实体卡置于读卡器上\"\n            v-decorator=\"decorators.rfid\"\n          />\n        </st-form-item>\n      </st-form>\n    </section>\n    <section></section>\n  </st-modal>\n</template>\n<script>\nimport { BindingEntityCardService } from './binding-entity-card.service'\nimport { ruleOptions } from './binding-entity-card.config'\nexport default {\n  serviceInject() {\n    return {\n      service: BindingEntityCardService\n    }\n  },\n  name: 'bindingEntityCard',\n  bem: {\n    b: 'shop-binding-card'\n  },\n  props: {\n    record: {\n      type: Object\n    }\n  },\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      form,\n      decorators,\n      show: false\n    }\n  },\n  methods: {\n    save(e) {\n      e.preventDefault()\n      this.form.validate().then(values => {\n        values.card_num =\n          typeof values.card_num === 'string'\n            ? values.card_num.trim()\n            : values.card_num\n        values.rfid =\n          typeof values.rfid === 'string' ? values.rfid.trim() : values.rfid\n        this.getLableList(values)\n      })\n    },\n    getLableList(data) {\n      this.service\n        .getMemberCard(this.record.member_id, data)\n        .subscribe(state => {\n          this.show = false\n          this.$emit('success')\n        })\n    }\n  }\n}\n</script>\n"]}]}