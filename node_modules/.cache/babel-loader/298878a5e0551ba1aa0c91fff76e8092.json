{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/src/mixins/table2.mixin.js","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/mixins/table2.mixin.js","mtime":1600926555623},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _typeof from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * 处理搜索条件与table的联动\n * table.mixin.js 与页面路由参数挂钩，\n * 本文件仅更新、监听 query 参数，当query参数发生变动时 触发getList方法，getList 需自己定义\n */\nimport { isPlainObject, pick, isEqual, debounce } from 'lodash-es';\nexport default {\n  props: {\n    defaultSelectedRowKeys: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    defaultSelectedRows: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    rowMapKey: {\n      type: String,\n      default: 'id'\n    },\n    defalutQuery: {\n      type: Object,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      show: false,\n      // 选中项目的keys\n      selectedRowKeys: [],\n      // 选中项的行数组\n      selectedRows: [],\n      rowMap: {},\n      query: {\n        current_page: 1,\n        size: 10\n      }\n    };\n  },\n  computed: {\n    // 合并初入传入 以及 组件自定义 的 查询参数\n    _defalutQuery: function _defalutQuery() {\n      return _objectSpread({}, this.customQuery || {}, {}, this.defalutQuery);\n    },\n    searchQuery: {\n      get: function get() {\n        return _objectSpread({}, this.customQuery, {}, this._defalutQuery, {}, this.query);\n      },\n      set: function set(val) {\n        this.query = _objectSpread({}, this.query, {}, val);\n      }\n    },\n    // 多选是否至少勾选一项\n    isSelectedEnabled: function isSelectedEnabled() {\n      return this.selectedRowKeys.length > 0;\n    },\n    // 没有一项选中\n    isSelectedDisabled: function isSelectedDisabled() {\n      return this.selectedRowKeys.length === 0;\n    }\n  },\n  watch: {\n    defaultSelectedRows: {\n      deep: true,\n      handler: function handler(newVal, oldVal) {\n        if (isEqual(newVal, oldVal)) return;\n        this.selectedRows = newVal || [];\n        this.updateRowMap(newVal || []);\n      }\n    },\n    defaultSelectedRowKeys: {\n      deep: true,\n      handler: function handler(newVal, oldVal) {\n        if (isEqual(newVal, oldVal)) return;\n        this.selectedRowKeys = newVal || [];\n      }\n    },\n    query: {\n      deep: true,\n      handler: debounce(function (newVal, oldVal) {\n        if (isEqual(!newVal || newVal, oldVal)) return;\n        console.log('query change', newVal);\n        this.getList && this.getList(newVal);\n      }, 200)\n    }\n  },\n  methods: {\n    init: function init() {\n      var defaultSelectedRows = this.defaultSelectedRows;\n      this.query = _objectSpread({}, this._defalutQuery, {}, this.query);\n      this.selectedRowKeys = this.defaultSelectedRowKeys;\n      this.selectedRows = defaultSelectedRows;\n      console.log('init', this.defaultSelectedRowKeys, this.defaultSelectedRows);\n      this.updateRowMap(defaultSelectedRows); // this.getList()\n    },\n\n    /**\n     * 筛选搜索 使用当前的query参数，只是页数到第一页  只做路由跳转 获取数据的行为在 beforeRouteUpdate 或 beforeEach中定义\n     * @example\n     *  ```html\n     *      <st-button @click='onSearch'></st-button>\n     *  ```\n     */\n    onSearch: function onSearch() {\n      this.query = _objectSpread({}, this.searchQuery, {\n        current_page: 1\n      });\n    },\n\n    /**\n     * 多个字段下的搜索 this.onMultiSearch({a:1,b:2})\n     */\n    onMultiSearch: function onMultiSearch() {\n      var searchFieldsValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!isPlainObject(searchFieldsValue)) {\n        throw new Error(\"[tableMixin] should provide searchFieldsValue is object but got \".concat(_typeof(searchFieldsValue)));\n      }\n\n      this.query = _objectSpread({}, this.searchQuery, {}, searchFieldsValue, {\n        current_page: 1\n      });\n    },\n\n    /**\n     * 筛选重置\n     */\n    onSearchReset: function onSearchReset() {\n      this.query = _objectSpread({}, this._defalutQuery, {\n        current_page: 1,\n        size: this.searchQuery.size\n      });\n    },\n\n    /**\n     * 单个筛选项的即时搜索 @change=\"onSingleSearch('card_type',$event)\"\n     */\n    onSingleSearch: function onSingleSearch(key, data) {\n      this.query = _objectSpread({}, this.searchQuery, {}, _defineProperty({}, key, data), {\n        current_page: 1\n      });\n    },\n\n    /**\n     * 关键词的即时搜索\n     * @example 关键词搜索 去除其它query 页面至第一页，保留分页器\n     *   `@change=\"onKeywordsSearch('keyword',$event)\"`\n     * @example 关键词搜索 保留id字段\n     *   `@change=\"onKeywordsSearch('keyword',$event,['id'])\"`\n     */\n    onKeywordsSearch: function onKeywordsSearch(key, data) {\n      var keepFields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      this.query = _objectSpread(_defineProperty({}, key, data), pick(this.searchQuery, keepFields), {\n        current_page: 1,\n        size: this.searchQuery.size\n      });\n    },\n    // 重置 多选框\n    onSelectionReset: function onSelectionReset() {\n      this.selectedRowKeys = [];\n      this.selectedRows = [];\n    },\n    onSelectionChange: function onSelectionChange(selectedRowKeys, selectedRows) {\n      console.log('changed', selectedRowKeys, selectedRows);\n      this.selectedRowKeys = selectedRowKeys;\n      this.updateRowMap(selectedRows);\n      this.selectedRows = this.calcSelectedRows(selectedRowKeys);\n    },\n    updateRowMap: function updateRowMap(selectedRows) {\n      var _this = this;\n\n      var rowMap = this.rowMap;\n\n      if (selectedRows instanceof Array) {\n        selectedRows.forEach(function (row) {\n          rowMap[row[_this.rowMapKey] || row['id']] = row;\n        });\n        this.rowMap = rowMap;\n      }\n\n      console.log('rowMap', this.rowMap);\n    },\n    calcSelectedRows: function calcSelectedRows(selectedRowKeys) {\n      var _selectedRows = [];\n      var rowMap = this.rowMap;\n      selectedRowKeys.forEach(function (key) {\n        if (rowMap[key]) {\n          _selectedRows.push(rowMap[key]);\n        }\n      });\n      return _selectedRows;\n    },\n    getTableQuery: function getTableQuery(pagination, filter, sorter) {\n      // 排序字段 排序顺序\n      var sort_by, sort_order;\n\n      if (sorter && sorter.field) {\n        sort_by = sorter.field;\n        sort_order = {\n          ascend: 'asc',\n          descend: 'desc'\n        }[sorter.order];\n      }\n\n      if (!pagination) {\n        throw new Error(\"[tableMixin] pagination is not provide \".concat(_typeof(pagination)));\n      }\n\n      return {\n        current_page: pagination.current ? pagination.current : 1,\n        size: pagination.pageSize,\n        sort_by: sort_by,\n        sort_order: sort_order\n      };\n    },\n    // 表格更新\n    onTableChange: function onTableChange(pagination, filter, sorter) {\n      this.query = _objectSpread({}, this.searchQuery, {}, this.getTableQuery(pagination, filter, sorter), {\n        current_page: pagination.current ? pagination.current : 1\n      });\n    }\n  }\n};",{"version":3,"sources":["/Users/wangzhigang/Desktop/styd/web/src/mixins/table2.mixin.js"],"names":["isPlainObject","pick","isEqual","debounce","props","defaultSelectedRowKeys","type","Array","default","defaultSelectedRows","rowMapKey","String","defalutQuery","Object","data","show","selectedRowKeys","selectedRows","rowMap","query","current_page","size","computed","_defalutQuery","customQuery","searchQuery","get","set","val","isSelectedEnabled","length","isSelectedDisabled","watch","deep","handler","newVal","oldVal","updateRowMap","console","log","getList","methods","init","onSearch","onMultiSearch","searchFieldsValue","Error","onSearchReset","onSingleSearch","key","onKeywordsSearch","keepFields","onSelectionReset","onSelectionChange","calcSelectedRows","forEach","row","_selectedRows","push","getTableQuery","pagination","filter","sorter","sort_by","sort_order","field","ascend","descend","order","current","pageSize","onTableChange"],"mappings":"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","sourcesContent":["/**\n * 处理搜索条件与table的联动\n * table.mixin.js 与页面路由参数挂钩，\n * 本文件仅更新、监听 query 参数，当query参数发生变动时 触发getList方法，getList 需自己定义\n */\nimport { isPlainObject, pick, isEqual, debounce } from 'lodash-es'\n\nexport default {\n  props: {\n    defaultSelectedRowKeys: {\n      type: Array,\n      default: () => []\n    },\n    defaultSelectedRows: {\n      type: Array,\n      default: () => []\n    },\n    rowMapKey: {\n      type: String,\n      default: 'id'\n    },\n    defalutQuery: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      show: false,\n      // 选中项目的keys\n      selectedRowKeys: [],\n      // 选中项的行数组\n      selectedRows: [],\n      rowMap: {},\n      query: {\n        current_page: 1,\n        size: 10\n      }\n    }\n  },\n  computed: {\n    // 合并初入传入 以及 组件自定义 的 查询参数\n    _defalutQuery() {\n      return {\n        ...(this.customQuery || {}),\n        ...this.defalutQuery\n      }\n    },\n    searchQuery: {\n      get() {\n        return {\n          ...this.customQuery,\n          ...this._defalutQuery,\n          ...this.query\n        }\n      },\n      set(val) {\n        this.query = { ...this.query, ...val }\n      }\n    },\n    // 多选是否至少勾选一项\n    isSelectedEnabled() {\n      return this.selectedRowKeys.length > 0\n    },\n    // 没有一项选中\n    isSelectedDisabled() {\n      return this.selectedRowKeys.length === 0\n    }\n  },\n  watch: {\n    defaultSelectedRows: {\n      deep: true,\n      handler(newVal, oldVal) {\n        if (isEqual(newVal, oldVal)) return\n        this.selectedRows = newVal || []\n        this.updateRowMap(newVal || [])\n      }\n    },\n    defaultSelectedRowKeys: {\n      deep: true,\n      handler(newVal, oldVal) {\n        if (isEqual(newVal, oldVal)) return\n        this.selectedRowKeys = newVal || []\n      }\n    },\n    query: {\n      deep: true,\n      handler: debounce(function(newVal, oldVal) {\n        if (isEqual(!newVal || newVal, oldVal)) return\n        console.log('query change', newVal)\n        this.getList && this.getList(newVal)\n      }, 200)\n    }\n  },\n  methods: {\n    init() {\n      const { defaultSelectedRows } = this\n      this.query = { ...this._defalutQuery, ...this.query }\n      this.selectedRowKeys = this.defaultSelectedRowKeys\n      this.selectedRows = defaultSelectedRows\n      console.log('init', this.defaultSelectedRowKeys, this.defaultSelectedRows)\n      this.updateRowMap(defaultSelectedRows)\n      // this.getList()\n    },\n    /**\n     * 筛选搜索 使用当前的query参数，只是页数到第一页  只做路由跳转 获取数据的行为在 beforeRouteUpdate 或 beforeEach中定义\n     * @example\n     *  ```html\n     *      <st-button @click='onSearch'></st-button>\n     *  ```\n     */\n    onSearch() {\n      this.query = {\n        ...this.searchQuery,\n        current_page: 1\n      }\n    },\n    /**\n     * 多个字段下的搜索 this.onMultiSearch({a:1,b:2})\n     */\n    onMultiSearch(searchFieldsValue = {}) {\n      if (!isPlainObject(searchFieldsValue)) {\n        throw new Error(\n          `[tableMixin] should provide searchFieldsValue is object but got ${typeof searchFieldsValue}`\n        )\n      }\n      this.query = {\n        ...this.searchQuery,\n        ...searchFieldsValue,\n        current_page: 1\n      }\n    },\n    /**\n     * 筛选重置\n     */\n    onSearchReset() {\n      this.query = {\n        ...this._defalutQuery,\n        current_page: 1,\n        size: this.searchQuery.size\n      }\n    },\n    /**\n     * 单个筛选项的即时搜索 @change=\"onSingleSearch('card_type',$event)\"\n     */\n    onSingleSearch(key, data) {\n      this.query = {\n        ...this.searchQuery,\n        ...{ [key]: data },\n        current_page: 1\n      }\n    },\n    /**\n     * 关键词的即时搜索\n     * @example 关键词搜索 去除其它query 页面至第一页，保留分页器\n     *   `@change=\"onKeywordsSearch('keyword',$event)\"`\n     * @example 关键词搜索 保留id字段\n     *   `@change=\"onKeywordsSearch('keyword',$event,['id'])\"`\n     */\n    onKeywordsSearch(key, data, keepFields = []) {\n      this.query = {\n        [key]: data,\n        ...pick(this.searchQuery, keepFields),\n        current_page: 1,\n        size: this.searchQuery.size\n      }\n    },\n    // 重置 多选框\n    onSelectionReset() {\n      this.selectedRowKeys = []\n      this.selectedRows = []\n    },\n    onSelectionChange(selectedRowKeys, selectedRows) {\n      console.log('changed', selectedRowKeys, selectedRows)\n      this.selectedRowKeys = selectedRowKeys\n      this.updateRowMap(selectedRows)\n      this.selectedRows = this.calcSelectedRows(selectedRowKeys)\n    },\n    updateRowMap(selectedRows) {\n      const rowMap = this.rowMap\n      if (selectedRows instanceof Array) {\n        selectedRows.forEach(row => {\n          rowMap[row[this.rowMapKey] || row['id']] = row\n        })\n        this.rowMap = rowMap\n      }\n      console.log('rowMap', this.rowMap)\n    },\n    calcSelectedRows(selectedRowKeys) {\n      const _selectedRows = []\n      const { rowMap } = this\n      selectedRowKeys.forEach(key => {\n        if (rowMap[key]) {\n          _selectedRows.push(rowMap[key])\n        }\n      })\n      return _selectedRows\n    },\n    getTableQuery(pagination, filter, sorter) {\n      // 排序字段 排序顺序\n      let sort_by, sort_order\n      if (sorter && sorter.field) {\n        sort_by = sorter.field\n        sort_order = { ascend: 'asc', descend: 'desc' }[sorter.order]\n      }\n      if (!pagination) {\n        throw new Error(\n          `[tableMixin] pagination is not provide ${typeof pagination}`\n        )\n      }\n      return {\n        current_page: pagination.current ? pagination.current : 1,\n        size: pagination.pageSize,\n        sort_by,\n        sort_order\n      }\n    },\n    // 表格更新\n    onTableChange(pagination, filter, sorter) {\n      this.query = {\n        ...this.searchQuery,\n        ...this.getTableQuery(pagination, filter, sorter),\n        current_page: pagination.current ? pagination.current : 1\n      }\n    }\n  }\n}\n"]}]}