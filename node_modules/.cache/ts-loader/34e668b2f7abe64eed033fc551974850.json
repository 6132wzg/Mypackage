{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js??ref--13-3!/Users/wangzhigang/Desktop/styd/web/rx-state/src/index.ts","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/rx-state/src/index.ts","mtime":1594718339525},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js","mtime":1591062571609}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _assertThisInitialized from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.reflect.construct\";\nimport _classCallCheck from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Subject, Observable, BehaviorSubject, combineLatest } from 'rxjs';\nimport produce from 'immer';\nimport { refCount, publish, tap, finalize, shareReplay, distinctUntilChanged } from 'rxjs/operators';\n\nvar BehaviorSubjectState = /*#__PURE__*/function (_BehaviorSubject) {\n  _inherits(BehaviorSubjectState, _BehaviorSubject);\n\n  var _super = _createSuper(BehaviorSubjectState);\n\n  function BehaviorSubjectState() {\n    _classCallCheck(this, BehaviorSubjectState);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BehaviorSubjectState, [{\n    key: \"commit\",\n    value: function commit(mutation) {\n      // @ts-ignore\n      this.next(produce(this.value, mutation));\n    }\n  }, {\n    key: \"snapshot\",\n    value: function snapshot() {\n      return this.value;\n    }\n  }]);\n\n  return BehaviorSubjectState;\n}(BehaviorSubject);\n\nexport var State = /*#__PURE__*/function (_BehaviorSubjectState) {\n  _inherits(State, _BehaviorSubjectState);\n\n  var _super2 = _createSuper(State);\n\n  function State(initialState) {\n    var _this;\n\n    _classCallCheck(this, State);\n\n    _this = _super2.call(this, initialState); // @ts-ignore\n\n    var state$ = _assertThisInitialized(_this);\n\n    state$.commit = function (mutation) {\n      // @ts-ignore\n      _this.next(produce(_this.value, mutation));\n    };\n\n    state$.snapshot = function () {\n      return _this.value;\n    };\n\n    return _possibleConstructorReturn(_this, state$);\n  }\n\n  return State;\n}(BehaviorSubjectState);\n/**\n * 获得一个流最后的值状态快照\n */\n\nexport function getSnapshot(stream) {\n  var currentState = null;\n  var subscribtion = stream.subscribe(function (v) {\n    currentState = v;\n  });\n  subscribtion.unsubscribe();\n  return currentState;\n}\nexport var Action = /*#__PURE__*/function () {\n  function Action(epic) {\n    _classCallCheck(this, Action);\n\n    this.trigger$ = new Subject();\n    this.action$ = epic(this.trigger$).pipe(publish(), refCount());\n    this.action$.subscribe();\n  }\n\n  _createClass(Action, [{\n    key: \"dispatch\",\n    value: function dispatch(payload) {\n      this.trigger$.next(payload);\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe() {\n      var _this$action$;\n\n      (_this$action$ = this.action$).subscribe.apply(_this$action$, arguments);\n    }\n  }]);\n\n  return Action;\n}();\nexport function log(tag) {\n  return function (source$) {\n    return source$.pipe(tap(function (v) {\n      if (tag) {\n        console.log(\"[rx-state] state [\".concat(tag, \"] -> \"), v);\n      } else {\n        console.log(\"[rx-state] state ->\", v);\n      }\n    }));\n  };\n}\n\nvar PATCH = function PATCH(tag, value) {\n  return function (state) {\n    state[tag] = value;\n  };\n};\n\nexport function Effect() {\n  return function (target, propKey, descriptor) {\n    var originalFn = target[propKey];\n\n    descriptor.value = function () {\n      var _this2 = this;\n\n      if (!this.loading$) {\n        console && console.warn('[rx-state]  Effect decorator can not find loading$ state!');\n        return originalFn.apply(this, arguments);\n      }\n\n      this.loading$.commit(PATCH(propKey, true));\n      var oriRequest$ = originalFn.apply(this, arguments);\n      var request$ = oriRequest$.pipe(finalize(function () {\n        _this2.loading$.commit(PATCH(propKey, false));\n      }));\n      return request$;\n    };\n  };\n}\n\nvar ObservableWithSnapshot = /*#__PURE__*/function (_Observable) {\n  _inherits(ObservableWithSnapshot, _Observable);\n\n  var _super3 = _createSuper(ObservableWithSnapshot);\n\n  function ObservableWithSnapshot() {\n    _classCallCheck(this, ObservableWithSnapshot);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(ObservableWithSnapshot, [{\n    key: \"snapshot\",\n    value: function snapshot() {\n      return getSnapshot(this);\n    }\n  }]);\n\n  return ObservableWithSnapshot;\n}(Observable);\n\nexport var Computed = /*#__PURE__*/function (_ObservableWithSnapsh) {\n  _inherits(Computed, _ObservableWithSnapsh);\n\n  var _super4 = _createSuper(Computed);\n\n  function Computed(source$) {\n    var _this3;\n\n    _classCallCheck(this, Computed);\n\n    _this3 = _super4.call(this);\n    var computed$ = source$.pipe(distinctUntilChanged(), shareReplay(1));\n\n    computed$.snapshot = function () {\n      return getSnapshot(computed$);\n    };\n\n    return _possibleConstructorReturn(_this3, computed$);\n  }\n\n  return Computed;\n}(ObservableWithSnapshot);\nexport function computed(fn, states) {\n  return new Computed(combineLatest.apply(void 0, _toConsumableArray(states).concat([fn])));\n}",null]}