{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js??ref--13-3!/Users/wangzhigang/Desktop/styd/web/src/services/pattern.service.ts","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/services/pattern.service.ts","mtime":1591147717087},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js","mtime":1591062571609}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _classCallCheck from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nexport var PatternService = /*#__PURE__*/function () {\n  function PatternService() {\n    _classCallCheck(this, PatternService);\n\n    this.DEFAULT_LEN = '1-20';\n    this.PATTERN_MAP = {\n      /**\n       * 中文\n       */\n      CN: \"^[\\\\u4e00-\\\\u9fa5]{**}$\",\n\n      /**\n       * 英文\n       */\n      EN: '^[A-Za-z]{**}$',\n\n      /**\n       * 大写英文\n       */\n      UC_EN: '^[A-Z]{**}$',\n\n      /**\n       * 小写英文\n       */\n      LC_EN: '^[a-z]{**}$',\n\n      /**\n       * 英文 数字 二者至少有一位\n       * /(?=.*[\\d])(?=.*[a-z])(?=.*[A-Z])^[\\dA-Za-z]{6,15}$/\n       */\n      // @ts-ignore\n      UC_LC_EN: '(?=.*[\\\\d])(?=.*[A-z])^[\\\\dA-Za-z]{**}$',\n\n      /**\n       * 英文、数字 至少有一个 英文不区分大小写\n       */\n      // @ts-ignore\n      UL_EN_NUM: '(?=.*[\\\\d])(?=.*[a-z])(?=.*[A-Z])^[\\\\dA-Za-z]{**}$',\n\n      /**\n       * 数字\n       */\n      NUM: '^\\\\d{**}$',\n\n      /**\n       * 数字可以有小数点\n       */\n      NUM_POINT: '^\\\\d+(.\\\\d+)?$',\n\n      /**\n       * 中文、英文\n       */\n      CN_EN: \"^[A-Za-z\\\\u4e00-\\\\u9fa5]{**}$\",\n\n      /**\n       * 中文、英文、数字，不含标点符号\n       */\n      CN_EN_NUM: \"^[A-Za-z0-9\\\\u4e00-\\\\u9fa5]{**}$\",\n\n      /**\n       * 英文、数字\n       */\n      EN_NUM: '^[A-Za-z0-9]{**}$',\n\n      /**\n       * 中文、英文、数字、空格\n       */\n      CN_EN_NUM_SPACE: \"^[A-Za-z0-9\\\\u4e00-\\\\u9fa5]{1,2}$|^[A-Za-z0-9\\\\u4e00-\\\\u9fa5][A-Za-z0-9\\\\u4e00-\\\\u9fa5\\\\s]{**}[A-Za-z0-9\\\\u4e00-\\\\u9fa5]$\",\n\n      /**\n       * 包含手机号和座机号\n       */\n      TEL: '^(((\\\\+\\\\d{2}-)?0\\\\d{2,3}-\\\\d{7,8})|((\\\\+\\\\d{2}-)?(\\\\d{2,3}-)?([1][0-9]{10})))$',\n\n      /**\n       * 手机号\n       */\n      MOBILE: '^1[0-9]{10}$',\n\n      /**\n       * 电子邮箱\n       */\n      EMAIL: '^(?![\\\\w\\\\.@]{51,}$)(\\\\w)+(\\\\.\\\\w+)*@(\\\\w)+((\\\\.\\\\w+)+)$',\n\n      /**\n       * 身份证号\n       */\n      ID: '(^\\\\d{15}$)|(^\\\\d{18}$)|(^\\\\d{17}(\\\\d|X|x)$)',\n\n      /**\n       * 护照\n       */\n      PASSPORT: '^([a-zA-z]|[0-9]){5,17}$',\n\n      /**\n       * 图片类型\n       */\n      IMG: '^(image\\\\/png|image\\\\/jpg|image\\\\/jpeg)$'\n    };\n  }\n  /**\n   * 校验参数 len\n   */\n\n\n  _createClass(PatternService, [{\n    key: \"checkLen\",\n    value: function checkLen(len) {\n      if (!/^\\d+-\\d+$/.test(len)) {\n        console.error(\"\\u8BF7\\u6307\\u5B9A\\u4F4D\\u6570\\uFF0C\\u4F8B\\u5982'4-20'\");\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"createPattern\",\n    value: function createPattern(patternName, len) {\n      if (!this.checkLen(len)) {\n        return;\n      }\n\n      var lens = len.split('-');\n      return new RegExp(this.PATTERN_MAP[patternName].replace('**', \"\".concat(lens[0], \",\").concat(lens[1])));\n    }\n    /**\n     * 中文\n     * @param len\n     */\n\n  }, {\n    key: \"CN\",\n    value: function CN() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('CN', len);\n    }\n    /**\n     * 英文\n     * @param len\n     */\n\n  }, {\n    key: \"EN\",\n    value: function EN() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('EN', len);\n    }\n    /**\n     * 纯大写英文\n     * @param len\n     */\n\n  }, {\n    key: \"UC_EN\",\n    value: function UC_EN() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('UC_EN', len);\n    }\n    /**\n     * 纯小写英文\n     * @param len\n     */\n\n  }, {\n    key: \"LC_EN\",\n    value: function LC_EN() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('LC_EN', len);\n    }\n    /**\n     * 大小写至少包含一个的英文 + 数字\n     * @param len\n     */\n\n  }, {\n    key: \"UC_LC_EN\",\n    value: function UC_LC_EN() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('UC_LC_EN', len);\n    }\n    /**\n     * 英文大小写，数字每样至少有一个\n     * @param len\n     */\n\n  }, {\n    key: \"UL_EN_NUM\",\n    value: function UL_EN_NUM() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('UL_EN_NUM', len);\n    }\n    /**\n     * 中文、英文\n     * @param len\n     */\n\n  }, {\n    key: \"CN_EN\",\n    value: function CN_EN() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('CN_EN', len);\n    }\n    /**\n     * 数字（整数）\n     * @param len\n     */\n\n  }, {\n    key: \"NUM\",\n    value: function NUM() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('NUM', len);\n    }\n    /**\n     * 数字（小数）\n     * @param len\n     */\n\n  }, {\n    key: \"NUM_POINT\",\n    value: function NUM_POINT() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('NUM_POINT', len);\n    }\n    /**\n     * 浮点数，最多支持 decimal 位小数\n     * @param decimal\n     */\n\n  }, {\n    key: \"NUM_FLOAT\",\n    value: function NUM_FLOAT() {\n      var decimal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return new RegExp(\"^\\\\d+(.\\\\d{1,\".concat(decimal, \"})?$\"));\n    }\n    /**\n     * 中文、英文、数字，不含标点符号\n     * @param len\n     */\n\n  }, {\n    key: \"CN_EN_NUM\",\n    value: function CN_EN_NUM() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('CN_EN_NUM', len);\n    }\n    /**\n     * 英文、数字\n     * @param len\n     */\n\n  }, {\n    key: \"EN_NUM\",\n    value: function EN_NUM() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('EN_NUM', len);\n    }\n    /**\n     * 中文、英文、数字、空格（中间，非开头与结尾）\n     */\n\n  }, {\n    key: \"CN_EN_NUM_SPACE\",\n    value: function CN_EN_NUM_SPACE() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      var lens = len.split('-');\n\n      if (+lens[1] <= 2) {\n        return this.createPattern('CN_EN_NUM', len);\n      }\n\n      return this.createPattern('CN_EN_NUM_SPACE', \"\".concat(+lens[0] - 2 >= 0 ? +lens[0] - 2 : 0, \"-\").concat(+lens[1] - 2));\n    }\n    /**\n     * 手机号与座机号\n     */\n\n  }, {\n    key: \"TEL\",\n    get: function get() {\n      return new RegExp(this.PATTERN_MAP['TEL']);\n    }\n    /**\n     * 手机号\n     */\n\n  }, {\n    key: \"MOBILE\",\n    get: function get() {\n      return new RegExp(this.PATTERN_MAP['MOBILE']);\n    }\n  }, {\n    key: \"EMAIL\",\n    get: function get() {\n      return new RegExp(this.PATTERN_MAP['EMAIL']);\n    }\n  }, {\n    key: \"ID\",\n    get: function get() {\n      return new RegExp(this.PATTERN_MAP['ID']);\n    }\n  }, {\n    key: \"PASSPORT\",\n    get: function get() {\n      return new RegExp(this.PATTERN_MAP['PASSPORT']);\n    }\n  }, {\n    key: \"IMG\",\n    get: function get() {\n      return new RegExp(this.PATTERN_MAP['IMG']);\n    }\n  }]);\n\n  return PatternService;\n}();",null]}