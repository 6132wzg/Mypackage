{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/checkbox-facility/checkbox-facility-item.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/checkbox-facility/checkbox-facility-item.vue","mtime":1591147717100},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'StCheckboxFacilityItem',\n  inject: {\n    groupProvide: 'checkboxFacilityGroupProvide',\n    emitGroup: 'emitCheckboxFacilityGroup',\n    initGroup: 'initCheckboxFacilityGroup'\n  },\n  props: {\n    icon: {\n      type: String,\n      required: true\n    },\n    label: {\n      type: String,\n      default: ''\n    },\n    value: {\n      type: [String, Number],\n      required: true\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    stIconComputed() {\n      return this.icon\n    },\n    stLabelComputed() {\n      return this.label\n    },\n    stValueComputed() {\n      return this.value\n    },\n    stDisabledComputed() {\n      return this.disabled\n    },\n    stGroupValueComputed() {\n      return this.groupProvide.groupValue.value\n    },\n    stGroupDisabledComputed() {\n      return this.groupProvide.groupValue.disabled\n    }\n  },\n  watch: {\n    stIconComputed: {\n      handler(newVal, oldVal) {\n        this.init()\n      },\n      deep: true\n    },\n    stLabelComputed: {\n      handler(newVal, oldVal) {\n        this.init()\n      },\n      deep: true\n    },\n    stValueComputed: {\n      handler(newVal, oldVal) {\n        this.init()\n      },\n      deep: true\n    },\n    stDisabledComputed: {\n      handler(newVal, oldVal) {\n        this.init()\n      },\n      deep: true\n    },\n    stGroupValueComputed: {\n      handler(newVal, oldVal) {\n        this.init()\n      },\n      deep: true\n    },\n    stGroupDisabledComputed: {\n      handler(newVal, oldVal) {\n        this.init()\n      },\n      deep: true\n    }\n  },\n  data() {\n    return {\n      stSelect: false,\n      stDisabled: false\n    }\n  },\n  methods: {\n    check() {\n      if (this.stDisabled) return false\n      this.stSelect = !this.stSelect\n      this.$emit('change', this.stSelect)\n      this.emitGroup({ key: this.stValueComputed, value: this.stSelect })\n    },\n    init() {\n      this.stSelect = this.stGroupValueComputed.includes(this.value)\n      this.stDisabled = this.stDisabledComputed || this.stGroupDisabledComputed\n    }\n  },\n  created() {\n    this.init()\n    this.initGroup(this.stValueComputed)\n  }\n}\n",{"version":3,"sources":["checkbox-facility-item.vue"],"names":[],"mappings":";;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"checkbox-facility-item.vue","sourceRoot":"src/views/biz-components/checkbox-facility","sourcesContent":["<template>\n  <div\n    class=\"st-checkbox-facility-item\"\n    @click=\"check\"\n    :class=\"{ select: stSelect, disabled: stDisabled }\"\n  >\n    <div class=\"st-checkbox-facility-item-icon\">\n      <st-icon :type=\"stIconComputed\" size=\"24px\"></st-icon>\n      <p class=\"st-checkbox-facility-item-label\">{{ stLabelComputed }}</p>\n    </div>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'StCheckboxFacilityItem',\n  inject: {\n    groupProvide: 'checkboxFacilityGroupProvide',\n    emitGroup: 'emitCheckboxFacilityGroup',\n    initGroup: 'initCheckboxFacilityGroup'\n  },\n  props: {\n    icon: {\n      type: String,\n      required: true\n    },\n    label: {\n      type: String,\n      default: ''\n    },\n    value: {\n      type: [String, Number],\n      required: true\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    stIconComputed() {\n      return this.icon\n    },\n    stLabelComputed() {\n      return this.label\n    },\n    stValueComputed() {\n      return this.value\n    },\n    stDisabledComputed() {\n      return this.disabled\n    },\n    stGroupValueComputed() {\n      return this.groupProvide.groupValue.value\n    },\n    stGroupDisabledComputed() {\n      return this.groupProvide.groupValue.disabled\n    }\n  },\n  watch: {\n    stIconComputed: {\n      handler(newVal, oldVal) {\n        this.init()\n      },\n      deep: true\n    },\n    stLabelComputed: {\n      handler(newVal, oldVal) {\n        this.init()\n      },\n      deep: true\n    },\n    stValueComputed: {\n      handler(newVal, oldVal) {\n        this.init()\n      },\n      deep: true\n    },\n    stDisabledComputed: {\n      handler(newVal, oldVal) {\n        this.init()\n      },\n      deep: true\n    },\n    stGroupValueComputed: {\n      handler(newVal, oldVal) {\n        this.init()\n      },\n      deep: true\n    },\n    stGroupDisabledComputed: {\n      handler(newVal, oldVal) {\n        this.init()\n      },\n      deep: true\n    }\n  },\n  data() {\n    return {\n      stSelect: false,\n      stDisabled: false\n    }\n  },\n  methods: {\n    check() {\n      if (this.stDisabled) return false\n      this.stSelect = !this.stSelect\n      this.$emit('change', this.stSelect)\n      this.emitGroup({ key: this.stValueComputed, value: this.stSelect })\n    },\n    init() {\n      this.stSelect = this.stGroupValueComputed.includes(this.value)\n      this.stDisabled = this.stDisabledComputed || this.stGroupDisabledComputed\n    }\n  },\n  created() {\n    this.init()\n    this.initGroup(this.stValueComputed)\n  }\n}\n</script>\n"]}]}