{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/components/checkbox-button/checkbox-button-group.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/components/checkbox-button/checkbox-button-group.vue","mtime":1591147717262},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n\nexport default {\n  name: 'StCheckboxButtonGroup',\n  provide() {\n    return {\n      checkboxButtonGroupProvide: {\n        groupValue: this.stValueData\n      },\n      emitCheckboxButtonGroup: data => {\n        let arr = [...new Set([...this.stValueData.value])]\n        let newArr = []\n        if (data.value) {\n          // 选中\n          arr.push(data.key)\n        } else {\n          // 移除\n          if (arr.includes(data.key)) {\n            arr.splice(arr.indexOf(data.key), 1)\n          }\n        }\n        // 去除value里无用的key\n        arr.forEach((i, index) => {\n          if (this.initArr.includes(i)) {\n            newArr.push(i)\n          }\n        })\n        newArr = [...new Set(newArr)]\n        this.$set(this.stValueData, 'value', newArr)\n        this.$emit('modelCheckboxButtonChange', newArr)\n        this.$emit('change', newArr)\n      },\n      initCheckboxButtonGroup: data => {\n        this.initArr.push(data)\n      }\n    }\n  },\n  data() {\n    return {\n      initArr: [],\n      stValueData: {\n        value: [],\n        disabled: false\n      }\n    }\n  },\n  model: {\n    prop: 'value',\n    event: 'modelCheckboxButtonChange'\n  },\n  props: {\n    value: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    value: {\n      deep: true,\n      handler(newVal, oldVal) {\n        this.stValueData.value = [...newVal]\n      }\n    },\n    disabled(newVal, oldVal) {\n      this.stValueData.disabled = newVal\n    }\n  },\n  created() {\n    this.init()\n  },\n  methods: {\n    init() {\n      this.stValueData.value = [...this.value]\n      this.stValueData.disabled = this.disabled\n    }\n  }\n}\n",null]}