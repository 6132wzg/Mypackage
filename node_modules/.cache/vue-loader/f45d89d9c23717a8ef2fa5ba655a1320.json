{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/sold/course/scope.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/sold/course/scope.vue","mtime":1597396799943},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { ScopeService } from './scope.service'\nimport { ruleOptions } from './scope.config'\nimport { BATCH_TYPE, BATCH_INFO } from '@/constants/common/batch-operation'\nimport {\n  cloneDeep,\n  remove,\n  every,\n  filter,\n  reduce,\n  forEach,\n  find,\n  intersection\n} from 'lodash-es'\nexport default {\n  name: 'ModalSoldCourseScope',\n  bem: {\n    add: 'page-shop-add-range-package',\n    basic: 'page-shop-add-basic-package',\n    b: 'modal-sold-course-scope'\n  },\n  serviceProviders() {\n    return [ScopeService]\n  },\n  serviceInject() {\n    return {\n      scopeService: ScopeService\n    }\n  },\n  rxState() {\n    return {\n      list_num: this.scopeService.list_num$,\n      loading: this.scopeService.loading$,\n      coachList: this.scopeService.coachList$,\n      teamCourseList: this.scopeService.teamCourseList$,\n      teamCourseTreeList: this.scopeService.teamCourseTreeList$,\n      personalCourseList: this.scopeService.personalCourseList$,\n      personalCourseTreeList: this.scopeService.personalCourseTreeList$\n    }\n  },\n  props: {\n    ids: {\n      type: Array,\n      required: true\n    },\n    searchQuery: {\n      type: Object\n    }\n  },\n  mounted() {\n    this.scopeService.init(this.searchQuery).subscribe()\n  },\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      expandedKeys: [],\n      autoExpandParent: true,\n      teamCourseIds: [],\n      expandedKeysCourse: [],\n      autoExpandParentCourse: true,\n      teamCourseList: [],\n      searchCourseValue: '',\n      teamChildrenIds: [],\n\n      personalCourseIds: [],\n      expandedKeysPersonal: [],\n      autoExpandParentPersonal: true,\n      searchPersonalValue: '',\n      personalChildrenIds: [],\n\n      BATCH_TYPE,\n      BATCH_INFO,\n      form,\n      decorators,\n      show: false,\n      batch_type: BATCH_TYPE.SELECTED,\n      teamCheckAll: false,\n      personalCheckAll: false,\n      coachAllOperationDropdownIsShow: false,\n      personalAllOperationCoachList: [],\n      personalAllOperationCoachTotal: 0\n    }\n  },\n  computed: {\n    teamCourseShowList() {\n      return this.teamCourseList.filter(item =>\n        this.teamChildrenIds.includes(item.id)\n      )\n    },\n    personalCourseShowList() {\n      const cocahes = []\n      let total = 0\n      this.coachList.forEach(item => {\n        cocahes.push(item.id)\n        total += item.coach_number\n      })\n      return this.personalCourseList.filter(item => {\n        // if (this.personalCourseIds.includes(item.id)) {\n        if (this.personalChildrenIds.includes(item.id)) {\n          item.coachGradeList = cocahes\n          item.coach = total\n          return item\n        }\n      })\n    },\n    helpText() {\n      return this.list_num > this.BATCH_INFO.LIMIT_NUM\n        ? this.BATCH_INFO.ERROR_TIP\n        : ''\n    },\n    helpShow() {\n      return this.list_num > this.BATCH_INFO.LIMIT_NUM\n    },\n    operateDataNum() {\n      return this.batch_type === this.BATCH_TYPE.SELECTED\n        ? this.ids.length\n        : this.list_num\n    }\n  },\n  methods: {\n    getPopupContainer() {\n      return document.getElementsByClassName('modal-sold-course-scope')[0]\n    },\n    onTeamTree() {\n      this.teamChildrenIds = this.teamCourseIds.filter(\n        i => !find(this.teamCourseTreeList, { id: i })\n      )\n      this.teamCourseIds.forEach((i, index) => {\n        const item = find(this.teamCourseTreeList, { id: i })\n        if (item) {\n          const isExist = item.children.filter(childrenItem =>\n            this.teamCourseIds.includes(childrenItem.id)\n          )\n          if (isExist.length <= 0) {\n            this.teamCourseIds.splice(index, 1)\n          } else if (isExist.length !== item.children.length) {\n            const index = this.teamCourseIds.indexOf(item.id)\n            this.teamCourseIds.splice(index, 1)\n          }\n        }\n      })\n    },\n    onPersonalTree() {\n      this.personalChildrenIds = this.personalCourseIds.filter(\n        i => !find(this.personalCourseTreeList, { id: i })\n      )\n      this.personalCourseIds.forEach((i, index) => {\n        const item = find(this.personalCourseTreeList, { id: i })\n        if (item) {\n          const isExist = item.children.filter(childrenItem =>\n            this.personalCourseIds.includes(childrenItem.id)\n          )\n          if (isExist.length <= 0) {\n            this.personalCourseIds.splice(index, 1)\n          } else if (isExist.length !== item.children.length) {\n            const index = this.personalCourseIds.indexOf(item.id)\n            this.personalCourseIds.splice(index, 1)\n          }\n        }\n      })\n    },\n    coachItemChange(item, index) {\n      const arr = this.coachList.filter(i => item.coachGradeList.includes(i.id))\n      let total = 0\n      arr.forEach(i => {\n        total += i.coach_number\n      })\n      item.coach = total\n    },\n    onClickDeleteTeam(i, index) {\n      this.teamCourseIds = this.teamCourseIds.filter(item => item !== i.id)\n      this.onTeamTree()\n    },\n    onClickDeletePersonal(i, index) {\n      this.personalCourseIds = this.personalCourseIds.filter(\n        item => item !== i.id\n      )\n      this.onPersonalTree()\n    },\n    checkAllChange(type) {\n      if (type === 'team') {\n        this.teamCheckAll = !this.teamCheckAll\n        this.teamCourseShowList.forEach(item => {\n          item.checked = this.teamCheckAll\n        })\n      }\n      if (type === 'personal') {\n        this.personalCheckAll = !this.personalCheckAll\n        this.personalCourseShowList.forEach(item => {\n          item.checked = this.personalCheckAll\n        })\n      }\n    },\n    removeCourseItems(type) {\n      if (type === 'team') {\n        if (this.teamCheckAll) {\n          this.teamCourseIds = []\n          this.teamCheckAll = false\n          this.onTeamTree()\n        }\n      }\n      if (type === 'personal') {\n        if (this.personalCheckAll) {\n          this.personalCourseIds = []\n          this.personalCheckAll = false\n          this.onPersonalTree()\n        }\n      }\n    },\n    filterCourseList(e) {\n      const value = e.target.value\n      const expandedKeysCourse = this.teamCourseList\n        .map(item => {\n          if (item.name.indexOf(value) > -1) {\n            return this.getParentKey(\n              item.name,\n              cloneDeep(this.teamCourseTreeList)\n            )\n          }\n          return null\n        })\n        .filter((item, i, self) => item && self.indexOf(item) === i)\n      Object.assign(this, {\n        expandedKeysCourse,\n        searchCourseValue: value,\n        autoExpandParentCourse: true\n      })\n    },\n    filterPersonalList(e) {\n      const value = e.target.value\n      const expandedKeysPersonal = this.personalCourseList\n        .map(item => {\n          if (item.name.indexOf(value) > -1) {\n            return this.getParentKey(\n              item.name,\n              cloneDeep(this.personalCourseTreeList)\n            )\n          }\n          return null\n        })\n        .filter((item, i, self) => item && self.indexOf(item) === i)\n      Object.assign(this, {\n        expandedKeysPersonal,\n        searchPersonalValue: value,\n        autoExpandParentPersonal: true\n      })\n    },\n    getParentKey(key, tree) {\n      let parentKey\n      for (let i = 0; i < tree.length; i++) {\n        const node = tree[i]\n        if (node.children) {\n          if (node.children.some(item => item.name === key)) {\n            parentKey = node.key\n          } else if (this.getParentKey(key, node.children)) {\n            parentKey = this.getParentKey(key, node.children)\n          }\n        }\n      }\n      return parentKey\n    },\n    onExpandCourse(expandedKeys) {\n      this.expandedKeysCourse = expandedKeys\n      this.autoExpandParentCourse = false\n    },\n    onExpandPersonal(expandedKeys) {\n      this.expandedKeysPersonal = expandedKeys\n      this.autoExpandParentPersonal = false\n    },\n    coachAllChange() {\n      const arr = this.coachList.filter(i =>\n        this.personalAllOperationCoachList.includes(i.id)\n      )\n      let total = 0\n      arr.forEach(i => {\n        total += i.coach_number\n      })\n      this.personalAllOperationCoachTotal = total\n    },\n    coachAllOperationOk() {\n      const arr = this.coachList.filter(i =>\n        this.personalAllOperationCoachList.includes(i.id)\n      )\n      let total = 0\n      arr.forEach(i => {\n        total += i.coach_number\n      })\n      this.personalCourseShowList.forEach(item => {\n        item.coachGradeList = cloneDeep(this.personalAllOperationCoachList)\n        item.coach = total\n      })\n      // 清空\n      this.personalAllOperationCoachList = []\n      this.personalAllOperationCoachTotal = 0\n      // 收起\n      this.coachAllOperationDropdownIsShow = false\n    },\n    onSubmit() {\n      this.form.validate().then(values => {\n        const arr = []\n        this.personalCourseShowList.forEach(item => {\n          arr.push({\n            id: item.id,\n            level_ids: item.coachGradeList\n          })\n        })\n        this.scopeService\n          .changePackageRange({\n            batch_type: this.batch_type,\n            sold_ids: this.ids,\n            conditions: this.searchQuery,\n            range_teams: this.teamChildrenIds,\n            range_personals: arr\n          })\n          .subscribe(res => {\n            this.$emit('success')\n            this.show = false\n          })\n      })\n    }\n  }\n}\n",null]}