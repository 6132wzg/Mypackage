{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/mixin.js","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/mixin.js","mtime":1600926555659},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418}],"contextDependencies":[],"result":["import G2 from '@antv/g2';\nimport { ChartConfig } from \"./config\";\nimport { merge } from 'lodash-es';\nexport default {\n  props: {\n    /**\n     * 图表id\n     */\n    id: {\n      type: String,\n      default: 'chart'\n    },\n\n    /**\n     * 图表数据\n     */\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    options: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  watch: {\n    data: {\n      deep: true,\n      handler: function handler(newData) {\n        if (!this.chart) {\n          this.initDv();\n          this.initOpts();\n          this.renderChart();\n        } else {\n          this.initDv();\n          this.initOpts();\n          this.chart.changeData(this.dv);\n          this.changeData && this.changeData(); // 自定义的changeData\n        }\n      }\n    }\n  },\n  data: function data() {\n    return {\n      opts: {}\n    };\n  },\n  created: function created() {\n    this.initDv();\n    this.initOpts();\n  },\n  mounted: function mounted() {\n    if (this.data.length) {\n      this.renderChart();\n    }\n  },\n  methods: {\n    initOpts: function initOpts() {\n      G2.track(false) // 关闭打点监控\n      // 获取默认配置项 并与 传入的配置项进行深度合并，\n      // (默认配置项可以从自定义组件的 getChartConfig 中获取， 也可以从默认的配置文件中根据 组件的this.type 获取相应的配置)\n      // 如果组件的配置参数在单独的配置文件中 则这个方法必须设置\n      ;\n      this.chartConfig = this.getChartConfig ? this.getChartConfig() : ChartConfig.apply(this), this.opts = merge(this.chartConfig, this.options);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n  }\n};",{"version":3,"sources":["/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/mixin.js"],"names":["G2","ChartConfig","merge","props","id","type","String","default","data","Array","options","Object","watch","deep","handler","newData","chart","initDv","initOpts","renderChart","changeData","dv","opts","created","mounted","length","methods","track","chartConfig","getChartConfig","apply","beforeDestroy","destroy"],"mappings":"AAAA,OAAOA,EAAP,MAAe,UAAf;AACA,SAASC,WAAT;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,eAAe;AACbC,EAAAA,KAAK,EAAE;AACL;;;AAGAC,IAAAA,EAAE,EAAE;AACFC,MAAAA,IAAI,EAAEC,MADJ;AAEFC,MAAAA,OAAO,EAAE;AAFP,KAJC;;AAQL;;;AAGAC,IAAAA,IAAI,EAAE;AACJH,MAAAA,IAAI,EAAEI,KADF;AAEJF,MAAAA,OAFI,sBAEM;AACR,eAAO,EAAP;AACD;AAJG,KAXD;AAiBLG,IAAAA,OAAO,EAAE;AACPL,MAAAA,IAAI,EAAEM,MADC;AAEPJ,MAAAA,OAFO,sBAEG;AACR,eAAO,EAAP;AACD;AAJM;AAjBJ,GADM;AAyBbK,EAAAA,KAAK,EAAE;AACLJ,IAAAA,IAAI,EAAE;AACJK,MAAAA,IAAI,EAAE,IADF;AAEJC,MAAAA,OAFI,mBAEIC,OAFJ,EAEa;AACf,YAAI,CAAC,KAAKC,KAAV,EAAiB;AACf,eAAKC,MAAL;AACA,eAAKC,QAAL;AACA,eAAKC,WAAL;AACD,SAJD,MAIO;AACL,eAAKF,MAAL;AACA,eAAKC,QAAL;AACA,eAAKF,KAAL,CAAWI,UAAX,CAAsB,KAAKC,EAA3B;AACA,eAAKD,UAAL,IAAmB,KAAKA,UAAL,EAAnB,CAJK,CAIgC;AACtC;AACF;AAbG;AADD,GAzBM;AA2CbZ,EAAAA,IA3Ca,kBA2CN;AACL,WAAO;AACLc,MAAAA,IAAI,EAAE;AADD,KAAP;AAGD,GA/CY;AAgDbC,EAAAA,OAhDa,qBAgDH;AACR,SAAKN,MAAL;AACA,SAAKC,QAAL;AACD,GAnDY;AAoDbM,EAAAA,OApDa,qBAoDH;AACR,QAAI,KAAKhB,IAAL,CAAUiB,MAAd,EAAsB;AACpB,WAAKN,WAAL;AACD;AACF,GAxDY;AAyDbO,EAAAA,OAAO,EAAE;AACPR,IAAAA,QADO,sBACI;AACTlB,MAAAA,EAAE,CAAC2B,KAAH,CAAS,KAAT,EAAgB;AAChB;AACA;AACA;AAHA;AAIE,WAAKC,WAAL,GAAmB,KAAKC,cAAL,GACjB,KAAKA,cAAL,EADiB,GAEjB5B,WAAW,CAAC6B,KAAZ,CAAkB,IAAlB,CAFH,EAGE,KAAKR,IAAL,GAAYpB,KAAK,CAAC,KAAK0B,WAAN,EAAmB,KAAKlB,OAAxB,CAHnB;AAIF;AAVM,GAzDI;AAqEbqB,EAAAA,aArEa,2BAqEG;AACd,QAAI,KAAKf,KAAT,EAAgB;AACd,WAAKA,KAAL,CAAWgB,OAAX;AACD;AACF;AAzEY,CAAf","sourcesContent":["import G2 from '@antv/g2'\nimport { ChartConfig } from './config'\nimport { merge } from 'lodash-es'\nexport default {\n  props: {\n    /**\n     * 图表id\n     */\n    id: {\n      type: String,\n      default: 'chart'\n    },\n    /**\n     * 图表数据\n     */\n    data: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    options: {\n      type: Object,\n      default() {\n        return {}\n      }\n    }\n  },\n  watch: {\n    data: {\n      deep: true,\n      handler(newData) {\n        if (!this.chart) {\n          this.initDv()\n          this.initOpts()\n          this.renderChart()\n        } else {\n          this.initDv()\n          this.initOpts()\n          this.chart.changeData(this.dv)\n          this.changeData && this.changeData() // 自定义的changeData\n        }\n      }\n    }\n  },\n\n  data() {\n    return {\n      opts: {}\n    }\n  },\n  created() {\n    this.initDv()\n    this.initOpts()\n  },\n  mounted() {\n    if (this.data.length) {\n      this.renderChart()\n    }\n  },\n  methods: {\n    initOpts() {\n      G2.track(false) // 关闭打点监控\n      // 获取默认配置项 并与 传入的配置项进行深度合并，\n      // (默认配置项可以从自定义组件的 getChartConfig 中获取， 也可以从默认的配置文件中根据 组件的this.type 获取相应的配置)\n      // 如果组件的配置参数在单独的配置文件中 则这个方法必须设置\n      ;(this.chartConfig = this.getChartConfig\n        ? this.getChartConfig()\n        : ChartConfig.apply(this)),\n        (this.opts = merge(this.chartConfig, this.options))\n    }\n  },\n  beforeDestroy() {\n    if (this.chart) {\n      this.chart.destroy()\n    }\n  }\n}\n"]}]}