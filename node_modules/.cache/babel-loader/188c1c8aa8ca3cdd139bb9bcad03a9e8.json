{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/brand-stat-order-facet-bar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/brand-stat-order-facet-bar.vue","mtime":1591147717120},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\nimport chartMixin from \"./mixin\";\nimport { Chart } from '@antv/g2';\nimport { View } from 'st-data-set';\nimport Vue from 'vue';\nimport StHelpTooltip from '@/views/components/help-tooltip/help-tooltip';\nimport { debounce } from 'lodash-es';\nexport default {\n  mixins: [chartMixin],\n  data: function data() {\n    return {\n      dataSource: []\n    };\n  },\n  props: {\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    fields: {\n      type: Array,\n      default: function _default() {\n        return ['客单价', '成单数量'];\n      }\n    },\n    colors: {\n      type: Array,\n      default: function _default() {\n        return ['#3F66F6', '#06DB8C'];\n      } // default: () => ['l(270) 0:#3F66F6 1:#3F66F6', 'l(270) 0:#06DB8C 1:#3F66F6']\n\n    },\n    height: {\n      type: Number,\n      default: 280\n    }\n  },\n  mounted: function mounted() {\n    window.addEventListener('resize', debounce(this.mountedTooltip, 200));\n  },\n  methods: {\n    mountedTooltip: function mountedTooltip() {\n      setTimeout(this.changeData, 400);\n    },\n    initDv: function initDv() {\n      this.dv = new View();\n      this.dv.source(this.data);\n      this.dv.transform({\n        type: 'fold',\n        fields: this.fields,\n        key: 'type',\n        value: 'value'\n      }).transform({\n        type: 'map',\n        callback: function callback(row) {\n          row.value = row.value ? +row.value : 0;\n          return row;\n        }\n      });\n    },\n    initChart: function initChart() {\n      var _this = this;\n\n      var h = this.$createElement;\n      var tooltipEl = new Vue({\n        components: {\n          StHelpTooltip: StHelpTooltip\n        },\n        render: function render(h) {\n          return h(\"st-help-tooltip\");\n        }\n      }).$mount().$el;\n      this.chart = new Chart({\n        container: this.$el,\n        padding: [0, 0, 18, 70],\n        renderer: 'svg',\n        forceFit: true,\n        height: this.height\n      });\n      this.chart.source(this.dv); // 图例位置\n\n      this.chart.legend({\n        position: 'bottom-center',\n        useHtml: true,\n        itemTpl: function itemTpl(name, color, checked, index) {\n          var idx = 0;\n\n          if (name === '成单数量') {\n            idx = 1;\n          }\n\n          return \"<li class=\\\"g2-legend-list-item item-{index} {checked}\\\" data-color=\\\"{originColor}\\\" data-value=\\\"{originValue}\\\">\" + \"<i class=\\\"g2-legend-marker\\\" style=\\\"background-color:{color};\\\"></i>\" + \"<span class=\\\"g2-legend-text\\\">\".concat(name, \"&nbsp;<span id='legend-\").concat(idx, \"' class=\\\"test test1\\\"></span></span>\") + \"</li>\";\n        }\n      }); // 图表分面 相当于两个柱状图\n\n      this.chart.facet('mirror', {\n        fields: ['type'],\n        padding: 4,\n        showTitle: false,\n        transpose: true,\n        eachView: function eachView(view, facet) {\n          var facetIndex = facet.colIndex;\n          view.axis('group', {\n            position: 'top',\n            label: {\n              offset: 70,\n              textStyle: {\n                fill: '#3E4D5C',\n                fontSize: 12\n              },\n              htmlTemplate: function htmlTemplate(text, item, index) {\n                // 增加tooltipEl.outerHTML，防止mounted未完成导致的空白闪烁\n                return \"<span style=\\\"width:70px;display:block;\\\">\".concat(text, \"</span>\");\n              }\n            },\n            tickLine: {\n              alignWithLabel: false,\n              length: 0\n            },\n            line: {\n              lineWidth: 0\n            }\n          });\n          var color = _this.colors[facetIndex];\n          view.axis('value', false);\n          var len = _this.data.length;\n\n          for (var i = 0; i < len; i++) {\n            var yaxis1 = 2.3 + 100 / len * i;\n            var yaxis2 = 12.3 + 100 / len * i;\n            view.guide().region({\n              start: ['0%', \"\".concat(yaxis1, \"%\")],\n              // 辅助框起始位置，值为原始数据值，支持 callback\n              end: ['100%', \"\".concat(yaxis2, \"%\")],\n              // 辅助框结束位置，值为原始数据值，支持 callback\n              style: {\n                lineWidth: 0,\n                // 辅助框的边框宽度\n                fill: '#E9EDF2',\n                // 辅助框填充的颜色\n                fillOpacity: 1,\n                // 辅助框的背景透明度\n                stroke: '#ccc' // 辅助框的边框颜色设置\n\n              }\n            });\n          }\n\n          view.interval().position('group*value').tooltip('type*value', function (t, v) {\n            return {\n              name: t,\n              value: v\n            };\n          }).color('type', function (value) {\n            return color;\n          }).size(24).opacity(1).label('value', function (val) {\n            var maxValue = _this.dv.max('value');\n\n            var offset = -4;\n            var textAlign = facetIndex === 1 ? 'end' : 'start';\n            var fill = 'white';\n            var shouldPutLeft = val / maxValue < 0.1;\n\n            if (shouldPutLeft) {\n              offset = 4;\n              textAlign = facetIndex === 1 ? 'start' : 'end';\n              fill = '#3E4D5C';\n            }\n\n            return {\n              offset: offset,\n              textStyle: {\n                fill: fill,\n                textAlign: textAlign\n              }\n            };\n          });\n        }\n      });\n      this.chart.render();\n      this.changeData();\n    },\n    changeData: function changeData() {\n      var h = this.$createElement;\n      new Vue({\n        components: {\n          StHelpTooltip: StHelpTooltip\n        },\n        render: function render(h) {\n          return h(\"st-help-tooltip\", {\n            \"attrs\": {\n              \"id\": \"TBDAO001\"\n            }\n          });\n        }\n      }).$mount('#legend-0');\n      new Vue({\n        components: {\n          StHelpTooltip: StHelpTooltip\n        },\n        render: function render(h) {\n          return h(\"st-help-tooltip\", {\n            \"attrs\": {\n              \"id\": \"TBDAO002\"\n            }\n          });\n        }\n      }).$mount('#legend-1');\n    }\n  }\n};",{"version":3,"sources":["brand-stat-order-facet-bar.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <!-- 订单概览分面柱状图 -->\n  <div class=\"brand-stat-facet-bar\"></div>\n</template>\n\n<script>\nimport chartMixin from './mixin'\nimport { Chart } from '@antv/g2'\nimport { View } from 'st-data-set'\nimport Vue from 'vue'\nimport StHelpTooltip from '@/views/components/help-tooltip/help-tooltip'\nimport { debounce } from 'lodash-es'\nexport default {\n  mixins: [chartMixin],\n  data() {\n    return {\n      dataSource: []\n    }\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    fields: {\n      type: Array,\n      default: () => ['客单价', '成单数量']\n    },\n    colors: {\n      type: Array,\n      default: () => ['#3F66F6', '#06DB8C']\n      // default: () => ['l(270) 0:#3F66F6 1:#3F66F6', 'l(270) 0:#06DB8C 1:#3F66F6']\n    },\n    height: {\n      type: Number,\n      default: 280\n    }\n  },\n  mounted() {\n    window.addEventListener('resize', debounce(this.mountedTooltip, 200))\n  },\n  methods: {\n    mountedTooltip() {\n      setTimeout(this.changeData, 400)\n    },\n    initDv() {\n      this.dv = new View()\n      this.dv.source(this.data)\n      this.dv\n        .transform({\n          type: 'fold',\n          fields: this.fields,\n          key: 'type',\n          value: 'value'\n        })\n        .transform({\n          type: 'map',\n          callback(row) {\n            row.value = row.value ? +row.value : 0\n            return row\n          }\n        })\n    },\n    initChart() {\n      let tooltipEl = new Vue({\n        components: {\n          StHelpTooltip\n        },\n        render: h => <st-help-tooltip />\n      }).$mount().$el\n      this.chart = new Chart({\n        container: this.$el,\n        padding: [0, 0, 18, 70],\n        renderer: 'svg',\n        forceFit: true,\n        height: this.height\n      })\n\n      this.chart.source(this.dv)\n      // 图例位置\n      this.chart.legend({\n        position: 'bottom-center',\n        useHtml: true,\n        itemTpl: (name, color, checked, index) => {\n          let idx = 0\n          if (name === '成单数量') {\n            idx = 1\n          }\n          return (\n            `<li class=\"g2-legend-list-item item-{index} {checked}\" data-color=\"{originColor}\" data-value=\"{originValue}\">` +\n            `<i class=\"g2-legend-marker\" style=\"background-color:{color};\"></i>` +\n            `<span class=\"g2-legend-text\">${name}&nbsp;<span id='legend-${idx}' class=\"test test1\"></span></span>` +\n            `</li>`\n          )\n        }\n      })\n      // 图表分面 相当于两个柱状图\n      this.chart.facet('mirror', {\n        fields: ['type'],\n        padding: 4,\n        showTitle: false,\n        transpose: true,\n\n        eachView: (view, facet) => {\n          const facetIndex = facet.colIndex\n          view.axis('group', {\n            position: 'top',\n            label: {\n              offset: 70,\n              textStyle: {\n                fill: '#3E4D5C',\n                fontSize: 12\n              },\n              htmlTemplate: (text, item, index) => {\n                // 增加tooltipEl.outerHTML，防止mounted未完成导致的空白闪烁\n                return `<span style=\"width:70px;display:block;\">${text}</span>`\n              }\n            },\n            tickLine: {\n              alignWithLabel: false,\n              length: 0\n            },\n            line: {\n              lineWidth: 0\n            }\n          })\n\n          const color = this.colors[facetIndex]\n          view.axis('value', false)\n\n          const len = this.data.length\n          for (let i = 0; i < len; i++) {\n            const yaxis1 = 2.3 + (100 / len) * i\n            const yaxis2 = 12.3 + (100 / len) * i\n            view.guide().region({\n              start: ['0%', `${yaxis1}%`], // 辅助框起始位置，值为原始数据值，支持 callback\n              end: ['100%', `${yaxis2}%`], // 辅助框结束位置，值为原始数据值，支持 callback\n              style: {\n                lineWidth: 0, // 辅助框的边框宽度\n                fill: '#E9EDF2', // 辅助框填充的颜色\n                fillOpacity: 1, // 辅助框的背景透明度\n                stroke: '#ccc' // 辅助框的边框颜色设置\n              }\n            })\n          }\n          view\n            .interval()\n            .position('group*value')\n            .tooltip('type*value', (t, v) => {\n              return { name: t, value: v }\n            })\n            .color('type', value => {\n              return color\n            })\n            .size(24)\n            .opacity(1)\n            .label('value', val => {\n              const maxValue = this.dv.max('value')\n\n              let offset = -4\n              let textAlign = facetIndex === 1 ? 'end' : 'start'\n              let fill = 'white'\n              const shouldPutLeft = val / maxValue < 0.1\n              if (shouldPutLeft) {\n                offset = 4\n                textAlign = facetIndex === 1 ? 'start' : 'end'\n                fill = '#3E4D5C'\n              }\n\n              return {\n                offset: offset,\n                textStyle: {\n                  fill,\n                  textAlign: textAlign\n                }\n              }\n            })\n        }\n      })\n      this.chart.render()\n      this.changeData()\n    },\n    changeData() {\n      new Vue({\n        components: {\n          StHelpTooltip\n        },\n        render: h => <st-help-tooltip id=\"TBDAO001\" />\n      }).$mount('#legend-0')\n      new Vue({\n        components: {\n          StHelpTooltip\n        },\n        render: h => <st-help-tooltip id=\"TBDAO002\" />\n      }).$mount('#legend-1')\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views/biz-components/stat"}]}