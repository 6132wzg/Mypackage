{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/components/table/table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/components/table/table.vue","mtime":1598250255818},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["\nimport { merge, omit, map, forEach } from 'lodash-es'\nfunction addOddEvenKey(dataSource) {\n  for (let i in dataSource) {\n    dataSource[i].$_oddEvenKey = i % 2 ? `even-${i}` : `odd-${i}`\n    if (dataSource[i].children) {\n      for (let j in dataSource[i].children) {\n        dataSource[i].children[\n          j\n        ].$_oddEvenKey = `${dataSource[i].$_oddEvenKey}-${j}`\n      }\n      if (dataSource[i].children.length) {\n        // 实际使用$_children来显示展开图标，因为没有元素时不需要展开\n        dataSource[i].$_children = dataSource[i].children\n      }\n    }\n  }\n  return dataSource\n}\nexport default {\n  name: 'StTable',\n  props: {\n    page: {\n      type: null\n    },\n    alertSelection: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    pagination: {\n      type: null,\n      default: () => {\n        return {\n          size: 'small'\n        }\n      }\n    },\n    query: {\n      type: Object,\n      default: () => {}\n    },\n    dataSource: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    scroll: {\n      type: Object,\n      default: () => null\n    },\n    /**\n     * client | server 分页模式\n     */\n    pageMode: {\n      type: String,\n      default: 'server'\n    },\n    simplePage: {\n      type: Boolean,\n      default: false\n    },\n    stripe: {\n      type: Boolean,\n      default: true\n    },\n    // 无数据样式配置， 可以传入组件模版\n    emptyText: {\n      type: [String, Object],\n      default: ''\n    },\n    /**\n     * 需要合并行的字段集合，可以是单独的一个key，也可以是一个数组，支持传入字段格式化函数\n     * 参数示例： 'key' 或 ['key', 'key1', 'key2'] 或 [{ key: 'key', formatter: (value, record, index) => { return +value } }]\n     * 注意 启用了该字段，合并的字段就不能使用slot,更不支持事件绑定 TODO: 待扩展可自定义slot\n     */\n    rowSpanKey: {\n      type: [String, Array],\n      default: ''\n    }\n  },\n  watch: {\n    dataSource() {\n      if (this.pageMode === 'client') {\n        this.current = 1\n      }\n    }\n  },\n  data() {\n    return {\n      pageSize: 20,\n      total: 0,\n      current: 1,\n      count: 1\n    }\n  },\n  computed: {\n    // 合并行字段处理，目前仅支持合并行数据formatter，不支持自定义模版和slot字段\n    columns() {\n      return this.$attrs.columns.map(item => {\n        const rowSpanItem = this.rowSpanMap[item.dataIndex]\n        if (rowSpanItem) {\n          item.customRender = (value, row, index) => {\n            const obj = {\n              children: rowSpanItem._formatter\n                ? rowSpanItem._formatter(value, row, index)\n                : value,\n              attrs: {\n                rowSpan: 1\n              }\n            }\n            if (rowSpanItem[value] && rowSpanItem[value].length > 1) {\n              if (rowSpanItem[value].firstKey === index) {\n                obj.attrs.rowSpan = rowSpanItem[value].length\n              } else {\n                obj.attrs.rowSpan = 0\n              }\n            }\n            return obj\n          }\n        }\n        return item\n      })\n    },\n    // 合并行字段 合并信息收集\n    rowSpanMap() {\n      if (!this.rowSpanKey) return false\n      /**\n       * rowSpanMap格式 dataInex 为需要合并的字段key值，key 为该字段其中一个value值， length 为该值的重复次数， firstKey为该值第一次出现的下标\n       * {'dataIndex': { formatter, 'key': { length: 1, firstKey: index }}}\n       * 注意：数据源一定是排好的顺序 即相同数据类型一定要连在一起\n       */\n      let rowSpanMap = {}\n      const setRowSpanMap = (itemKey, { key, index, formatter }) => {\n        const rowSpanItem = rowSpanMap[itemKey] || {}\n        if (rowSpanItem[key]) {\n          rowSpanItem[key].length += 1\n        } else {\n          rowSpanItem._formatter = formatter\n          rowSpanItem[key] = { length: 1, firstKey: index }\n        }\n        rowSpanMap[itemKey] = rowSpanItem\n      }\n      // 遍历数据源，收集字段合并信息\n      this.dataSource.map((item, index) => {\n        let key = '',\n          formatter = null\n        if (typeof this.rowSpanKey === 'string') {\n          setRowSpanMap(this.rowSpanKey, { key: item[this.rowSpanKey], index })\n        } else {\n          this.rowSpanKey.map(itemKey => {\n            if (typeof itemKey === 'string') {\n              setRowSpanMap(itemKey, { key: item[itemKey], index })\n            } else {\n              setRowSpanMap(itemKey.key, {\n                key: item[itemKey.key],\n                formatter: itemKey.formatter,\n                index\n              })\n            }\n          })\n        }\n      })\n      return rowSpanMap\n    },\n    locale() {\n      return {\n        emptyText: this.emptyText || <st-no-data />\n      }\n    },\n    tableDataSource() {\n      addOddEvenKey(this.dataSource)\n      return this.dataSource\n    },\n    defaultPageSize() {\n      return this.simplePage ? 10 : 20\n    },\n    tablePagination: {\n      get() {\n        if (this.pagination === false || this.page === false) {\n          return false\n        }\n        const pageSize =\n          this.pageMode === 'client' ? this.pageSize : this.defaultPageSize\n        let _p = merge(\n          {\n            current: this.current,\n            pageSize,\n            total: this.total,\n            showTotal: function(total, range) {\n              return `共${total}条`\n            },\n            showSizeChanger: true\n          },\n          // 去除无用的pagination属性\n          omit(this.pagination, [\n            'total_counts',\n            'total_pages',\n            'current_page',\n            'size'\n          ])\n        )\n        if (this.page) {\n          if (this.page.size) {\n            _p.pageSize = +this.page.size || this.defaultPageSize\n          }\n          if (this.page.current_page) {\n            _p.current = +this.page.current_page || 1\n          }\n          if (this.page.total_counts) {\n            _p.total = +this.page.total_counts || 0\n          }\n          if (this.simplePage) {\n            _p.simple = true\n          }\n        }\n        return _p\n      }\n    }\n  },\n  methods: {\n    onCLick() {\n      this.alertSelection.onReset()\n    },\n    expand(...ret) {\n      this.$emit('expand', ...ret)\n    },\n    onChange(pagination, ...rest) {\n      if (this.pageMode === 'client') {\n        this.current = pagination.current\n        this.total = pagination.total\n        this.pageSize = pagination.pageSize\n      }\n      const query = this.query\n      this.$emit('change', { ...pagination, query }, ...rest)\n    },\n    renderChildren() {\n      return map(this.$slots, (vnode, slot) => (\n        <template slot={slot}>{vnode}</template>\n      ))\n    },\n    // 在有children的情况下显示自定义图标\n    // CustomExpandIcon(props) {\n    //   let text = ''\n    //   let className = 'st-expand-row-icon'\n    //   if (props.record.children && props.record.children.length) {\n    //     const type = props.expanded ? 'table-up' : 'table-down'\n    //     text = <st-icon type={type} />\n    //     className = 'st-expand-row-icon mg-r8'\n    //   }\n    //   return (\n    //     <span\n    //       class={className}\n    //       onClick={e => props.onExpand(props.record, e)}\n    //       style={{ cursor: 'pointer' }}\n    //     >\n    //       {text}\n    //     </span>\n    //   )\n    // },\n    rowClassName(record) {\n      if (this.stripe) {\n        return record.$_oddEvenKey\n      } else {\n        return ''\n      }\n    }\n  },\n  render(h) {\n    let props = {\n      pagination: this.tablePagination,\n      locale: this.locale,\n      dataSource: this.tableDataSource,\n      // scroll: this.tableDataSource.length >= 1 ? this.scroll : {},\n      rowClassName: this.rowClassName,\n      childrenColumnName: '$_children',\n      indentSize: 16,\n      ...this.$attrs\n    }\n    if (this.tableDataSource.length >= 1 && this.scroll) {\n      props.scroll = this.scroll\n    }\n    // 如果存在合并行则使用处理后的columns\n    if (this.rowSpanKey) {\n      props.columns = this.columns\n    }\n    // 判断是否是父子表格 先去掉 自定义图标和自定义expandedRowRender冲突\n    // props.expandIcon = this.CustomExpandIcon\n    const ce = this.alertSelection.onReset\n      ? h('div', { class: 'st-table-wapper' }, [\n          h('a-alert', {\n            class: 'st-table-alert mg-b8',\n            props: { type: 'info', showIcon: true },\n            scopedSlots: {\n              message: props =>\n                h('div', { class: 'st-table-alert__content' }, [\n                  '已选 ',\n                  h(\n                    'span',\n                    { class: 'st-table-alert__count' },\n                    this.$attrs.rowSelection.selectedRowKeys.length || 0\n                  ),\n                  ' 条数据',\n                  h(\n                    'a',\n                    {\n                      class: 'mg-l24 st-table-alert__reload',\n                      on: {\n                        click: this.onCLick\n                      }\n                    },\n                    '取消'\n                  )\n                ])\n            }\n          }),\n          h(\n            'a-table',\n            {\n              class: [\n                'st-table',\n                this.stripe ? '' : 'st-table-normal',\n                !this.tableDataSource.length && 'st-table-nodata'\n              ],\n              props,\n              on: {\n                change: this.onChange,\n                expand: this.expand\n              },\n              scopedSlots: this.$scopedSlots,\n              slot: this.$slots\n            },\n            this.renderChildren()\n          )\n        ])\n      : h(\n          'a-table',\n          {\n            class: [\n              'st-table',\n              this.stripe ? '' : 'st-table-normal',\n              !this.tableDataSource.length && 'st-table-nodata'\n            ],\n            props,\n            on: {\n              change: this.onChange,\n              expand: this.expand\n            },\n            scopedSlots: this.$scopedSlots,\n            slot: this.$slots\n          },\n          this.renderChildren()\n        )\n    return ce\n  }\n}\n",{"version":3,"sources":["table.vue"],"names":[],"mappingsfile":"table.vue","sourceRoot":"src/views/components/table","sourcesContent":["<script>\nimport { merge, omit, map, forEach } from 'lodash-es'\nfunction addOddEvenKey(dataSource) {\n  for (let i in dataSource) {\n    dataSource[i].$_oddEvenKey = i % 2 ? `even-${i}` : `odd-${i}`\n    if (dataSource[i].children) {\n      for (let j in dataSource[i].children) {\n        dataSource[i].children[\n          j\n        ].$_oddEvenKey = `${dataSource[i].$_oddEvenKey}-${j}`\n      }\n      if (dataSource[i].children.length) {\n        // 实际使用$_children来显示展开图标，因为没有元素时不需要展开\n        dataSource[i].$_children = dataSource[i].children\n      }\n    }\n  }\n  return dataSource\n}\nexport default {\n  name: 'StTable',\n  props: {\n    page: {\n      type: null\n    },\n    alertSelection: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    pagination: {\n      type: null,\n      default: () => {\n        return {\n          size: 'small'\n        }\n      }\n    },\n    query: {\n      type: Object,\n      default: () => {}\n    },\n    dataSource: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    scroll: {\n      type: Object,\n      default: () => null\n    },\n    /**\n     * client | server 分页模式\n     */\n    pageMode: {\n      type: String,\n      default: 'server'\n    },\n    simplePage: {\n      type: Boolean,\n      default: false\n    },\n    stripe: {\n      type: Boolean,\n      default: true\n    },\n    // 无数据样式配置， 可以传入组件模版\n    emptyText: {\n      type: [String, Object],\n      default: ''\n    },\n    /**\n     * 需要合并行的字段集合，可以是单独的一个key，也可以是一个数组，支持传入字段格式化函数\n     * 参数示例： 'key' 或 ['key', 'key1', 'key2'] 或 [{ key: 'key', formatter: (value, record, index) => { return +value } }]\n     * 注意 启用了该字段，合并的字段就不能使用slot,更不支持事件绑定 TODO: 待扩展可自定义slot\n     */\n    rowSpanKey: {\n      type: [String, Array],\n      default: ''\n    }\n  },\n  watch: {\n    dataSource() {\n      if (this.pageMode === 'client') {\n        this.current = 1\n      }\n    }\n  },\n  data() {\n    return {\n      pageSize: 20,\n      total: 0,\n      current: 1,\n      count: 1\n    }\n  },\n  computed: {\n    // 合并行字段处理，目前仅支持合并行数据formatter，不支持自定义模版和slot字段\n    columns() {\n      return this.$attrs.columns.map(item => {\n        const rowSpanItem = this.rowSpanMap[item.dataIndex]\n        if (rowSpanItem) {\n          item.customRender = (value, row, index) => {\n            const obj = {\n              children: rowSpanItem._formatter\n                ? rowSpanItem._formatter(value, row, index)\n                : value,\n              attrs: {\n                rowSpan: 1\n              }\n            }\n            if (rowSpanItem[value] && rowSpanItem[value].length > 1) {\n              if (rowSpanItem[value].firstKey === index) {\n                obj.attrs.rowSpan = rowSpanItem[value].length\n              } else {\n                obj.attrs.rowSpan = 0\n              }\n            }\n            return obj\n          }\n        }\n        return item\n      })\n    },\n    // 合并行字段 合并信息收集\n    rowSpanMap() {\n      if (!this.rowSpanKey) return false\n      /**\n       * rowSpanMap格式 dataInex 为需要合并的字段key值，key 为该字段其中一个value值， length 为该值的重复次数， firstKey为该值第一次出现的下标\n       * {'dataIndex': { formatter, 'key': { length: 1, firstKey: index }}}\n       * 注意：数据源一定是排好的顺序 即相同数据类型一定要连在一起\n       */\n      let rowSpanMap = {}\n      const setRowSpanMap = (itemKey, { key, index, formatter }) => {\n        const rowSpanItem = rowSpanMap[itemKey] || {}\n        if (rowSpanItem[key]) {\n          rowSpanItem[key].length += 1\n        } else {\n          rowSpanItem._formatter = formatter\n          rowSpanItem[key] = { length: 1, firstKey: index }\n        }\n        rowSpanMap[itemKey] = rowSpanItem\n      }\n      // 遍历数据源，收集字段合并信息\n      this.dataSource.map((item, index) => {\n        let key = '',\n          formatter = null\n        if (typeof this.rowSpanKey === 'string') {\n          setRowSpanMap(this.rowSpanKey, { key: item[this.rowSpanKey], index })\n        } else {\n          this.rowSpanKey.map(itemKey => {\n            if (typeof itemKey === 'string') {\n              setRowSpanMap(itemKey, { key: item[itemKey], index })\n            } else {\n              setRowSpanMap(itemKey.key, {\n                key: item[itemKey.key],\n                formatter: itemKey.formatter,\n                index\n              })\n            }\n          })\n        }\n      })\n      return rowSpanMap\n    },\n    locale() {\n      return {\n        emptyText: this.emptyText || <st-no-data />\n      }\n    },\n    tableDataSource() {\n      addOddEvenKey(this.dataSource)\n      return this.dataSource\n    },\n    defaultPageSize() {\n      return this.simplePage ? 10 : 20\n    },\n    tablePagination: {\n      get() {\n        if (this.pagination === false || this.page === false) {\n          return false\n        }\n        const pageSize =\n          this.pageMode === 'client' ? this.pageSize : this.defaultPageSize\n        let _p = merge(\n          {\n            current: this.current,\n            pageSize,\n            total: this.total,\n            showTotal: function(total, range) {\n              return `共${total}条`\n            },\n            showSizeChanger: true\n          },\n          // 去除无用的pagination属性\n          omit(this.pagination, [\n            'total_counts',\n            'total_pages',\n            'current_page',\n            'size'\n          ])\n        )\n        if (this.page) {\n          if (this.page.size) {\n            _p.pageSize = +this.page.size || this.defaultPageSize\n          }\n          if (this.page.current_page) {\n            _p.current = +this.page.current_page || 1\n          }\n          if (this.page.total_counts) {\n            _p.total = +this.page.total_counts || 0\n          }\n          if (this.simplePage) {\n            _p.simple = true\n          }\n        }\n        return _p\n      }\n    }\n  },\n  methods: {\n    onCLick() {\n      this.alertSelection.onReset()\n    },\n    expand(...ret) {\n      this.$emit('expand', ...ret)\n    },\n    onChange(pagination, ...rest) {\n      if (this.pageMode === 'client') {\n        this.current = pagination.current\n        this.total = pagination.total\n        this.pageSize = pagination.pageSize\n      }\n      const query = this.query\n      this.$emit('change', { ...pagination, query }, ...rest)\n    },\n    renderChildren() {\n      return map(this.$slots, (vnode, slot) => (\n        <template slot={slot}>{vnode}</template>\n      ))\n    },\n    // 在有children的情况下显示自定义图标\n    // CustomExpandIcon(props) {\n    //   let text = ''\n    //   let className = 'st-expand-row-icon'\n    //   if (props.record.children && props.record.children.length) {\n    //     const type = props.expanded ? 'table-up' : 'table-down'\n    //     text = <st-icon type={type} />\n    //     className = 'st-expand-row-icon mg-r8'\n    //   }\n    //   return (\n    //     <span\n    //       class={className}\n    //       onClick={e => props.onExpand(props.record, e)}\n    //       style={{ cursor: 'pointer' }}\n    //     >\n    //       {text}\n    //     </span>\n    //   )\n    // },\n    rowClassName(record) {\n      if (this.stripe) {\n        return record.$_oddEvenKey\n      } else {\n        return ''\n      }\n    }\n  },\n  render(h) {\n    let props = {\n      pagination: this.tablePagination,\n      locale: this.locale,\n      dataSource: this.tableDataSource,\n      // scroll: this.tableDataSource.length >= 1 ? this.scroll : {},\n      rowClassName: this.rowClassName,\n      childrenColumnName: '$_children',\n      indentSize: 16,\n      ...this.$attrs\n    }\n    if (this.tableDataSource.length >= 1 && this.scroll) {\n      props.scroll = this.scroll\n    }\n    // 如果存在合并行则使用处理后的columns\n    if (this.rowSpanKey) {\n      props.columns = this.columns\n    }\n    // 判断是否是父子表格 先去掉 自定义图标和自定义expandedRowRender冲突\n    // props.expandIcon = this.CustomExpandIcon\n    const ce = this.alertSelection.onReset\n      ? h('div', { class: 'st-table-wapper' }, [\n          h('a-alert', {\n            class: 'st-table-alert mg-b8',\n            props: { type: 'info', showIcon: true },\n            scopedSlots: {\n              message: props =>\n                h('div', { class: 'st-table-alert__content' }, [\n                  '已选 ',\n                  h(\n                    'span',\n                    { class: 'st-table-alert__count' },\n                    this.$attrs.rowSelection.selectedRowKeys.length || 0\n                  ),\n                  ' 条数据',\n                  h(\n                    'a',\n                    {\n                      class: 'mg-l24 st-table-alert__reload',\n                      on: {\n                        click: this.onCLick\n                      }\n                    },\n                    '取消'\n                  )\n                ])\n            }\n          }),\n          h(\n            'a-table',\n            {\n              class: [\n                'st-table',\n                this.stripe ? '' : 'st-table-normal',\n                !this.tableDataSource.length && 'st-table-nodata'\n              ],\n              props,\n              on: {\n                change: this.onChange,\n                expand: this.expand\n              },\n              scopedSlots: this.$scopedSlots,\n              slot: this.$slots\n            },\n            this.renderChildren()\n          )\n        ])\n      : h(\n          'a-table',\n          {\n            class: [\n              'st-table',\n              this.stripe ? '' : 'st-table-normal',\n              !this.tableDataSource.length && 'st-table-nodata'\n            ],\n            props,\n            on: {\n              change: this.onChange,\n              expand: this.expand\n            },\n            scopedSlots: this.$scopedSlots,\n            slot: this.$slots\n          },\n          this.renderChildren()\n        )\n    return ce\n  }\n}\n</script>\n"]}]}