{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/account/modify.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/account/modify.vue","mtime":1591147717129},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { ModifyService } from './modify.service'\nimport { ruleOptions } from './modify.config'\nimport { PatternService } from '@/services/pattern.service'\nimport { NoCaptchaService } from '@/services/no-captcha.service'\nimport InputPhoneCode from '@/views/biz-components/input-phone-code/input-phone-code'\nimport { MessageService } from '@/services/message.service'\nimport { cloneDeep } from 'lodash-es'\nimport NoCaptcha from '@/views/biz-components/no-captcha'\nimport AccountBind from '@/views/biz-modals/account/bind'\nimport InputPwdStrength from '@/views/biz-components/input-pwd-strength/input-pwd-strength'\n\nexport default {\n  bem: {\n    b: 'account-modify'\n  },\n  serviceInject() {\n    return {\n      modifyService: ModifyService,\n      messageService: MessageService,\n      noCaptchaService: NoCaptchaService,\n      pattern: PatternService\n    }\n  },\n  rxState() {\n    return {\n      info: this.modifyService.info$,\n      loading: this.modifyService.loading$\n    }\n  },\n  components: {\n    NoCaptcha,\n    InputPhoneCode,\n    InputPwdStrength\n  },\n  modals: {\n    AccountBind\n  },\n  computed: {\n    isBind() {\n      return !this.info.account_phone_encrypt\n    }\n  },\n  mounted() {\n    this.modifyService.getUserInfo().subscribe()\n  },\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      form,\n      decorators,\n      show: false,\n      isCountTime: false,\n      isShowFooter: false,\n      isShowTel: false,\n      isShowPass: false,\n      isShowSuccess: false,\n      validStatus: 0\n    }\n  },\n  methods: {\n    goBind() {\n      this.show = false\n      this.$modalRouter.push({\n        name: 'account-bind',\n        props: {},\n        on: {}\n      })\n    },\n    checkPass() {\n      this.isShowFooter = true\n      this.isShowPass = true\n    },\n    checkTel() {\n      this.isShowFooter = true\n      this.isShowTel = true\n    },\n    goTelNext() {\n      this.form.validate(['captcha']).then(values => {\n        this.modifyService\n          .checkCaptcha({ captcha: values.captcha })\n          .subscribe(res => {\n            this.isShowTel = false\n          })\n      })\n    },\n    goPassNext() {\n      this.form.validate(['password']).then(values => {\n        this.modifyService\n          .checkAccount({ pwd: values.password })\n          .subscribe(res => {\n            this.isShowPass = false\n          })\n      })\n    },\n    onClickCaptcha() {\n      const params = {\n        phone: this.info.account_phone,\n        country_code_id: this.info.country_code_id\n      }\n      this.getCaptcha(params)\n    },\n    getCaptcha(params) {\n      const nvc_val = this.noCaptchaService.generateNVCVal()\n      if (!nvc_val) {\n        return\n      }\n      params.nvc_val = nvc_val\n      this.modifyService.getCaptcha(params).subscribe(res => {\n        this.noCaptchaService.resetNVC()\n        this.isCountTime = true\n      }, this.errorHandler)\n    },\n    errorHandler(err) {\n      const code = err.response.code\n      if (this.noCaptchaService.testIsNeedCallCaptcha(code)) {\n        this.noCaptchaService.callCaptcha(code)\n        return\n      }\n      this.noCaptchaService.resetNVC()\n    },\n    resetPass() {\n      this.form.validate(['pwd', 'repwd']).then(values => {\n        let para = {\n          pwd: values.pwd,\n          repwd: values.repwd\n        }\n        this.modifyService.resetPass(para).subscribe(res => {\n          this.isShowFooter = false\n          this.isShowSuccess = true\n        })\n      })\n    },\n    endCount() {\n      this.isCountTime = false\n    },\n    goLogin() {\n      location.href = location.origin + '/account/login'\n    }\n  }\n}\n",null]}