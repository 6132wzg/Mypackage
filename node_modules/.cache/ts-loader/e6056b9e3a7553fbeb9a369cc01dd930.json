{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js??ref--13-3!/Users/wangzhigang/Desktop/styd/web/src/utils/list-to-tree.ts","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/utils/list-to-tree.ts","mtime":1591147717093},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js","mtime":1591062571609}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport { forEach } from 'lodash-es';\n/**\n * 将数组列表转换为树列表\n * @param { Array<Object> } list\n * @param { stirng } keyField 指定键名字段\n * @param { stirng } parentField 指定父级字段\n * @param { stirng } childrenField 指定孩子节点字段\n * @return {Array}\n * @example\n *\n * const arr = [{id:1,name:'a', parent_id:'0'},{id:2,name:'b',parent_id:1},{id:3,name:'c,parent_id:2}]\n * listToTree(arr) =>\n * [{\n *    id:1,\n *    name:'a',\n *    children:[\n *      {\n *          id:2,\n *          name:'b',\n *          children:[{id:3,name:\"c\"}]\n *      }\n *    ]\n * }]\n *\n */\n\nexport var listToTree = function listToTree(list) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$keyField = _ref.keyField,\n      keyField = _ref$keyField === void 0 ? 'id' : _ref$keyField,\n      _ref$parentField = _ref.parentField,\n      parentField = _ref$parentField === void 0 ? 'parent_id' : _ref$parentField,\n      _ref$childrenField = _ref.childrenField,\n      childrenField = _ref$childrenField === void 0 ? 'children' : _ref$childrenField,\n      _ref$isLeafField = _ref.isLeafField,\n      isLeafField = _ref$isLeafField === void 0 ? 'isLeaf' : _ref$isLeafField,\n      _ref$isParentField = _ref.isParentField,\n      isParentField = _ref$isParentField === void 0 ? 'isParent' : _ref$isParentField;\n\n  var map = listToMap(list, {\n    keyField: keyField\n  });\n  var tree = [];\n  forEach(list, function (item) {\n    // parentId\n    var parentId = item[parentField];\n    item[isLeafField] = true;\n    item.key = item.id;\n    item.title = item.name;\n    item.scopedSlots = {\n      title: 'title'\n    }; // 自己是子节点时\n\n    if (parentId && map[parentId]) {\n      var parent = map[parentId];\n      parent[childrenField] = parent[childrenField] || []; // 当父级不存在该子节点时\n\n      if (parent[childrenField].indexOf(item) === -1) {\n        parent[childrenField].push(item);\n        parent[isLeafField] = false;\n        parent[isParentField] = true;\n      } // 自己是根节点时\n\n    } else {\n      tree.push(item);\n    }\n  });\n  return tree;\n};\nexport var listToMap = function listToMap() {\n  var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$keyField = _ref2.keyField,\n      keyField = _ref2$keyField === void 0 ? 'id' : _ref2$keyField;\n\n  var map = {};\n  forEach(list, function (item) {\n    map[item[keyField]] = item;\n  });\n  return map;\n};",null]}