{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/components/table/table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/components/table/table.vue","mtime":1598250255818},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { merge, omit, map, forEach } from 'lodash-es';\n\nfunction addOddEvenKey(dataSource) {\n  for (var i in dataSource) {\n    dataSource[i].$_oddEvenKey = i % 2 ? \"even-\".concat(i) : \"odd-\".concat(i);\n\n    if (dataSource[i].children) {\n      for (var j in dataSource[i].children) {\n        dataSource[i].children[j].$_oddEvenKey = \"\".concat(dataSource[i].$_oddEvenKey, \"-\").concat(j);\n      }\n\n      if (dataSource[i].children.length) {\n        // 实际使用$_children来显示展开图标，因为没有元素时不需要展开\n        dataSource[i].$_children = dataSource[i].children;\n      }\n    }\n  }\n\n  return dataSource;\n}\n\nexport default {\n  name: 'StTable',\n  props: {\n    page: {\n      type: null\n    },\n    alertSelection: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    pagination: {\n      type: null,\n      default: function _default() {\n        return {\n          size: 'small'\n        };\n      }\n    },\n    query: {\n      type: Object,\n      default: function _default() {}\n    },\n    dataSource: {\n      type: Array,\n      required: true,\n      default: function _default() {\n        return [];\n      }\n    },\n    scroll: {\n      type: Object,\n      default: function _default() {\n        return null;\n      }\n    },\n\n    /**\n     * client | server 分页模式\n     */\n    pageMode: {\n      type: String,\n      default: 'server'\n    },\n    simplePage: {\n      type: Boolean,\n      default: false\n    },\n    stripe: {\n      type: Boolean,\n      default: true\n    },\n    // 无数据样式配置， 可以传入组件模版\n    emptyText: {\n      type: [String, Object],\n      default: ''\n    },\n\n    /**\n     * 需要合并行的字段集合，可以是单独的一个key，也可以是一个数组，支持传入字段格式化函数\n     * 参数示例： 'key' 或 ['key', 'key1', 'key2'] 或 [{ key: 'key', formatter: (value, record, index) => { return +value } }]\n     * 注意 启用了该字段，合并的字段就不能使用slot,更不支持事件绑定 TODO: 待扩展可自定义slot\n     */\n    rowSpanKey: {\n      type: [String, Array],\n      default: ''\n    }\n  },\n  watch: {\n    dataSource: function dataSource() {\n      if (this.pageMode === 'client') {\n        this.current = 1;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      pageSize: 20,\n      total: 0,\n      current: 1,\n      count: 1\n    };\n  },\n  computed: {\n    // 合并行字段处理，目前仅支持合并行数据formatter，不支持自定义模版和slot字段\n    columns: function columns() {\n      var _this = this;\n\n      return this.$attrs.columns.map(function (item) {\n        var rowSpanItem = _this.rowSpanMap[item.dataIndex];\n\n        if (rowSpanItem) {\n          item.customRender = function (value, row, index) {\n            var obj = {\n              children: rowSpanItem._formatter ? rowSpanItem._formatter(value, row, index) : value,\n              attrs: {\n                rowSpan: 1\n              }\n            };\n\n            if (rowSpanItem[value] && rowSpanItem[value].length > 1) {\n              if (rowSpanItem[value].firstKey === index) {\n                obj.attrs.rowSpan = rowSpanItem[value].length;\n              } else {\n                obj.attrs.rowSpan = 0;\n              }\n            }\n\n            return obj;\n          };\n        }\n\n        return item;\n      });\n    },\n    // 合并行字段 合并信息收集\n    rowSpanMap: function rowSpanMap() {\n      var _this2 = this;\n\n      if (!this.rowSpanKey) return false;\n      /**\n       * rowSpanMap格式 dataInex 为需要合并的字段key值，key 为该字段其中一个value值， length 为该值的重复次数， firstKey为该值第一次出现的下标\n       * {'dataIndex': { formatter, 'key': { length: 1, firstKey: index }}}\n       * 注意：数据源一定是排好的顺序 即相同数据类型一定要连在一起\n       */\n\n      var rowSpanMap = {};\n\n      var setRowSpanMap = function setRowSpanMap(itemKey, _ref) {\n        var key = _ref.key,\n            index = _ref.index,\n            formatter = _ref.formatter;\n        var rowSpanItem = rowSpanMap[itemKey] || {};\n\n        if (rowSpanItem[key]) {\n          rowSpanItem[key].length += 1;\n        } else {\n          rowSpanItem._formatter = formatter;\n          rowSpanItem[key] = {\n            length: 1,\n            firstKey: index\n          };\n        }\n\n        rowSpanMap[itemKey] = rowSpanItem;\n      }; // 遍历数据源，收集字段合并信息\n\n\n      this.dataSource.map(function (item, index) {\n        var key = '',\n            formatter = null;\n\n        if (typeof _this2.rowSpanKey === 'string') {\n          setRowSpanMap(_this2.rowSpanKey, {\n            key: item[_this2.rowSpanKey],\n            index: index\n          });\n        } else {\n          _this2.rowSpanKey.map(function (itemKey) {\n            if (typeof itemKey === 'string') {\n              setRowSpanMap(itemKey, {\n                key: item[itemKey],\n                index: index\n              });\n            } else {\n              setRowSpanMap(itemKey.key, {\n                key: item[itemKey.key],\n                formatter: itemKey.formatter,\n                index: index\n              });\n            }\n          });\n        }\n      });\n      return rowSpanMap;\n    },\n    locale: function locale() {\n      var h = this.$createElement;\n      return {\n        emptyText: this.emptyText || h(\"st-no-data\")\n      };\n    },\n    tableDataSource: function tableDataSource() {\n      addOddEvenKey(this.dataSource);\n      return this.dataSource;\n    },\n    defaultPageSize: function defaultPageSize() {\n      return this.simplePage ? 10 : 20;\n    },\n    tablePagination: {\n      get: function get() {\n        if (this.pagination === false || this.page === false) {\n          return false;\n        }\n\n        var pageSize = this.pageMode === 'client' ? this.pageSize : this.defaultPageSize;\n\n        var _p = merge({\n          current: this.current,\n          pageSize: pageSize,\n          total: this.total,\n          showTotal: function showTotal(total, range) {\n            return \"\\u5171\".concat(total, \"\\u6761\");\n          },\n          showSizeChanger: true\n        }, // 去除无用的pagination属性\n        omit(this.pagination, ['total_counts', 'total_pages', 'current_page', 'size']));\n\n        if (this.page) {\n          if (this.page.size) {\n            _p.pageSize = +this.page.size || this.defaultPageSize;\n          }\n\n          if (this.page.current_page) {\n            _p.current = +this.page.current_page || 1;\n          }\n\n          if (this.page.total_counts) {\n            _p.total = +this.page.total_counts || 0;\n          }\n\n          if (this.simplePage) {\n            _p.simple = true;\n          }\n        }\n\n        return _p;\n      }\n    }\n  },\n  methods: {\n    onCLick: function onCLick() {\n      this.alertSelection.onReset();\n    },\n    expand: function expand() {\n      for (var _len = arguments.length, ret = new Array(_len), _key = 0; _key < _len; _key++) {\n        ret[_key] = arguments[_key];\n      }\n\n      this.$emit.apply(this, ['expand'].concat(ret));\n    },\n    onChange: function onChange(pagination) {\n      if (this.pageMode === 'client') {\n        this.current = pagination.current;\n        this.total = pagination.total;\n        this.pageSize = pagination.pageSize;\n      }\n\n      var query = this.query;\n\n      for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        rest[_key2 - 1] = arguments[_key2];\n      }\n\n      this.$emit.apply(this, ['change', _objectSpread({}, pagination, {\n        query: query\n      })].concat(rest));\n    },\n    renderChildren: function renderChildren() {\n      var h = this.$createElement;\n      return map(this.$slots, function (vnode, slot) {\n        return h(\"template\", {\n          \"slot\": slot\n        }, [vnode]);\n      });\n    },\n    // 在有children的情况下显示自定义图标\n    // CustomExpandIcon(props) {\n    //   let text = ''\n    //   let className = 'st-expand-row-icon'\n    //   if (props.record.children && props.record.children.length) {\n    //     const type = props.expanded ? 'table-up' : 'table-down'\n    //     text = <st-icon type={type} />\n    //     className = 'st-expand-row-icon mg-r8'\n    //   }\n    //   return (\n    //     <span\n    //       class={className}\n    //       onClick={e => props.onExpand(props.record, e)}\n    //       style={{ cursor: 'pointer' }}\n    //     >\n    //       {text}\n    //     </span>\n    //   )\n    // },\n    rowClassName: function rowClassName(record) {\n      if (this.stripe) {\n        return record.$_oddEvenKey;\n      } else {\n        return '';\n      }\n    }\n  },\n  render: function render(h) {\n    var _this3 = this;\n\n    var props = _objectSpread({\n      pagination: this.tablePagination,\n      locale: this.locale,\n      dataSource: this.tableDataSource,\n      // scroll: this.tableDataSource.length >= 1 ? this.scroll : {},\n      rowClassName: this.rowClassName,\n      childrenColumnName: '$_children',\n      indentSize: 16\n    }, this.$attrs);\n\n    if (this.tableDataSource.length >= 1 && this.scroll) {\n      props.scroll = this.scroll;\n    } // 如果存在合并行则使用处理后的columns\n\n\n    if (this.rowSpanKey) {\n      props.columns = this.columns;\n    } // 判断是否是父子表格 先去掉 自定义图标和自定义expandedRowRender冲突\n    // props.expandIcon = this.CustomExpandIcon\n\n\n    var ce = this.alertSelection.onReset ? h('div', {\n      class: 'st-table-wapper'\n    }, [h('a-alert', {\n      class: 'st-table-alert mg-b8',\n      props: {\n        type: 'info',\n        showIcon: true\n      },\n      scopedSlots: {\n        message: function message(props) {\n          return h('div', {\n            class: 'st-table-alert__content'\n          }, ['已选 ', h('span', {\n            class: 'st-table-alert__count'\n          }, _this3.$attrs.rowSelection.selectedRowKeys.length || 0), ' 条数据', h('a', {\n            class: 'mg-l24 st-table-alert__reload',\n            on: {\n              click: _this3.onCLick\n            }\n          }, '取消')]);\n        }\n      }\n    }), h('a-table', {\n      class: ['st-table', this.stripe ? '' : 'st-table-normal', !this.tableDataSource.length && 'st-table-nodata'],\n      props: props,\n      on: {\n        change: this.onChange,\n        expand: this.expand\n      },\n      scopedSlots: this.$scopedSlots,\n      slot: this.$slots\n    }, this.renderChildren())]) : h('a-table', {\n      class: ['st-table', this.stripe ? '' : 'st-table-normal', !this.tableDataSource.length && 'st-table-nodata'],\n      props: props,\n      on: {\n        change: this.onChange,\n        expand: this.expand\n      },\n      scopedSlots: this.$scopedSlots,\n      slot: this.$slots\n    }, this.renderChildren());\n    return ce;\n  }\n};",null]}