{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/layouts/default#/sider-menu.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/layouts/default#/sider-menu.vue","mtime":1600926556072},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { UserService } from '@/services/user.service'\nimport { treeToMap } from '@/utils/tree-to-map'\nimport { find, remove, constant } from 'lodash-es'\nimport { walkTree } from '@/utils/walk-tree'\nimport { extraMenuPatterns } from './sider-menu.config'\nexport default {\n  name: 'DefaultBrandSiderMenu',\n  serviceInject() {\n    return {\n      userService: UserService\n    }\n  },\n  rxState() {\n    return {\n      menuData: this.userService.menuData$\n    }\n  },\n  data() {\n    return {\n      openKeys: []\n    }\n  },\n  computed: {\n    extraMenuPatterns,\n    menus() {\n      return this.menuData.menus || []\n    },\n    favorite() {\n      return this.menuData.favorite || []\n    },\n    menuMap() {\n      return treeToMap(this.menus)\n    },\n    rootSubmenuKeys() {\n      return this.getRootSubmenuKeys()\n    },\n    currentSiderMenu() {\n      return this.findCurrentSiderMenu()\n    },\n    selectedKeys() {\n      const selectedKey = this.findSelectedKey(this.currentSiderMenu)\n      this.$emit('change', {\n        selectedKey,\n        currentSiderMenu: this.currentSiderMenu,\n        menus: this.menus\n      })\n      return selectedKey ? [selectedKey] : []\n    }\n  },\n  watch: {\n    selectedKeys() {\n      this.setOpenKeys()\n    }\n  },\n  created() {\n    this.init()\n  },\n  methods: {\n    init() {\n      this.setOpenKeys()\n    },\n    isHasSubmenu(menu) {\n      return menu.children && menu.children.length\n    },\n    onOpenChange(openKeys) {\n      const latestOpenKey = openKeys.find(\n        key => this.openKeys.indexOf(key) === -1\n      )\n      if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n        this.openKeys = openKeys\n      } else {\n        this.openKeys = latestOpenKey ? [latestOpenKey] : []\n      }\n    },\n    findCurrentSiderMenu() {\n      let currentSiderMenu\n      let currentSiderMenuId\n      const { extraMenuPatterns } = this\n      walkTree(this.menuData.menus, menu => {\n        /**\n         * 一般情况根据 route name 匹配\n         * 特殊情况根据 pattern name 匹配，比如应用中心\n         */\n        const $routeName = this.$route.name\n        let patternName = $routeName\n        Object.keys(extraMenuPatterns.main).forEach(key => {\n          if (extraMenuPatterns.main[key].test($routeName)) {\n            patternName = key\n          }\n        })\n        if (menu.url && patternName.startsWith(menu.url)) {\n          if (menu.parent_id === 0) {\n            currentSiderMenuId = menu.id\n          } else {\n            currentSiderMenuId = menu.parent_id\n          }\n        }\n      })\n      this.menus.forEach(menu => {\n        if (currentSiderMenuId === menu.id) {\n          currentSiderMenu = menu\n        }\n      })\n      return currentSiderMenu || {}\n    },\n    findSelectedKey() {\n      let selectedKey\n      const $routeName = this.$route.name\n      let patternName = $routeName\n      const { extraMenuPatterns } = this\n      ;(this.currentSiderMenu.children || []).forEach(item => {\n        Object.keys(extraMenuPatterns.sub).forEach(key => {\n          if (extraMenuPatterns.sub[key].test($routeName)) {\n            patternName = key\n          }\n        })\n        if (item.url && patternName.startsWith(item.url)) {\n          selectedKey = item.id\n        }\n      })\n      return selectedKey\n    },\n    setOpenKeys() {\n      const openKey = this.currentSiderMenu.id\n      this.openKeys = openKey ? [openKey] : []\n    },\n    setSelectedKeys() {\n      const selectedKey = this.findSelectedKey(this.currentSiderMenu)\n      this.selectedKeys = selectedKey ? [selectedKey] : []\n    },\n    onClickMenuItem(menu) {\n      const { resolved } = this.$router.resolve({\n        name: menu.url\n      })\n      if (!resolved.matched.length) {\n        location.href = '/404'\n      } else {\n        this.$router.push({\n          name: menu.url\n        })\n      }\n    },\n    addFavorite(id, subMenu) {\n      this.userService.addFavorite(id).subscribe(() => {\n        const findMenu = find(this.menuData.favorite, item => {\n          return item.id === id\n        })\n        if (!findMenu) {\n          this.menuData.favorite.push(subMenu)\n        }\n      })\n    },\n    delFavorite(id) {\n      const { favorite } = this.menuData\n      remove(favorite, item => {\n        return item.id === id\n      })\n      this.userService.delFavorite(id).subscribe(() => {\n        this.menuData.favorite = [...favorite]\n      })\n    },\n    getRootSubmenuKeys() {\n      const { menus } = this\n      const rootSubmenuKeys = []\n      menus.forEach(item => {\n        rootSubmenuKeys.push(item.id)\n      })\n      return rootSubmenuKeys\n    },\n    isfavorite(id) {\n      return find(this.favorite, { id })\n    }\n  }\n}\n",{"version":3,"sources":["sider-menu.vue"],"names":[],"mappingsfile":"sider-menu.vue","sourceRoot":"src/views/layouts/default#","sourcesContent":["<template>\n  <div class=\"layout-default-sider__both\">\n    <div v-if=\"favorite.length\" class=\"layout-default-sider__often\">\n      <h2 class=\"layout-default-sider__often-title\">常用</h2>\n      <ul class=\"layout-default-sider__often-list\">\n        <li\n          v-for=\"(item, index) in favorite\"\n          :key=\"index\"\n          class=\"layout-default-sider__often-item\"\n        >\n          <st-icon type=\"star\" @click.native=\"delFavorite(item.id)\" />\n          <router-link\n            :to=\"{ name: item.url }\"\n            class=\"layout-default-sider__favorite-title\"\n          >\n            {{ item.name }}\n          </router-link>\n        </li>\n      </ul>\n    </div>\n    <a-menu\n      class=\"layout-default-sider__menu\"\n      :openKeys=\"openKeys\"\n      :selectedKeys=\"selectedKeys\"\n      @openChange=\"onOpenChange\"\n      mode=\"inline\"\n    >\n      <template v-for=\"menu in menus\">\n        <a-sub-menu\n          v-if=\"isHasSubmenu(menu)\"\n          :key=\"menu.id\"\n          class=\"layout-default-sider__submenu\"\n        >\n          <span slot=\"title\">\n            <st-icon :type=\"menu.icon\" />\n            <span>{{ menu.name }}</span>\n            <st-icon\n              class=\"layout-default-sider__menu-arrow open\"\n              type=\"add\"\n              size=\"8px\"\n            />\n            <st-icon\n              class=\"layout-default-sider__menu-arrow fold-up\"\n              type=\"minus\"\n              size=\"8px\"\n            />\n          </span>\n          <a-menu-item\n            v-for=\"subMenu in menu.children\"\n            :key=\"subMenu.id\"\n            class=\"layout-default-sider__menu-item sub\"\n          >\n            <st-icon\n              v-if=\"isfavorite(subMenu.id)\"\n              type=\"star\"\n              size=\"8px\"\n              class=\"layout-default-sider__menu-star active\"\n              @click.native=\"delFavorite(subMenu.id)\"\n            />\n            <st-icon\n              v-else\n              type=\"star-line\"\n              size=\"8px\"\n              class=\"layout-default-sider__menu-star\"\n              @click.native=\"addFavorite(subMenu.id, subMenu)\"\n            />\n            <span\n              @click=\"onClickMenuItem(subMenu)\"\n              class=\"layout-default-sider__menu-title\"\n            >\n              {{ subMenu.name }}\n            </span>\n          </a-menu-item>\n        </a-sub-menu>\n        <a-menu-item\n          v-else\n          :class=\"{\n            'st-menu-item-selected': menu.id === currentSiderMenu.id\n          }\"\n          class=\"ant-menu-item__only-one\"\n          :key=\"menu.id\"\n        >\n          <router-link :to=\"{ name: menu.url }\">\n            <st-icon :type=\"menu.icon\" />\n            <span>{{ menu.name }}</span>\n          </router-link>\n        </a-menu-item>\n      </template>\n    </a-menu>\n  </div>\n</template>\n<script>\nimport { UserService } from '@/services/user.service'\nimport { treeToMap } from '@/utils/tree-to-map'\nimport { find, remove, constant } from 'lodash-es'\nimport { walkTree } from '@/utils/walk-tree'\nimport { extraMenuPatterns } from './sider-menu.config'\nexport default {\n  name: 'DefaultBrandSiderMenu',\n  serviceInject() {\n    return {\n      userService: UserService\n    }\n  },\n  rxState() {\n    return {\n      menuData: this.userService.menuData$\n    }\n  },\n  data() {\n    return {\n      openKeys: []\n    }\n  },\n  computed: {\n    extraMenuPatterns,\n    menus() {\n      return this.menuData.menus || []\n    },\n    favorite() {\n      return this.menuData.favorite || []\n    },\n    menuMap() {\n      return treeToMap(this.menus)\n    },\n    rootSubmenuKeys() {\n      return this.getRootSubmenuKeys()\n    },\n    currentSiderMenu() {\n      return this.findCurrentSiderMenu()\n    },\n    selectedKeys() {\n      const selectedKey = this.findSelectedKey(this.currentSiderMenu)\n      this.$emit('change', {\n        selectedKey,\n        currentSiderMenu: this.currentSiderMenu,\n        menus: this.menus\n      })\n      return selectedKey ? [selectedKey] : []\n    }\n  },\n  watch: {\n    selectedKeys() {\n      this.setOpenKeys()\n    }\n  },\n  created() {\n    this.init()\n  },\n  methods: {\n    init() {\n      this.setOpenKeys()\n    },\n    isHasSubmenu(menu) {\n      return menu.children && menu.children.length\n    },\n    onOpenChange(openKeys) {\n      const latestOpenKey = openKeys.find(\n        key => this.openKeys.indexOf(key) === -1\n      )\n      if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n        this.openKeys = openKeys\n      } else {\n        this.openKeys = latestOpenKey ? [latestOpenKey] : []\n      }\n    },\n    findCurrentSiderMenu() {\n      let currentSiderMenu\n      let currentSiderMenuId\n      const { extraMenuPatterns } = this\n      walkTree(this.menuData.menus, menu => {\n        /**\n         * 一般情况根据 route name 匹配\n         * 特殊情况根据 pattern name 匹配，比如应用中心\n         */\n        const $routeName = this.$route.name\n        let patternName = $routeName\n        Object.keys(extraMenuPatterns.main).forEach(key => {\n          if (extraMenuPatterns.main[key].test($routeName)) {\n            patternName = key\n          }\n        })\n        if (menu.url && patternName.startsWith(menu.url)) {\n          if (menu.parent_id === 0) {\n            currentSiderMenuId = menu.id\n          } else {\n            currentSiderMenuId = menu.parent_id\n          }\n        }\n      })\n      this.menus.forEach(menu => {\n        if (currentSiderMenuId === menu.id) {\n          currentSiderMenu = menu\n        }\n      })\n      return currentSiderMenu || {}\n    },\n    findSelectedKey() {\n      let selectedKey\n      const $routeName = this.$route.name\n      let patternName = $routeName\n      const { extraMenuPatterns } = this\n      ;(this.currentSiderMenu.children || []).forEach(item => {\n        Object.keys(extraMenuPatterns.sub).forEach(key => {\n          if (extraMenuPatterns.sub[key].test($routeName)) {\n            patternName = key\n          }\n        })\n        if (item.url && patternName.startsWith(item.url)) {\n          selectedKey = item.id\n        }\n      })\n      return selectedKey\n    },\n    setOpenKeys() {\n      const openKey = this.currentSiderMenu.id\n      this.openKeys = openKey ? [openKey] : []\n    },\n    setSelectedKeys() {\n      const selectedKey = this.findSelectedKey(this.currentSiderMenu)\n      this.selectedKeys = selectedKey ? [selectedKey] : []\n    },\n    onClickMenuItem(menu) {\n      const { resolved } = this.$router.resolve({\n        name: menu.url\n      })\n      if (!resolved.matched.length) {\n        location.href = '/404'\n      } else {\n        this.$router.push({\n          name: menu.url\n        })\n      }\n    },\n    addFavorite(id, subMenu) {\n      this.userService.addFavorite(id).subscribe(() => {\n        const findMenu = find(this.menuData.favorite, item => {\n          return item.id === id\n        })\n        if (!findMenu) {\n          this.menuData.favorite.push(subMenu)\n        }\n      })\n    },\n    delFavorite(id) {\n      const { favorite } = this.menuData\n      remove(favorite, item => {\n        return item.id === id\n      })\n      this.userService.delFavorite(id).subscribe(() => {\n        this.menuData.favorite = [...favorite]\n      })\n    },\n    getRootSubmenuKeys() {\n      const { menus } = this\n      const rootSubmenuKeys = []\n      menus.forEach(item => {\n        rootSubmenuKeys.push(item.id)\n      })\n      return rootSubmenuKeys\n    },\n    isfavorite(id) {\n      return find(this.favorite, { id })\n    }\n  }\n}\n</script>\n"]}]}