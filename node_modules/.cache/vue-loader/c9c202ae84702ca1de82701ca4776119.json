{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/st/total/total.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/st/total/total.vue","mtime":1598250255723},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { swiper, swiperSlide } from 'vue-awesome-swiper'\nimport StTotalItem from './total-item.vue'\nimport 'swiper/dist/css/swiper.css'\nimport moment from 'moment'\nexport default {\n  name: 'StTotal',\n  bem: {\n    b: 'st-total'\n  },\n  components: {\n    swiper,\n    swiperSlide,\n    StTotalItem\n  },\n  props: {\n    indexs: {\n      type: Array,\n      default: () => []\n    },\n    dataSource: {\n      type: Object,\n      default: () => {}\n    },\n    hasTitle: {\n      type: Boolean,\n      default: false\n    },\n    options: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      show: true,\n      dWidth: 0\n    }\n  },\n  mounted() {\n    this.getDiffWidth()\n  },\n  methods: {\n    // 计算页面宽度 与 组件内容容器宽度的差值\n    getDiffWidth() {\n      const pageWidth = document.body.clientWidth\n      const contentWidth = this.$refs.content.offsetWidth\n      this.dWidth += pageWidth > contentWidth ? pageWidth - contentWidth : 0\n      // console.log(pageWidth, contentWidth)\n      // 差值改变需要重新计算 breakponts 和 slidesPerView, 使用v-if 达到刷新 swiper的 options\n      this.show = false\n      if (!this.show) {\n        setTimeout(() => {\n          this.show = true\n        }, 50)\n      }\n    },\n    // 计算字符串宽度宽度\n    getTextWidth(str, fontSize) {\n      let result = 100\n      let ele = document.createElement('span')\n      ele.innerText = str\n      ele.setAttribute(\n        'style',\n        `position: absolute; font-size: ${fontSize}px; opacity: 0`\n      )\n      document.documentElement.append(ele)\n      if (ele && ele.offsetWidth) result = ele.offsetWidth\n      document.documentElement.removeChild(ele)\n      // 加上 item 的padding宽度\n      return result + 20\n    }\n  },\n  watch: {\n    dataSource: {\n      deep: true,\n      handler() {\n        this.show = false\n        if (!this.show) {\n          setTimeout(() => {\n            this.show = true\n          }, 50)\n        }\n      }\n    }\n  },\n  computed: {\n    showData() {\n      let templateData = []\n      // for (let item in this.dataSource) {\n\n      // }\n      this.indexs.forEach(ele => {\n        templateData.push({\n          label: ele.titleTotal || ele.title,\n          value: this.dataSource[ele.dataIndex],\n          unit: ele.unit || '',\n          slotName: ele.scopedSlots ? ele.scopedSlots.customRender : ''\n        })\n      })\n      return templateData\n    },\n    itemMaxWidth() {\n      let maxWidth = 100\n      // 计算所有 item 长度 取最大值\n      this.indexs.map(item => {\n        let titleW = this.getTextWidth(item.titleTotal || item.title, 14)\n        let value = +this.dataSource[item.dataIndex] || 0\n        value = value.toString().includes('.') ? value.toFixed(1) : value\n        let valueW = this.getTextWidth(\n          (item.unit || '') + value,\n          this.hasTitle ? 20 : 24\n        )\n        // console.log(\n        //   item.titleTotal || item.title,\n        //   titleW,\n        //   '¥' + (this.dataSource[item.dataIndex] || 0),\n        //   valueW\n        // )\n        maxWidth = Math.max(titleW, valueW, maxWidth)\n      })\n      // console.log('最大值', maxWidth)\n      return maxWidth\n    },\n    slidesPerView() {\n      return Math.floor((1920 - this.dWidth) / this.itemMaxWidth)\n    },\n    // 设置不懂屏幕宽度下 可容纳item的最大数量\n    breakpoints() {\n      let w = 1200\n      let minSize = Math.floor((w - this.dWidth) / this.itemMaxWidth)\n      w = minSize * this.itemMaxWidth + this.dWidth\n      let breakpointsArr = [w]\n      while (w < 1920) {\n        w += this.itemMaxWidth\n        breakpointsArr.push(w)\n      }\n      const breakpoints = {}\n      breakpointsArr.map((item, index) => {\n        let num = Math.floor((item - this.dWidth) / this.itemMaxWidth)\n        breakpoints[item] = {\n          slidesPerView: num - (index === 0 ? 0 : 1)\n        }\n      })\n      // console.log('屏幕宽度 - 内容宽度', this.dWidth)\n      // console.log('变更节点配置', breakpoints)\n      return breakpoints\n    },\n    // 获取最小宽度下可排放的item数量\n    minSlideLen() {\n      let w = 1280\n      let minSize = Math.floor((w - this.dWidth) / this.itemMaxWidth)\n      w = minSize * this.itemMaxWidth + this.dWidth\n      return this.breakpoints[w].slidesPerView\n    },\n    timestamp() {\n      return moment().valueOf()\n    },\n    prevClass() {\n      return `swiper-${this.timestamp}-button-prev`\n    },\n    nextClass() {\n      return `swiper-${this.timestamp}-button-next`\n    },\n    navigationButtons() {\n      return {\n        nextEl: `.${this.nextClass}`,\n        prevEl: `.${this.prevClass}`\n      }\n    },\n    sliderOptions() {\n      return {\n        autoplay: false,\n        navigation: { ...this.navigationButtons },\n        // Default parameters\n        // slidesPerView: 6,\n        // breakpoints: {\n        //   // when window width is >= 1280px\n        //   1440: {\n        //     slidesPerView: 4\n        //   }\n        // },\n        slidesPerView: this.slidesPerView,\n        breakpoints: this.breakpoints,\n        centeredSlides: false,\n        normalizeSlideIndex: false\n        // ...this.options\n      }\n    }\n  }\n}\n",{"version":3,"sources":["total.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"total.vue","sourceRoot":"src/views/biz-components/st/total","sourcesContent":["<template>\n  <div :class=\"b()\">\n    <div v-if=\"hasTitle\" :class=\"b('title')\">\n      <slot name=\"title\">\n        <span :class=\"b('tip')\">本次筛选</span>\n        <st-t3 :class=\"b('t3')\">合计</st-t3>\n      </slot>\n    </div>\n    <div :class=\"b('content-wapper')\">\n      <div :class=\"[b('content'), !hasTitle ? b('content--full') : '']\">\n        <div\n          v-if=\"showData.length > minSlideLen\"\n          :class=\"prevClass\"\n          class=\"swiper-total-button-prev swiper-button-prev\"\n          slot=\"button-prev\"\n        >\n          <st-icon type=\"arrow-left\" class=\"arrow-left\" />\n        </div>\n        <div :class=\"b('item')\" ref=\"content\">\n          <swiper v-if=\"show\" :options=\"sliderOptions\" ref=\"swiperTotal\">\n            <swiper-slide\n              v-for=\"(item, index) in showData\"\n              :class=\"{ 'st-total-item__active': item.slotName }\"\n              :key=\"index\"\n            >\n              <slot :name=\"item.slotName\" v-bind=\"item\">\n                <st-total-item\n                  :unit=\"item.unit\"\n                  :label=\"item.label\"\n                  :value=\"item.value\"\n                ></st-total-item>\n              </slot>\n            </swiper-slide>\n          </swiper>\n        </div>\n\n        <div\n          v-if=\"showData.length > minSlideLen\"\n          :class=\"nextClass\"\n          class=\"swiper-total-button-next swiper-button-next\"\n          slot=\"button-next\"\n        >\n          <st-icon type=\"arrow-right\" class=\"arrow-right\" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { swiper, swiperSlide } from 'vue-awesome-swiper'\nimport StTotalItem from './total-item.vue'\nimport 'swiper/dist/css/swiper.css'\nimport moment from 'moment'\nexport default {\n  name: 'StTotal',\n  bem: {\n    b: 'st-total'\n  },\n  components: {\n    swiper,\n    swiperSlide,\n    StTotalItem\n  },\n  props: {\n    indexs: {\n      type: Array,\n      default: () => []\n    },\n    dataSource: {\n      type: Object,\n      default: () => {}\n    },\n    hasTitle: {\n      type: Boolean,\n      default: false\n    },\n    options: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      show: true,\n      dWidth: 0\n    }\n  },\n  mounted() {\n    this.getDiffWidth()\n  },\n  methods: {\n    // 计算页面宽度 与 组件内容容器宽度的差值\n    getDiffWidth() {\n      const pageWidth = document.body.clientWidth\n      const contentWidth = this.$refs.content.offsetWidth\n      this.dWidth += pageWidth > contentWidth ? pageWidth - contentWidth : 0\n      // console.log(pageWidth, contentWidth)\n      // 差值改变需要重新计算 breakponts 和 slidesPerView, 使用v-if 达到刷新 swiper的 options\n      this.show = false\n      if (!this.show) {\n        setTimeout(() => {\n          this.show = true\n        }, 50)\n      }\n    },\n    // 计算字符串宽度宽度\n    getTextWidth(str, fontSize) {\n      let result = 100\n      let ele = document.createElement('span')\n      ele.innerText = str\n      ele.setAttribute(\n        'style',\n        `position: absolute; font-size: ${fontSize}px; opacity: 0`\n      )\n      document.documentElement.append(ele)\n      if (ele && ele.offsetWidth) result = ele.offsetWidth\n      document.documentElement.removeChild(ele)\n      // 加上 item 的padding宽度\n      return result + 20\n    }\n  },\n  watch: {\n    dataSource: {\n      deep: true,\n      handler() {\n        this.show = false\n        if (!this.show) {\n          setTimeout(() => {\n            this.show = true\n          }, 50)\n        }\n      }\n    }\n  },\n  computed: {\n    showData() {\n      let templateData = []\n      // for (let item in this.dataSource) {\n\n      // }\n      this.indexs.forEach(ele => {\n        templateData.push({\n          label: ele.titleTotal || ele.title,\n          value: this.dataSource[ele.dataIndex],\n          unit: ele.unit || '',\n          slotName: ele.scopedSlots ? ele.scopedSlots.customRender : ''\n        })\n      })\n      return templateData\n    },\n    itemMaxWidth() {\n      let maxWidth = 100\n      // 计算所有 item 长度 取最大值\n      this.indexs.map(item => {\n        let titleW = this.getTextWidth(item.titleTotal || item.title, 14)\n        let value = +this.dataSource[item.dataIndex] || 0\n        value = value.toString().includes('.') ? value.toFixed(1) : value\n        let valueW = this.getTextWidth(\n          (item.unit || '') + value,\n          this.hasTitle ? 20 : 24\n        )\n        // console.log(\n        //   item.titleTotal || item.title,\n        //   titleW,\n        //   '¥' + (this.dataSource[item.dataIndex] || 0),\n        //   valueW\n        // )\n        maxWidth = Math.max(titleW, valueW, maxWidth)\n      })\n      // console.log('最大值', maxWidth)\n      return maxWidth\n    },\n    slidesPerView() {\n      return Math.floor((1920 - this.dWidth) / this.itemMaxWidth)\n    },\n    // 设置不懂屏幕宽度下 可容纳item的最大数量\n    breakpoints() {\n      let w = 1200\n      let minSize = Math.floor((w - this.dWidth) / this.itemMaxWidth)\n      w = minSize * this.itemMaxWidth + this.dWidth\n      let breakpointsArr = [w]\n      while (w < 1920) {\n        w += this.itemMaxWidth\n        breakpointsArr.push(w)\n      }\n      const breakpoints = {}\n      breakpointsArr.map((item, index) => {\n        let num = Math.floor((item - this.dWidth) / this.itemMaxWidth)\n        breakpoints[item] = {\n          slidesPerView: num - (index === 0 ? 0 : 1)\n        }\n      })\n      // console.log('屏幕宽度 - 内容宽度', this.dWidth)\n      // console.log('变更节点配置', breakpoints)\n      return breakpoints\n    },\n    // 获取最小宽度下可排放的item数量\n    minSlideLen() {\n      let w = 1280\n      let minSize = Math.floor((w - this.dWidth) / this.itemMaxWidth)\n      w = minSize * this.itemMaxWidth + this.dWidth\n      return this.breakpoints[w].slidesPerView\n    },\n    timestamp() {\n      return moment().valueOf()\n    },\n    prevClass() {\n      return `swiper-${this.timestamp}-button-prev`\n    },\n    nextClass() {\n      return `swiper-${this.timestamp}-button-next`\n    },\n    navigationButtons() {\n      return {\n        nextEl: `.${this.nextClass}`,\n        prevEl: `.${this.prevClass}`\n      }\n    },\n    sliderOptions() {\n      return {\n        autoplay: false,\n        navigation: { ...this.navigationButtons },\n        // Default parameters\n        // slidesPerView: 6,\n        // breakpoints: {\n        //   // when window width is >= 1280px\n        //   1440: {\n        //     slidesPerView: 4\n        //   }\n        // },\n        slidesPerView: this.slidesPerView,\n        breakpoints: this.breakpoints,\n        centeredSlides: false,\n        normalizeSlideIndex: false\n        // ...this.options\n      }\n    }\n  }\n}\n</script>\n"]}]}