{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/brand-stat-line.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/brand-stat-line.vue","mtime":1594864208767},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport _toConsumableArray from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\nimport { toKFilter, thousandsFilter, setColorMap } from \"./filters\";\nimport { View } from 'st-data-set';\nimport { Chart } from '@antv/g2';\nimport chartMixin from \"./mixin\";\nexport default {\n  name: 'BrandStatLine',\n  mixins: [chartMixin],\n  props: {\n    /**\n     * @example\n     * fold 为false [{date:'05-28', name: '私教课', value: 20}, {date:'05-28', name: '团体课', value: 50}]\n     * fold 为true [{date:'05-28',私教课:20,团体课:50,储值卡:78}]\n     * fold 为true时 fields不能为空\n     */\n    fold: {\n      type: Boolean,\n      default: false\n    },\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    height: {\n      type: Number,\n      default: 280\n    },\n    // 数组排序对应颜色顺序，设置对应字段的颜色；当fold为true时 fields又作为展开字段集,用于字段的展开\n    fields: {\n      type: [Boolean, Array],\n      default: function _default() {\n        return ['其他', '全部'];\n      }\n    },\n    colorKey: {\n      type: String,\n      default: 'name'\n    },\n    // 颜色数组\n    colors: {\n      type: Array,\n      default: function _default() {\n        return ['#3F66F6', '#798AFF', '#06DB8C', '#77FF74', '#B8F10F', '#FFE679', '#FFB946', '#FF6466', '#C87FFF', '#484F83'];\n      }\n    },\n    colorMap: {\n      type: [Object, Boolean],\n      default: false\n    },\n    max: {\n      type: Number,\n      default: 4000\n    }\n  },\n  data: function data() {\n    return {// MAX: 0\n    };\n  },\n  computed: {\n    $fields: function $fields() {\n      var fields = [];\n      if (!this.fields) return _toConsumableArray(new Set(this.data.map(function (item) {\n        return item.name;\n      })));\n\n      if (this.fields.length) {\n        fields = [].concat(_toConsumableArray(this.fields), _toConsumableArray(new Set(this.data.map(function (item) {\n          return item.name;\n        }))));\n      }\n\n      return fields;\n    },\n    // 构造颜色map\n    $colorMap: function $colorMap() {\n      if (this.colorMap) return this.colorMap;\n      return setColorMap(this.$fields || [], this.colors);\n    },\n    // 构造阴影颜色map\n    shadowColors: function shadowColors() {\n      var shadowColorMap = {};\n\n      for (var key in this.$colorMap) {\n        shadowColorMap[key] = this.colorToRgba(this.$colorMap[key], 0.4);\n      } // this.$fields.map((key, idx) => {\n      //   shadowColorMap[key] = this.colorToRgba(\n      //     this.colors[idx % this.colors.length],\n      //     0.4\n      //   )\n      // })\n\n\n      return shadowColorMap;\n    },\n    MAX: function MAX() {\n      var maxValue = this.dv.max('value');\n      return maxValue > this.max ? maxValue : this.max;\n    }\n  },\n  methods: {\n    initDv: function initDv() {\n      this.dv = new View();\n      this.dv.source(this.data);\n\n      if (this.fold) {\n        this.dv.transform({\n          type: 'fold',\n          fields: this.$fields,\n          key: 'name',\n          value: 'value'\n        });\n      }\n\n      this.dv.transform({\n        type: 'map',\n        callback: function callback(row, index) {\n          ;\n          row.$idx = index, row.value = +row.value;\n          return row;\n        }\n      });\n    },\n    changeData: function changeData() {\n      this.chart.destroy();\n      this.initChart();\n    },\n    initChart: function initChart() {\n      this.getChartInstance();\n      this.chart.source(this.dv, {\n        date: {\n          tickCount: 7,\n          range: [0, 1]\n        },\n        value: {\n          max: +this.MAX,\n          min: 0,\n          tickCount: 8,\n          formatter: toKFilter,\n          sync: true\n        }\n      });\n      this.setAxis();\n      this.setLegend();\n      this.getLineChart();\n      this.chart.render();\n    },\n    getChartInstance: function getChartInstance() {\n      this.chart = new Chart({\n        container: this.$el,\n        forceFit: true,\n        height: this.height,\n        padding: [8, 160, 'auto', 'auto'],\n        renderer: 'svg'\n      });\n    },\n    setAxis: function setAxis() {\n      this.chart.axis('date', {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        tickLine: {\n          lineWidth: 0,\n          length: 0\n        }\n      });\n      this.chart.axis('value', {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        grid: {\n          lineStyle: {\n            lineWidth: 0.5,\n            lineDash: [0, 0]\n          }\n        }\n      });\n    },\n    setLegend: function setLegend() {\n      this.chart.legend('name', {\n        position: 'right-center',\n        itemWidth: 80,\n        useHtml: true,\n        textStyle: {\n          fill: '#3E4D5C'\n        },\n        itemTpl: function itemTpl() {\n          return '<li class=\"g2-legend-list-item item-{index} {checked}\" data-color=\"{originColor}\" data-value=\"{originValue}\">' + \"<span class=\\\"g2-legend-marker\\\" style=\\\"background-color:{color};\\\"></span>\" + \" <span class=\\\"g2-legend-text\\\">{value}</span>\" + '</li>';\n        }\n      });\n    },\n    getLineChart: function getLineChart() {\n      var _this = this;\n\n      this.chart.line().style(\"name*\".concat(this.colorKey), {\n        shadowColor: function shadowColor(name, key) {\n          console.log('shadowColor', name, key);\n          return _this.shadowColors[name];\n        },\n        shadowBlur: 20,\n        shadowOffsetY: 4\n      }).tooltip('name*value', function (name, value) {\n        return {\n          name: name,\n          value: '¥' + thousandsFilter(value)\n        };\n      }).shape('smooth').size(2).position('date*value').color(\"name*\".concat(this.colorKey), function (name, key) {\n        console.log('color', name, key);\n        return _this.$colorMap[name];\n      });\n    },\n    colorToRgba: function colorToRgba() {\n      var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var opacity = arguments.length > 1 ? arguments[1] : undefined;\n      var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\n      var color = str.toLowerCase();\n\n      if (reg.test(color)) {\n        if (color.length === 4) {\n          var colorNew = '#';\n\n          for (var i = 1; i < 4; i += 1) {\n            colorNew += color.slice(i, i + 1).concat(color.slice(i, i + 1));\n          }\n\n          color = colorNew;\n        }\n\n        var colorChange = [];\n\n        for (var _i = 1; _i < 7; _i += 2) {\n          colorChange.push(parseInt('0x' + color.slice(_i, _i + 2)));\n        }\n\n        return \"RGB(\".concat(colorChange.join(','), \",\").concat(opacity, \")\");\n      } else {\n        return color;\n      }\n    }\n  }\n};",{"version":3,"sources":["brand-stat-line.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"brand-stat-line\"></div>\n</template>\n\n<script>\nimport { toKFilter, thousandsFilter, setColorMap } from './filters'\nimport { View } from 'st-data-set'\nimport { Chart } from '@antv/g2'\nimport chartMixin from './mixin'\n\nexport default {\n  name: 'BrandStatLine',\n  mixins: [chartMixin],\n  props: {\n    /**\n     * @example\n     * fold 为false [{date:'05-28', name: '私教课', value: 20}, {date:'05-28', name: '团体课', value: 50}]\n     * fold 为true [{date:'05-28',私教课:20,团体课:50,储值卡:78}]\n     * fold 为true时 fields不能为空\n     */\n    fold: {\n      type: Boolean,\n      default: false\n    },\n    data: {\n      type: Array,\n      default: () => []\n    },\n    height: {\n      type: Number,\n      default: 280\n    },\n    // 数组排序对应颜色顺序，设置对应字段的颜色；当fold为true时 fields又作为展开字段集,用于字段的展开\n    fields: {\n      type: [Boolean, Array],\n      default: () => ['其他', '全部']\n    },\n    colorKey: {\n      type: String,\n      default: 'name'\n    },\n    // 颜色数组\n    colors: {\n      type: Array,\n      default: () => [\n        '#3F66F6',\n        '#798AFF',\n        '#06DB8C',\n        '#77FF74',\n        '#B8F10F',\n        '#FFE679',\n        '#FFB946',\n        '#FF6466',\n        '#C87FFF',\n        '#484F83'\n      ]\n    },\n    colorMap: {\n      type: [Object, Boolean],\n      default: false\n    },\n    max: {\n      type: Number,\n      default: 4000\n    }\n  },\n  data() {\n    return {\n      // MAX: 0\n    }\n  },\n  computed: {\n    $fields() {\n      let fields = []\n      if (!this.fields) return [...new Set(this.data.map(item => item.name))]\n      if (this.fields.length) {\n        fields = [...this.fields, ...new Set(this.data.map(item => item.name))]\n      }\n      return fields\n    },\n    // 构造颜色map\n    $colorMap() {\n      if (this.colorMap) return this.colorMap\n      return setColorMap(this.$fields || [], this.colors)\n    },\n    // 构造阴影颜色map\n    shadowColors() {\n      const shadowColorMap = {}\n      for (let key in this.$colorMap) {\n        shadowColorMap[key] = this.colorToRgba(this.$colorMap[key], 0.4)\n      }\n      // this.$fields.map((key, idx) => {\n      //   shadowColorMap[key] = this.colorToRgba(\n      //     this.colors[idx % this.colors.length],\n      //     0.4\n      //   )\n      // })\n      return shadowColorMap\n    },\n    MAX() {\n      const maxValue = this.dv.max('value')\n      return maxValue > this.max ? maxValue : this.max\n    }\n  },\n  methods: {\n    initDv() {\n      this.dv = new View()\n      this.dv.source(this.data)\n      if (this.fold) {\n        this.dv.transform({\n          type: 'fold',\n          fields: this.$fields,\n          key: 'name',\n          value: 'value'\n        })\n      }\n      this.dv.transform({\n        type: 'map',\n        callback: (row, index) => {\n          ;(row.$idx = index), (row.value = +row.value)\n          return row\n        }\n      })\n    },\n    changeData() {\n      this.chart.destroy()\n      this.initChart()\n    },\n    initChart() {\n      this.getChartInstance()\n      this.chart.source(this.dv, {\n        date: {\n          tickCount: 7,\n          range: [0, 1]\n        },\n        value: {\n          max: +this.MAX,\n          min: 0,\n          tickCount: 8,\n          formatter: toKFilter,\n          sync: true\n        }\n      })\n      this.setAxis()\n      this.setLegend()\n      this.getLineChart()\n      this.chart.render()\n    },\n    getChartInstance() {\n      this.chart = new Chart({\n        container: this.$el,\n        forceFit: true,\n        height: this.height,\n        padding: [8, 160, 'auto', 'auto'],\n        renderer: 'svg'\n      })\n    },\n    setAxis() {\n      this.chart.axis('date', {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        tickLine: {\n          lineWidth: 0,\n          length: 0\n        }\n      })\n      this.chart.axis('value', {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        grid: {\n          lineStyle: {\n            lineWidth: 0.5,\n            lineDash: [0, 0]\n          }\n        }\n      })\n    },\n    setLegend() {\n      this.chart.legend('name', {\n        position: 'right-center',\n        itemWidth: 80,\n        useHtml: true,\n        textStyle: {\n          fill: '#3E4D5C'\n        },\n        itemTpl: () => {\n          return (\n            '<li class=\"g2-legend-list-item item-{index} {checked}\" data-color=\"{originColor}\" data-value=\"{originValue}\">' +\n            `<span class=\"g2-legend-marker\" style=\"background-color:{color};\"></span>` +\n            ` <span class=\"g2-legend-text\">{value}</span>` +\n            '</li>'\n          )\n        }\n      })\n    },\n    getLineChart() {\n      this.chart\n        .line()\n        .style(`name*${this.colorKey}`, {\n          shadowColor: (name, key) => {\n            console.log('shadowColor', name, key)\n            return this.shadowColors[name]\n          },\n          shadowBlur: 20,\n          shadowOffsetY: 4\n        })\n        .tooltip('name*value', (name, value) => {\n          return {\n            name,\n            value: '¥' + thousandsFilter(value)\n          }\n        })\n        .shape('smooth')\n        .size(2)\n        .position('date*value')\n        .color(`name*${this.colorKey}`, (name, key) => {\n          console.log('color', name, key)\n          return this.$colorMap[name]\n        })\n    },\n\n    colorToRgba(str = '', opacity) {\n      const reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/\n      let color = str.toLowerCase()\n      if (reg.test(color)) {\n        if (color.length === 4) {\n          let colorNew = '#'\n          for (let i = 1; i < 4; i += 1) {\n            colorNew += color.slice(i, i + 1).concat(color.slice(i, i + 1))\n          }\n          color = colorNew\n        }\n        let colorChange = []\n        for (let i = 1; i < 7; i += 2) {\n          colorChange.push(parseInt('0x' + color.slice(i, i + 2)))\n        }\n        return `RGB(${colorChange.join(',')},${opacity})`\n      } else {\n        return color\n      }\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views/biz-components/stat"}]}