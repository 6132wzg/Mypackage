{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/shop/finance/flow.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/shop/finance/flow.vue","mtime":1591147717214},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { FlowService } from './flow.service'\nimport { ruleOptions } from './flow.config'\nexport default {\n  name: 'ModalShopFinanceFlow',\n  bem: {\n    basic: 'modal-shop-finance-flow'\n  },\n  serviceInject() {\n    return {\n      flowService: FlowService\n    }\n  },\n  rxState() {\n    return {\n      info: this.flowService.info$,\n      paymentMethodList: this.flowService.paymentMethodList$,\n      loading: this.flowService.loading$\n    }\n  },\n  props: ['id', 'order_id'],\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      form,\n      decorators,\n      show: false,\n      description: '',\n      payChannel: 2\n    }\n  },\n  computed: {},\n  created() {\n    this.flowService.init(this.id).subscribe()\n  },\n  methods: {\n    moment,\n    onSubmit() {\n      this.form.validate().then(values => {\n        this.flowService\n          .orderFlow({\n            flow_id: this.info.flow_id,\n            reason: values.reason,\n            price: +values.price,\n            pay_channel: +this.payChannel,\n            flow_time: moment(values.flow_time).format('YYYY-MM-DD HH:mm')\n          })\n          .subscribe(res => {\n            this.$emit('success')\n            this.show = false\n          })\n      })\n    },\n    disabledDate(current) {\n      if (current < moment(this.info.flow_time)) {\n        return true\n      }\n      if (\n        current > moment(this.info.flow_time).add(30, 'days') ||\n        current > moment()\n      ) {\n        return true\n      }\n      return false\n    }\n  }\n}\n",null]}