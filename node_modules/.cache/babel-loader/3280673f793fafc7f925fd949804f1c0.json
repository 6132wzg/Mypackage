{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/date-slider/date-slider.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/date-slider/date-slider.vue","mtime":1591147717102},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport SliderButton from \"./button\";\nexport default {\n  name: 'StDateSlider',\n  bem: {\n    StDateSlider: 'st-date-slider'\n  },\n  components: {\n    SliderButton: SliderButton\n  },\n  props: {\n    value: {\n      type: [Number, Array],\n      default: 0\n    },\n    tipFormatter: Function,\n    min: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 24\n    },\n    step: {\n      type: Number,\n      default: 60\n    },\n    disable: {\n      type: Boolean,\n      default: false\n    },\n    rangeData: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      dragging: false,\n      firstValue: null,\n      secondValue: null,\n      oldValue: null\n    };\n  },\n  computed: {\n    precision: function precision() {\n      var precisions = [this.min, this.max, this.step].map(function (item) {\n        var decimal = ('' + item).split('.')[1];\n        return decimal ? decimal.length : 0;\n      });\n      return Math.max.apply(null, precisions);\n    },\n    minValue: function minValue() {\n      return Math.min(this.firstValue, this.secondValue);\n    },\n    maxValue: function maxValue() {\n      return Math.max(this.firstValue, this.secondValue);\n    },\n    range: function range() {\n      return Array.isArray(this.rangeData) && this.rangeData.length;\n    },\n    rangeFirst: function rangeFirst() {\n      return this.rangeData[0];\n    },\n    rangeSecond: function rangeSecond() {\n      return this.rangeData[1];\n    },\n    sliderBarSize: function sliderBarSize() {\n      return \"\".concat(100 * (this.maxValue - this.minValue) / (this.max - this.min), \"%\");\n    },\n    sliderBarStart: function sliderBarStart() {\n      return \"\".concat(100 * (this.minValue - this.min) / (this.max - this.min), \"%\");\n    },\n    sliderBarStyle: function sliderBarStyle() {\n      return {\n        left: this.sliderBarStart,\n        width: this.sliderBarSize\n      };\n    },\n    rangeBarSize: function rangeBarSize() {\n      return \"\".concat(100 * (this.rangeSecond - this.rangeFirst) / (this.max - this.min), \"%\");\n    },\n    rangeBarStart: function rangeBarStart() {\n      return \"\".concat(100 * this.rangeFirst / (this.max - this.min), \"%\");\n    },\n    rangeBarStyle: function rangeBarStyle() {\n      return {\n        left: this.rangeBarStart,\n        width: this.rangeBarSize\n      };\n    }\n  },\n  watch: {\n    value: function value(val, oldVal) {\n      // console.log('value is updating', this.dragging, val, oldVal)\n      if (this.dragging || Array.isArray(val) && Array.isArray(oldVal) && val.every(function (item, index) {\n        return item === oldVal[index];\n      })) {\n        return;\n      }\n\n      this.setValues();\n    },\n    dragging: function dragging(val) {\n      if (!val) {\n        console.log('dragging');\n        this.setValues();\n      }\n    },\n    firstValue: function firstValue(val) {\n      this.$emit('input', [this.minValue, this.maxValue]);\n    },\n    secondValue: function secondValue() {\n      this.$emit('input', [this.minValue, this.maxValue]);\n    },\n    min: function min() {\n      // consol.log('min change')\n      this.setValues();\n    },\n    max: function max() {\n      // consol.log('max change')\n      this.setValues();\n    },\n    rangeFirst: function rangeFirst() {\n      // consol.log('rangeFirst change')\n      if (this.range) this.setValues();\n    },\n    rangeSecond: function rangeSecond() {\n      // consol.log('rangeSecond change')\n      if (this.range) this.setValues();\n    }\n  },\n  mounted: function mounted() {\n    // 确定首尾值\n    if (Array.isArray(this.value) && !this.range) {\n      this.firstValue = Math.max(this.min, this.value[0]);\n      this.secondValue = Math.min(this.max, this.value[1]);\n    } else {\n      this.firstValue = Math.max(this.rangeFirst, this.value[0]);\n      this.secondValue = Math.min(this.rangeSecond, this.value[1]);\n    }\n\n    this.oldValue = [this.firstValue, this.secondValue];\n    window.addEventListener('resize', this.resetSize);\n  },\n  methods: {\n    valueChanged: function valueChanged() {\n      var _this = this;\n\n      return ![this.minValue, this.maxValue].every(function (item, index) {\n        return item === _this.oldValue[index];\n      });\n    },\n    setValues: function setValues() {\n      if (this.min > this.max) {\n        return;\n      }\n\n      var val = this.value;\n      if (!Array.isArray(val)) return false;\n      var min = this.range ? this.rangeFirst : this.min;\n      var max = this.range ? this.rangeSecond : this.max;\n\n      if (val[1] < min) {\n        this.$emit('input', [min, min]);\n      } else if (val[0] > max) {\n        this.$emit('input', [max, max]);\n      } else if (val[0] < min) {\n        this.$emit('input', [min, val[1]]);\n      } else if (val[1] > max) {\n        this.$emit('input', [val[0], max]);\n      } else {\n        this.firstValue = val[0];\n        this.secondValue = val[1];\n\n        if (this.valueChanged()) {\n          this.oldValue = val.slice();\n        }\n      }\n    },\n    setPosition: function setPosition(percent) {\n      var min = this.range ? this.rangeFirst : this.min;\n      var targetValue = min + percent * (this.max - this.min) / 100;\n      var button;\n\n      if (Math.abs(this.minValue - targetValue) < Math.abs(this.maxValue - targetValue)) {\n        button = this.firstValue < this.secondValue ? 'firstButton' : 'secondButton';\n      } else {\n        button = this.firstValue > this.secondValue ? 'firstButton' : 'secondButton';\n      }\n\n      this.$refs[button].setPosition(percent);\n    },\n    onSliderClick: function onSliderClick(event) {\n      // console.log(this.dragging)\n      if (this.disable || this.dragging) return;\n      this.resetSize();\n      console.log(this.$refs.slider);\n      var sliderOffsetLeft = this.$refs.slider.getBoundingClientRect().left;\n      this.setPosition((event.clientX - sliderOffsetLeft) / this.sliderSize * 100);\n      this.emitChange();\n    },\n    resetSize: function resetSize() {\n      if (this.$refs.slider) {\n        this.sliderSize = this.$refs.slider['clientWidth'];\n      }\n    },\n    emitChange: function emitChange() {\n      var _this2 = this;\n\n      this.$nextTick(function () {\n        _this2.$emit('input', [_this2.minValue, _this2.maxValue]);\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('resize', this.resetSize);\n  }\n};",null]}