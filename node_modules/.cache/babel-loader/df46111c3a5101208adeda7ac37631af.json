{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/schedule/date#/month-board.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/schedule/date#/month-board.vue","mtime":1591147717112},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find-index\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nexport default {\n  name: 'MonthBoard',\n  bem: {\n    basic: 'months-group-board',\n    bHeader: 'board-header',\n    boardContent: 'board-content',\n    dayContent: 'day-content',\n    popoverBox: 'popover-box',\n    addBtnContent: 'add-btn-content'\n  },\n  props: {\n    addTitle: {\n      type: String,\n      default: '新增团体课'\n    },\n    courses: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  watch: {\n    $route: function $route(val) {\n      this.init();\n    },\n    courses: function courses() {\n      this.getCoursesList();\n    }\n  },\n  data: function data() {\n    return {\n      date: '',\n      // 星期一到星期日文字\n      weekList: moment().localeData().weekdays(),\n      // 日列表\n      dayList: []\n    };\n  },\n  created: function created() {\n    this.init();\n    this.getCoursesList();\n  },\n  methods: {\n    onPopoverMouseEnter: function onPopoverMouseEnter(day) {\n      day.popoverShow = true;\n    },\n    init: function init() {\n      this.date = this.$searchQuery.start_date;\n      this.dayList = this.getCurrentMonthDayList();\n    },\n    getCurrentMonthDayList: function getCurrentMonthDayList() {\n      // 当前日期的月份\n      var nowMonth = moment(this.date).month();\n      var dates = [];\n\n      for (var i = 0; i < 42; i++) {\n        var startDate = moment(this.date).date(1);\n        startDate.startOf('week');\n        dates[i] = startDate.weekday(i - 1);\n      } // 判断当前是否含有上个月7天的数据，如果有则删除\n\n\n      var startOfMonth = moment(this.date).startOf('month').format('YYYY-MM-DD');\n      var firstDay = dates.findIndex(function (item) {\n        return item.format('YYYY-MM-DD') === startOfMonth;\n      });\n\n      if (firstDay > 6) {\n        dates = dates.slice(7, dates.length);\n      } // 判断是否包含下个月7天的数据，如果有则删除\n\n\n      var startOfNextMonth = moment(this.date).month(moment(this.date).month() + 1).startOf('month').format('YYYY-MM-DD');\n      var nextMonthFirstDay = dates.findIndex(function (item) {\n        return item.format('YYYY-MM-DD') === startOfNextMonth;\n      });\n\n      if (nextMonthFirstDay !== -1 && dates.length - nextMonthFirstDay > 6) {\n        dates = dates.slice(0, dates.length - 7);\n      }\n\n      return dates.map(function (item) {\n        return {\n          date: item.date(),\n          fullDate: item.format('YYYY-MM-DD'),\n          current: item.format('YYYY-MM-DD') === moment().format('YYYY-MM-DD'),\n          isThisMonth: item.month() === nowMonth,\n          addBtnShow: false,\n          popoverShow: false,\n          courses: []\n        };\n      });\n    },\n    onMouseMove: function onMouseMove(day, er) {\n      if (day.courses.length !== 0) {\n        day.popoverShow = true;\n        return;\n      }\n\n      this.dayList.forEach(function (item) {\n        item.addBtnShow = item.fullDate === day.fullDate ? true : false;\n      });\n    },\n    onMouseLeave: function onMouseLeave(day) {\n      day.addBtnShow = false;\n    },\n    onClickAddBtn: function onClickAddBtn(e) {\n      this.$emit('onClickAddBtn', {\n        date: e.date,\n        fullDate: e.fullDate\n      });\n    },\n    hidePopover: function hidePopover(e) {\n      e.popoverShow = false;\n    },\n    onClickCourse: function onClickCourse(e) {\n      this.$emit('onClickCourse', _objectSpread({}, e));\n    },\n    getCoursesList: function getCoursesList() {\n      var _this = this;\n\n      this.dayList.forEach(function (day) {\n        _this.courses.forEach(function (course) {\n          if (day.fullDate === course.start_date) {\n            day.courses.push(course);\n          }\n        });\n      });\n    }\n  }\n};",null]}