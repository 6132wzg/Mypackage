{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/sold/card/refund.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/sold/card/refund.vue","mtime":1598250255732},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { RefundService } from './refund.service'\nimport { UserService } from '@/services/user.service'\nimport { ruleOptions } from './refund.config'\nexport default {\n  name: 'ModalSoldCardRefund',\n  bem: {\n    refund: 'modal-sold-card-refund'\n  },\n  serviceProviders() {\n    return [RefundService]\n  },\n  serviceInject() {\n    return {\n      userService: UserService,\n      refundService: RefundService\n    }\n  },\n  rxState() {\n    return {\n      refundInfo: this.refundService.refundInfo$,\n      refundReasons: this.refundService.refundReasons$,\n      refundChannelSaas: this.refundService.refundChannelSaas$,\n      loading: this.refundService.loading$\n    }\n  },\n  props: ['id', 'type'],\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      form,\n      decorators,\n      show: false,\n      // 客户要求退款退货（此商品变为无效）\n      refundReason: 2,\n      frozenPayType: this.refundChannelSaas[0].value,\n      description: ''\n    }\n  },\n  computed: {\n    isDeposit() {\n      return this.type === 'deposit'\n    },\n    isMember() {\n      return this.type === 'member'\n    }\n  },\n  created() {\n    this.refundService.getRefundInfo(this.id, this.type).subscribe()\n  },\n  methods: {\n    onSubmit() {\n      this.form.validate().then(values => {\n        this.refundService\n          .refund(\n            {\n              refund_price: +values.refund_price,\n              refund_reason: +this.refundReason,\n              refund_channel: +this.frozenPayType,\n              description: this.description\n            },\n            this.id,\n            this.type\n          )\n          .subscribe(res => {\n            this.$emit('success')\n            this.show = false\n          })\n      })\n    }\n  }\n}\n",null]}