{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/ring/ring.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/ring/ring.vue","mtime":1598250255719},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { View } from 'st-data-set'\nimport { Chart } from '@antv/g2'\nimport {\n  toKFilter,\n  thousandsFilter,\n  setColorMap,\n  colorToRgba\n} from '../filters'\nimport chartMixin from '../mixin'\nimport { chartConfig } from './ring.config'\n\nexport default {\n  name: 'MultiLine',\n  mixins: [chartMixin],\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    dataItem: {\n      type: Function,\n      default: row => row\n    },\n    // 设置 图例、x轴、y轴 对应的key值\n    dataItemKeyMap: {\n      type: Object,\n      default: () => {\n        return {\n          name: 'name', // 图例名\n          key: 'key', // 图例name对应key值\n          value: 'value', // y轴值\n          x: 'date' // x轴值\n        }\n      }\n    },\n    total: {\n      type: [Number, String],\n      default: 0\n    },\n    unitBack: {\n      type: Boolean,\n      default: false\n    },\n    unit: {\n      type: String,\n      default: '¥'\n    },\n    totalName: {\n      type: String,\n      default: ''\n    },\n    tooltipId: {\n      type: String,\n      default: ''\n    },\n    tooltipMap: {\n      type: Object,\n      default: () => {}\n    },\n    // 数组排序对应颜色顺序，设置对应字段的颜色；当fold为true时 fields又作为展开字段集,用于字段的展开\n    fields: {\n      type: [Boolean, Array],\n      default: () => []\n    },\n    fieldKey: {\n      type: String,\n      default: 'key'\n    },\n    // 颜色配置数组\n    colors: {\n      type: Array,\n      default: () => [\n        '#3F66F6',\n        '#798AFF',\n        '#06DB8C',\n        '#77FF74',\n        '#B8F10F',\n        '#FFE679',\n        '#FFB946',\n        '#FF6466',\n        '#C87FFF',\n        '#484F83'\n      ]\n    },\n    // 是否按照颜色数组的顺序 循环设置图例颜色（即图例顺序与colors顺序一一对应），默认为false，根据图例key设置图例颜色\n    colorIsQueue: {\n      type: Boolean,\n      default: false\n    },\n    colorMap: {\n      type: [Object, Array, Boolean],\n      default: false\n    },\n    height: {\n      type: Number,\n      default: 210\n    },\n    padding: {\n      type: [Array, Number],\n      default: () => ['auto', 185, 'auto', 'auto']\n    }\n  },\n  watch: {\n    // 当浏览器窗口变小时，tooltip会消失问题\n    resize() {\n      this.$nextTick(() => {\n        const tooltipMap = this.tooltipMap\n        for (let key in tooltipMap) {\n          tooltipMap[key] &&\n            new Vue({\n              components: {\n                StHelpTooltip\n              },\n              render: h => <st-help-tooltip id={tooltipMap[key]} />\n            }).$mount(`#legend-${key}`)\n        }\n        if (this.tooltipId) {\n          const $s = this.$el.querySelector.bind(this.$el)\n          const component = new Vue({\n            components: {\n              StHelpTooltip\n            },\n            render: h => <st-help-tooltip id={this.tooltipId} />\n          }).$mount()\n          $s(`#guide-name-tooltip${this.tooltipId}`).appendChild(component.$el)\n        }\n      })\n    }\n  },\n  data() {\n    return {\n      type: 'Ring',\n      dv: new View()\n    }\n  },\n  computed: {\n    dataSource() {\n      //传入的总计为0时，多一个环形图为0的灰色环形图\n      if (this.total == 0 || !this.total) {\n        return [{ key: 0, name: 'empty', value: 1, percent: 1 }, ...this.data]\n      }\n      return [{ key: 0, name: 'empty', value: 0, percent: 0 }, ...this.data]\n    },\n    /**\n     * 图例枚举配置获取\n     * fieldsKey  为图例名对应的key值数组\n     * fieldsName 为图例名 数组                用于数据展开的依据\n     * fieldsObj  为图例名与其key值 的对应关系\n     * */\n    $fieldsOpts() {\n      let fieldsKey = []\n      let fieldsName = []\n      let fieldsObj = {}\n      const data = this.dataSource\n      data.map(item => {\n        fieldsKey.push(item[this.fieldKey])\n        fieldsName.push(item.name)\n        fieldsObj[item[this.fieldKey]] = item.name\n      })\n      if (this.fields.length) {\n        fieldsKey = [...this.fields, ...fieldsKey]\n      }\n      fieldsKey = [...new Set(fieldsKey)]\n      fieldsName = [...new Set(fieldsName)]\n\n      return {\n        colorMap: this.colorMap,\n        fieldsKey,\n        fieldsName,\n        fieldsObj\n      }\n    },\n    // 构造颜色map\n    $colorMap() {\n      // 根据 图例枚举，以图例name为key值，生成图例颜色map对应关系\n      return setColorMap(this.$fieldsOpts, this.colors, this.colorIsQueue)\n    },\n    opt$() {\n      const { legend = {}, guide = {} } = this.$attrs\n      return {\n        legend: {\n          position: 'right-center',\n          layout: 'line', // line 同行  vertical 分上下两行\n          ...legend\n        },\n        guide: {\n          layout: '', // reverse 上下文案反转\n          ...guide\n        }\n      }\n    }\n  },\n  methods: {\n    initDv() {\n      this.dv.source(this.dataSource)\n      this.dv\n        .transform({\n          type: 'map',\n          callback: (row, index) => {\n            // 根据自定义配置项 格式化数据\n            for (let key in this.dataItemKeyMap) {\n              const itemDt = row[this.dataItemKeyMap[key]]\n              if (itemDt) row[key] = itemDt\n            }\n            ;(row.$idx = index), (row.value = +(row.value || 0))\n            return this.dataItem ? this.dataItem(row) : row\n          }\n        })\n        .transform({\n          type: 'percent',\n          field: 'value', // 统计销量\n          dimension: 'name', // 每年的占比\n          as: 'percent' // 结果存储在 percent 字段\n        })\n    },\n\n    renderChart() {\n      console.log('chart init', this.dv.rows)\n      this.chart = new Chart({\n        ...this.opts,\n        container: this.$el,\n        data: this.dv,\n        forceFit: true,\n        height: this.height,\n        padding: ['auto', 185, 'auto', 'auto']\n      })\n      if (this.isEmpty) {\n        this.chart.tooltip(false)\n        this.chart.legend('name', false)\n      }\n      this.chart.render()\n      this.chartEvent()\n    },\n    // 如果配置参数在单独的配置文件中这个方法必须设置\n    getChartConfig() {\n      // chartConfig 输出配置参数的方法\n      return chartConfig(this)\n    },\n    // 更新opts配置 需要重新计算最新的opts、并重新渲染\n    changeData() {\n      this.chart.destroy()\n      this.renderChart()\n    },\n    valFormat(val) {\n      return Number((+val).toFixed(1)).toLocaleString()\n    },\n    resetTotal() {\n      const $s = this.$el.querySelector.bind(this.$el)\n      $s('.guide-value').textContent = this.valFormat(this.total) || 0\n      // 总计的时候显示tooltip\n      $s('.guide-name-tooltip').setAttribute(\n        'style',\n        this.tooltipId ? 'display: inline' : 'display: none'\n      )\n      $s('.guide-name-text').textContent = this.totalName\n    },\n    setUnit(e) {\n      const $s = this.$el.querySelector.bind(this.$el)\n      // 当环形图总计都是零的时候隐藏tooltip\n      if (e.data._origin.name === 'empty') {\n        $s('.g2-tooltip').setAttribute('style', 'display: none')\n        return\n      }\n      const origin = e.data._origin\n      const shapes = e.shapes\n      const geom = e.geom\n\n      $s('.guide-value').textContent = this.valFormat(origin.value)\n      $s('.guide-name-text').textContent = origin.name\n      // 不是总计的时候隐藏tooltip\n      $s('.guide-name-tooltip').setAttribute('style', 'display: none')\n    },\n    chartEvent() {\n      // 鼠标进入环形显示相关的值\n      this.chart.on('interval:mouseenter', ev => {\n        const shape = ev.shape\n        const origin = ev.data._origin\n        if (origin.name === 'empty') {\n          this.chart.getAllGeoms()[0].clearActivedShapes(shape)\n        }\n        this.setUnit(ev)\n      })\n      // 鼠标离开显示总值\n      this.chart.on('interval:mouseleave', e => {\n        this.resetTotal()\n      })\n    }\n  }\n}\n",null]}