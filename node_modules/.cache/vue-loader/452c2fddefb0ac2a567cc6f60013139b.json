{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/sold/course/freeze.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/sold/course/freeze.vue","mtime":1591147717238},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { cloneDeep } from 'lodash-es'\nimport { UserService } from '@/services/user.service'\nimport { FreezeService } from './freeze.service'\nimport { OPERATION_TYPES } from '@/constants/sold/operations'\nimport { ruleOptions } from './freeze.config'\nexport default {\n  name: 'ModalSoldCourseFreeze',\n  serviceProviders() {\n    return [FreezeService]\n  },\n  serviceInject() {\n    return {\n      userService: UserService,\n      freezeService: FreezeService\n    }\n  },\n  rxState() {\n    return {\n      loading: this.freezeService.loading$,\n      info: this.freezeService.info$,\n      memberPaymentlist: this.freezeService.memberPaymentlist$\n    }\n  },\n  bem: {\n    freeze: 'modal-sold-course-freeze'\n  },\n  props: ['id', 'type'],\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      form,\n      decorators,\n      OPERATION_TYPES,\n      show: false,\n      startTime: moment(),\n      endTime: null,\n      frozen_fee: null,\n      frozen_pay_type: 1\n    }\n  },\n  created() {\n    this.freezeService.getInfo(this.id, this.type).subscribe(res => {\n      this.freezeService\n        .getMemberPaymentList({\n          member_id: res.info.member_id,\n          product_type: res.info.product_type,\n          operation_type: OPERATION_TYPES.FREEZE\n        })\n        .subscribe()\n    })\n  },\n  methods: {\n    moment,\n    // end_time validatorFn\n    end_time_validator(rule, value, callback) {\n      if (!value) {\n        // eslint-disable-next-line\n        callback('请选择冻结结束日期')\n      } else {\n        // eslint-disable-next-line\n        callback()\n      }\n    },\n    // pay_type validatorFn\n    pay_type_validator(rule, value, callback) {\n      if (!value && this.frozen_fee > 0) {\n        // eslint-disable-next-line\n        callback('请选择支付方式')\n      } else {\n        // eslint-disable-next-line\n        callback()\n      }\n    },\n    // 售卖时间-end\n    end_time_change(data) {\n      this.endTime = cloneDeep(data)\n    },\n    disabledEndDate(endValue) {\n      return endValue.valueOf() < moment().valueOf()\n    },\n    onFrozenChange(data) {\n      this.form.resetFields(['payType'])\n    },\n    onSubmit() {\n      this.form.validate().then(values => {\n        this.freezeService\n          .freeze(\n            {\n              start_time: moment(this.info.start_time).format(\n                'YYYY-MM-DD HH:mm'\n              ),\n              end_time: values.endTime.format('YYYY-MM-DD HH:mm'),\n              frozen_fee: this.frozen_fee,\n              frozen_pay_type: values.payType\n            },\n            this.id,\n            this.type\n          )\n          .subscribe(res => {\n            this.show = false\n            this.$emit('success')\n          })\n      })\n    }\n  }\n}\n",null]}