{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/sold/card/list/member.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/sold/card/list/member.vue","mtime":1600926556475},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { cloneDeep, filter } from 'lodash-es'\nimport { MemberService } from './member.service'\nimport tableMixin from '@/mixins/table.mixin'\nimport { columns, totalColumns } from './member.config'\nimport StTotal from '@/views/components/total#/total.vue'\nimport SoldCardArea from '@/views/biz-modals/sold/card/area'\nimport SoldCardBatchArea from '@/views/biz-modals/sold/card/batch-area'\nimport SoldCardBatchEnterTime from '@/views/biz-modals/sold/card/batch-enter-time'\nimport SoldCardFreeze from '@/views/biz-modals/sold/card/freeze'\nimport SoldCardGiving from '@/views/biz-modals/sold/card/giving'\nimport SoldCardRefund from '@/views/biz-modals/sold/card/refund'\nimport SoldCardSetTime from '@/views/biz-modals/sold/card/set-time'\nimport SoldCardTransfer from '@/views/biz-modals/sold/card/transfer'\nimport SoldCardExtendDay from '@/views/biz-modals/sold/card/extend-day'\nimport SoldCardReactive from '@/views/biz-modals/sold/card/reactive'\nimport SoldCardMemberReactive from '@/views/biz-modals/sold/card/member/reactive'\nimport useCardActions from '@/hooks/card-actions.hook'\nimport CommonTaskSuccessTip from '@/views/biz-modals/common/task/success-tip'\nimport useInternalNoteActions from '@/hooks/shop/sold-internal-note-actions.hook'\nimport soldMemberCardActions from '@/hooks/sold/member-card-actions.hook'\nimport { PrintService } from '@/services/print.service'\nexport default {\n  name: 'PageShopSoldCardMemberList',\n  mixins: [tableMixin],\n  bem: {\n    basic: 'page-shop-sold'\n  },\n  components: {\n    StTotal\n  },\n  modals: {\n    SoldCardArea,\n    SoldCardFreeze,\n    SoldCardGiving,\n    SoldCardRefund,\n    SoldCardSetTime,\n    SoldCardTransfer,\n    CommonTaskSuccessTip,\n    SoldCardBatchArea,\n    SoldCardBatchEnterTime,\n    SoldCardExtendDay,\n    SoldCardMemberReactive,\n    SoldCardReactive\n  },\n  serviceInject() {\n    return {\n      memberService: MemberService,\n      printService: PrintService\n    }\n  },\n  rxState() {\n    return {\n      loading: this.memberService.loading$,\n      list: this.memberService.list$,\n      page: this.memberService.page$,\n      cardTypes: this.memberService.cardTypes$,\n      cardStatus: this.memberService.cardStatus$,\n      isOpens: this.memberService.isOpens$,\n      total: this.memberService.total$,\n      auth: this.memberService.auth$\n    }\n  },\n  beforeCreate() {\n    this.cardActions.$on('refresh', val => {\n      this.$router.reload()\n    })\n  },\n  hooks() {\n    return {\n      cardActions: useCardActions(),\n      internalNoteActions: useInternalNoteActions(),\n      soldMemberCardActions: soldMemberCardActions(this)\n    }\n  },\n  computed: {\n    conditions() {\n      let conditions = {\n        ...this.$searchQuery,\n        is_valid: this.$searchQuery.card_status\n      }\n      return conditions\n    },\n    columns,\n    totalColumns,\n    // 列表选择的卡是否一致\n    isUnifyCard() {\n      return (\n        this.selectedRows.length > 0 &&\n        this.selectedRows.every(\n          o => o.card_type === this.selectedRows[0].card_type\n        )\n      )\n    }\n  },\n  data() {\n    return {\n      action: {\n        /**\n         * 赠送额度\n         */\n        giving: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n        /**\n         * 变更入场vip区域\n         */\n        area: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n        /**\n         * 变更入场vip区域\n         */\n        endTime: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n        /**\n         * 延长卡有效期\n         */\n        extendDay: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n        /**\n         * 重新激活\n         */\n        reactive: {\n          isAvaliable: false,\n          isShowTip: false\n        }\n      },\n      // 结束时间面板是否显示\n      endOpen: false,\n      selectedRowKeys: [],\n      selectedRows: [],\n      // diffSelectedRows: [],\n      date: [],\n      buyDate: [],\n      expireDate: []\n    }\n  },\n  mounted() {\n    this.setSearchData()\n  },\n  watch: {\n    query(newVal) {\n      this.setSearchData()\n    }\n  },\n  methods: {\n    disabledSelect(record) {\n      return false\n    },\n    // 查询\n    onSearchNative() {\n      this.$searchQuery.start_time = this.date[0]\n        ? `${this.date[0].format('YYYY-MM-DD')} 00:00:00`\n        : ''\n      this.$searchQuery.end_time = this.date[1]\n        ? `${this.date[1].format('YYYY-MM-DD')} 23:59:59`\n        : ''\n      this.$searchQuery.buy_start_time = this.buyDate[0]\n        ? `${this.buyDate[0].format('YYYY-MM-DD')} 00:00:00`\n        : ''\n      this.$searchQuery.buy_end_time = this.buyDate[1]\n        ? `${this.buyDate[1].format('YYYY-MM-DD')} 23:59:59`\n        : ''\n      this.$searchQuery.expire_start_time = this.expireDate[0]\n        ? `${this.expireDate[0].format('YYYY-MM-DD')} 00:00:00`\n        : ''\n      this.$searchQuery.expire_end_time = this.expireDate[1]\n        ? `${this.expireDate[1].format('YYYY-MM-DD')} 23:59:59`\n        : ''\n      this.onSearch()\n    },\n    onSearchResetNative() {\n      this.date = [null, null]\n      this.buyDate = [null, null]\n      this.expireDate = [null, null]\n      this.onSearchReset()\n    },\n    // 设置searchData\n    setSearchData() {\n      const start = this.$searchQuery.start_time\n        ? cloneDeep(moment(this.$searchQuery.start_time))\n        : null\n      const end = this.$searchQuery.end_time\n        ? cloneDeep(moment(this.$searchQuery.end_time))\n        : null\n      const expireStart = this.$searchQuery.expire_start_time\n        ? cloneDeep(moment(this.$searchQuery.expire_start_time))\n        : null\n      const expireEnd = this.$searchQuery.expire_end_time\n        ? cloneDeep(moment(this.$searchQuery.expire_end_time))\n        : null\n      const buyStart = this.$searchQuery.buy_start_time\n        ? moment(this.$searchQuery.buy_start_time)\n        : null\n      const buyEnd = this.$searchQuery.buy_end_time\n        ? moment(this.$searchQuery.buy_end_time)\n        : null\n      this.date = [start, end]\n      this.expireDate = [expireStart, expireEnd]\n      this.buyDate = [buyStart, buyEnd]\n    },\n    // moment\n    moment,\n    // 列表选择\n    onSelectChange(selectedRowKeys, selectedRows) {\n      this.checkSelectedRows(selectedRows, 'card_type', 'giving', () => {\n        let isAvaliable\n        const firstItem = selectedRows[0]\n        const diffSelectedRows = selectedRows.filter(\n          item => item.card_type !== firstItem.card_type\n        )\n        return !diffSelectedRows.length\n      })\n      this.checkSelectedRows(selectedRows, 'is_open', 'area', () => {\n        return !selectedRows.filter(item => !item.is_open).length\n      })\n      this.checkSelectedRows(selectedRows, 'is_open', 'endTime', () => {\n        return !selectedRows.filter(item => !item.is_open).length\n      })\n      this.checkSelectedRows(selectedRows, 'is_open', 'extendDay', () => {\n        return !selectedRows.filter(item => !item.is_open).length\n      })\n      this.checkSelectedRows(selectedRows, 'is_open', 'reactive', () => {\n        return (\n          selectedRows.filter(\n            item => item.card_status === 2 && item.is_refund.id === 0\n          ).length === selectedRows.length\n        )\n      })\n      this.selectedRowKeys = selectedRowKeys\n      this.selectedRows = selectedRows\n    },\n    checkSelectedRows(selectedRows, key, targetDataKey, checkFn) {\n      this.action[targetDataKey].isShowTip = false\n      const isAvaliable = checkFn()\n      this.action[targetDataKey].isAvaliable =\n        selectedRows.length && isAvaliable\n      if (!isAvaliable) {\n        this.action[targetDataKey].isShowTip = true\n        const timerKey = `timer_${targetDataKey}`\n        clearTimeout(this[timerKey])\n        this[timerKey] = setTimeout(() => {\n          this.action[targetDataKey].isShowTip = false\n        }, 2000)\n      }\n    },\n    // 详情\n    onDetail(record) {\n      this.$router.push({\n        path: `/shop/sold/card/info/member/info/operation-record`,\n        query: { id: record.id, card_type: record.card_type }\n      })\n    },\n    // 冻结\n    onFreeze(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-freeze',\n        props: {\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 取消冻结\n    onUnfreeze(record) {\n      this.$confirm({\n        title: '提示',\n        content: '是否取消冻结？',\n        maskClosable: true,\n        onOk: () => {\n          return this.memberService\n            .unFreeze(record.id)\n            .toPromise()\n            .then(() => {\n              this.$router.reload()\n            })\n        }\n      })\n    },\n    // 退款\n    onRefund(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-refund',\n        props: {\n          type: 'member',\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 重新激活\n    onReactive(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-member-reactive',\n        props: {\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 跳转合同\n    toContract(record) {\n      let url = `${window.location.origin}/common/contract-preview?id=${record.order_id}`\n      window.open(url)\n    },\n    // 转让\n    onTransfer(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-transfer',\n        props: {\n          id: record.id,\n          type: 'member'\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 修改有效时间\n    onSetTime(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-set-time',\n        props: {\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 变更vip入场区域\n    onArea(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-area',\n        props: {\n          id: [record.id]\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 批量变更vip入场区域\n    onAreas() {\n      this.$modalRouter.push({\n        name: 'sold-card-batch-area',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: cloneDeep(this.$searchQuery)\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    // 批量变更入场时间段\n    onEnterTime() {\n      this.$modalRouter.push({\n        name: 'sold-card-batch-enter-time',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: cloneDeep(this.$searchQuery)\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    // 额度赠送\n    onGiving() {\n      this.$modalRouter.push({\n        name: 'sold-card-giving',\n        props: {\n          ids: this.selectedRowKeys,\n          type: this.selectedRows[0].card_type,\n          unit: this.selectedRows[0].unit,\n          searchQuery: cloneDeep(this.$searchQuery)\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    successTip() {\n      this.$modalRouter.push({\n        name: 'common-task-success-tip',\n        on: {\n          success: () => {\n            this.$router.reload()\n            this.onClear()\n          }\n        }\n      })\n    },\n    onClear() {\n      this.selectedRowKeys = []\n      this.selectedRows = []\n    },\n    onExtendDays() {\n      this.$modalRouter.push({\n        name: 'sold-card-extend-day',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: this.$searchQuery\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    onReactiveBatch() {\n      this.$modalRouter.push({\n        name: 'sold-card-reactive',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: this.$searchQuery\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    }\n  }\n}\n",{"version":3,"sources":["member.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"member.vue","sourceRoot":"src/views/pages/shop/sold/card/list","sourcesContent":["<template>\n  <div :class=\"basic()\">\n    <portal to=\"SHOP_SOLD_CARD_LIST_ACTIONS\">\n      <st-input-search\n        v-model=\"$searchQuery.search\"\n        @search=\"onKeywordsSearch('search', $event)\"\n        placeholder=\"请输入卡名、合同编号、会员姓名或手机号查找\"\n        style=\"width: 380px;\"\n      />\n    </portal>\n    <st-search-panel @search=\"onSearchNative\" @reset=\"onSearchResetNative\">\n      <st-search-panel-item :label=\"`${$c('member_card')}类型：`\">\n        <st-search-radio\n          v-model=\"$searchQuery.card_type\"\n          :options=\"cardTypes\"\n        />\n      </st-search-panel-item>\n      <st-search-panel-item :label=\"`${$c('member_card')}状态：`\">\n        <st-search-radio\n          v-model=\"$searchQuery.card_status\"\n          :options=\"cardStatus\"\n        />\n      </st-search-panel-item>\n      <st-search-panel-item label=\"开卡状态：\">\n        <st-search-radio v-model=\"$searchQuery.is_open\" :options=\"isOpens\" />\n      </st-search-panel-item>\n      <div slot=\"more\">\n        <st-search-panel-item label=\"到期时间：\">\n          <st-range-picker :disabledDays=\"180\" v-model=\"expireDate\" />\n        </st-search-panel-item>\n        <st-search-panel-item label=\"开卡时间：\">\n          <st-range-picker :disabledDays=\"180\" v-model=\"date\" />\n        </st-search-panel-item>\n        <st-search-panel-item label=\"购买时间：\">\n          <st-range-picker :disabledDays=\"180\" v-model=\"buyDate\" />\n        </st-search-panel-item>\n      </div>\n    </st-search-panel>\n    <div :class=\"basic('content')\">\n      <div :class=\"basic('content-batch')\" class=\"mg-b16\">\n        <st-button\n          v-if=\"auth.export\"\n          type=\"primary\"\n          class=\"mg-r8\"\n          v-export-excel=\"{\n            type: 'sold/card/member',\n            query: { conditions: conditions }\n          }\"\n        >\n          全部导出\n        </st-button>\n\n        <st-help-tooltip\n          :isCustom=\"true\"\n          :title=\"`只支持一种类型且有效的${$c('member_card')}`\"\n          :defaultVisible=\"true\"\n          v-if=\"auth.gift\"\n          trigger=\"contextmenu\"\n          v-model=\"action.giving.isShowTip\"\n          @click=\"onGiving\"\n        >\n          <st-button\n            type=\"primary\"\n            class=\"mg-r8\"\n            :disabled=\"!action.giving.isAvaliable\"\n          >\n            赠送额度\n          </st-button>\n        </st-help-tooltip>\n        <st-help-tooltip\n          :isCustom=\"true\"\n          v-if=\"auth.vipRegion\"\n          :title=\"`只支持有效的${$c('member_card')}`\"\n          :defaultVisible=\"true\"\n          trigger=\"contextmenu\"\n          v-model=\"action.area.isShowTip\"\n        >\n          <st-button\n            type=\"primary\"\n            class=\"mg-r8\"\n            :disabled=\"!action.area.isAvaliable\"\n            @click=\"onAreas\"\n          >\n            变更入场vip区域\n          </st-button>\n        </st-help-tooltip>\n        <st-help-tooltip\n          v-if=\"auth.batch_admission\"\n          :isCustom=\"true\"\n          :title=\"`只支持有效的${$c('member_card')}`\"\n          :defaultVisible=\"true\"\n          trigger=\"contextmenu\"\n          v-model=\"action.endTime.isShowTip\"\n        >\n          <st-button\n            type=\"primary\"\n            class=\"mg-r8\"\n            :disabled=\"!action.endTime.isAvaliable\"\n            @click=\"onEnterTime\"\n          >\n            变更入场时段\n          </st-button>\n        </st-help-tooltip>\n        <st-help-tooltip\n          v-if=\"auth.extendDay\"\n          :isCustom=\"true\"\n          :title=\"`只支持已开卡且有效的${$c('member_card')}`\"\n          :defaultVisible=\"true\"\n          trigger=\"contextmenu\"\n          v-model=\"action.extendDay.isShowTip\"\n        >\n          <st-button\n            type=\"primary\"\n            class=\"mg-r8\"\n            @click=\"onExtendDays\"\n            :disabled=\"!action.extendDay.isAvaliable\"\n          >\n            延长有效期\n          </st-button>\n        </st-help-tooltip>\n        <st-help-tooltip\n          v-if=\"auth.reactive\"\n          :isCustom=\"true\"\n          :title=\"`只支持过期失效且未退款的${$c('member_card')}`\"\n          :defaultVisible=\"true\"\n          placement=\"bottom\"\n          trigger=\"contextmenu\"\n          v-model=\"action.reactive.isShowTip\"\n        >\n          <st-button\n            type=\"primary\"\n            class=\"mg-r8\"\n            :disabled=\"!action.reactive.isAvaliable\"\n            @click=\"onReactiveBatch\"\n          >\n            重新激活\n          </st-button>\n        </st-help-tooltip>\n      </div>\n      <st-total\n        :indexs=\"totalColumns\"\n        :dataSource=\"total\"\n        hasTitle\n        class=\"mg-b16\"\n      ></st-total>\n      <div>\n        <st-table\n          :page=\"page\"\n          :loading=\"loading.getList\"\n          :alertSelection=\"{ onReset: onClear }\"\n          :rowSelection=\"{\n            selectedRowKeys: selectedRowKeys,\n            fixed: true,\n            onChange: onSelectChange,\n            getCheckboxProps: record => ({\n              props: {\n                disabled: disabledSelect(record) // Column configuration not to be checked\n              }\n            })\n          }\"\n          rowKey=\"id\"\n          @change=\"onTableChange\"\n          :columns=\"columns\"\n          :dataSource=\"list\"\n          :scroll=\"{ x: 1880 }\"\n        >\n          <template slot=\"card_name\" slot-scope=\"text, record\">\n            <st-link\n              :value=\"text\"\n              :disabled=\"!record.auth['shop:sold:sold_member_card|get']\"\n              @click=\"onDetail(record)\"\n            ></st-link>\n          </template>\n          <template slot=\"sex\" slot-scope=\"text\">\n            {{ text | enumFilter('staff.sex') }}\n          </template>\n          <template slot=\"remain_amount\" slot-scope=\"text, record\">\n            {{ text }}{{ record.unit | enumFilter('sold_common.unit') }}\n          </template>\n          <template slot=\"is_refund\" slot-scope=\"text\">\n            {{ text.name }}\n          </template>\n          <template slot=\"init_amount\" slot-scope=\"text, record\">\n            {{ text }}{{ record.unit | enumFilter('sold_common.unit') }}\n          </template>\n          <template slot=\"card_status\" slot-scope=\"text\">\n            <st-text\n              :status=\"{\n                success: text === 1,\n                error: text === 2,\n                warning: text === 3\n              }\"\n            >\n              {{ text | enumFilter('sold_common.card_status') }}\n            </st-text>\n          </template>\n          <template slot=\"member_name\" slot-scope=\"text, record\">\n            <template v-if=\"record.is_minors\">\n              <span class=\"word-break\">{{ record.member_name }}(未成年)</span>\n            </template>\n            <template v-else>\n              <span class=\"word-break\">{{ record.member_name }}</span>\n            </template>\n          </template>\n          <template slot=\"mobile\" slot-scope=\"text, record\">\n            <template v-if=\"record.is_minors\">\n              {{ record.parent_mobile }}({{ record.parent_user_role }})\n            </template>\n            <template v-else>\n              {{ record.mobile }}\n            </template>\n          </template>\n          <template slot=\"sell_time\" slot-scope=\"text, record\">\n            <span class=\"word-break\">\n              {{ record.start_time }} ~ {{ record.end_time }}\n            </span>\n          </template>\n          <template slot=\"is_open\" slot-scope=\"text\">\n            {{ text | enumFilter('sold_common.is_open') }}\n          </template>\n          <div slot=\"action\" slot-scope=\"text, record\">\n            <st-table-actions>\n              <a\n                v-if=\"record.auth['shop:sold:sold_member_card|get']\"\n                @click=\"onDetail(record)\"\n              >\n                详情\n              </a>\n              <a\n                v-if=\"record.auth['shop:sold:sold_member_card|upgrade']\"\n                @click=\"cardActions.upgradeCard(record)\"\n              >\n                升级\n              </a>\n              <a\n                v-if=\"record.auth['shop:sold:sold_member_card|renew']\"\n                @click=\"cardActions.onRenewal(record)\"\n              >\n                续卡\n              </a>\n              <a\n                v-if=\"record.auth['shop:sold:sold_member_card|vaild_time']\"\n                @click=\"onSetTime(record)\"\n              >\n                修改有效时间\n              </a>\n              <a\n                v-if=\"record.auth['shop:sold:sold_member_card|reactivate']\"\n                @click=\"onReactive(record)\"\n              >\n                重新激活\n              </a>\n              <a\n                v-if=\"record.auth['shop:sold:sold_member_card|frozen']\"\n                @click=\"onFreeze(record)\"\n              >\n                冻结\n              </a>\n              <a\n                v-if=\"record.auth['shop:sold:sold_member_card|unfrozen']\"\n                @click=\"onUnfreeze(record)\"\n              >\n                取消冻结\n              </a>\n              <a\n                v-if=\"record.auth['shop:sold:sold_member_card|transfer']\"\n                @click=\"onTransfer(record)\"\n              >\n                转让\n              </a>\n              <a\n                v-if=\"record.auth['brand_shop:order:order|refund']\"\n                @click=\"onRefund(record)\"\n              >\n                退款\n              </a>\n              <a\n                v-if=\"record.auth['shop:sold:sold_member_card|export_contract']\"\n                @click=\"toContract(record)\"\n              >\n                查看合同\n              </a>\n              <a\n                v-if=\"record.auth['shop:sold:sold_member_card|vip_region']\"\n                @click=\"onArea(record)\"\n              >\n                修改入场vip区域\n              </a>\n              <a\n                v-if=\"record.auth['shop:sold:sold_member_card|edit']\"\n                @click=\"cardActions.onChangeMember(record)\"\n              >\n                变更成员\n              </a>\n              <a\n                v-if=\"\n                  record.auth['shop:sold:sold_member_card|internal_description']\n                \"\n                @click=\"internalNoteActions.onOpenModal(record)\"\n              >\n                对内备注\n              </a>\n              <a\n                v-if=\"record.auth['shop:sold:sold_member_card|rights_edit']\"\n                @click=\"soldMemberCardActions.onUpdateRights(record.id)\"\n              >\n                修改权益\n              </a>\n              <a\n                v-if=\"record.auth['shop:order:order|print']\"\n                @click=\"printService.printSmallTicket(record.order_id)\"\n              >\n                打印小票\n              </a>\n            </st-table-actions>\n          </div>\n        </st-table>\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport moment from 'moment'\nimport { cloneDeep, filter } from 'lodash-es'\nimport { MemberService } from './member.service'\nimport tableMixin from '@/mixins/table.mixin'\nimport { columns, totalColumns } from './member.config'\nimport StTotal from '@/views/components/total#/total.vue'\nimport SoldCardArea from '@/views/biz-modals/sold/card/area'\nimport SoldCardBatchArea from '@/views/biz-modals/sold/card/batch-area'\nimport SoldCardBatchEnterTime from '@/views/biz-modals/sold/card/batch-enter-time'\nimport SoldCardFreeze from '@/views/biz-modals/sold/card/freeze'\nimport SoldCardGiving from '@/views/biz-modals/sold/card/giving'\nimport SoldCardRefund from '@/views/biz-modals/sold/card/refund'\nimport SoldCardSetTime from '@/views/biz-modals/sold/card/set-time'\nimport SoldCardTransfer from '@/views/biz-modals/sold/card/transfer'\nimport SoldCardExtendDay from '@/views/biz-modals/sold/card/extend-day'\nimport SoldCardReactive from '@/views/biz-modals/sold/card/reactive'\nimport SoldCardMemberReactive from '@/views/biz-modals/sold/card/member/reactive'\nimport useCardActions from '@/hooks/card-actions.hook'\nimport CommonTaskSuccessTip from '@/views/biz-modals/common/task/success-tip'\nimport useInternalNoteActions from '@/hooks/shop/sold-internal-note-actions.hook'\nimport soldMemberCardActions from '@/hooks/sold/member-card-actions.hook'\nimport { PrintService } from '@/services/print.service'\nexport default {\n  name: 'PageShopSoldCardMemberList',\n  mixins: [tableMixin],\n  bem: {\n    basic: 'page-shop-sold'\n  },\n  components: {\n    StTotal\n  },\n  modals: {\n    SoldCardArea,\n    SoldCardFreeze,\n    SoldCardGiving,\n    SoldCardRefund,\n    SoldCardSetTime,\n    SoldCardTransfer,\n    CommonTaskSuccessTip,\n    SoldCardBatchArea,\n    SoldCardBatchEnterTime,\n    SoldCardExtendDay,\n    SoldCardMemberReactive,\n    SoldCardReactive\n  },\n  serviceInject() {\n    return {\n      memberService: MemberService,\n      printService: PrintService\n    }\n  },\n  rxState() {\n    return {\n      loading: this.memberService.loading$,\n      list: this.memberService.list$,\n      page: this.memberService.page$,\n      cardTypes: this.memberService.cardTypes$,\n      cardStatus: this.memberService.cardStatus$,\n      isOpens: this.memberService.isOpens$,\n      total: this.memberService.total$,\n      auth: this.memberService.auth$\n    }\n  },\n  beforeCreate() {\n    this.cardActions.$on('refresh', val => {\n      this.$router.reload()\n    })\n  },\n  hooks() {\n    return {\n      cardActions: useCardActions(),\n      internalNoteActions: useInternalNoteActions(),\n      soldMemberCardActions: soldMemberCardActions(this)\n    }\n  },\n  computed: {\n    conditions() {\n      let conditions = {\n        ...this.$searchQuery,\n        is_valid: this.$searchQuery.card_status\n      }\n      return conditions\n    },\n    columns,\n    totalColumns,\n    // 列表选择的卡是否一致\n    isUnifyCard() {\n      return (\n        this.selectedRows.length > 0 &&\n        this.selectedRows.every(\n          o => o.card_type === this.selectedRows[0].card_type\n        )\n      )\n    }\n  },\n  data() {\n    return {\n      action: {\n        /**\n         * 赠送额度\n         */\n        giving: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n        /**\n         * 变更入场vip区域\n         */\n        area: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n        /**\n         * 变更入场vip区域\n         */\n        endTime: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n        /**\n         * 延长卡有效期\n         */\n        extendDay: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n        /**\n         * 重新激活\n         */\n        reactive: {\n          isAvaliable: false,\n          isShowTip: false\n        }\n      },\n      // 结束时间面板是否显示\n      endOpen: false,\n      selectedRowKeys: [],\n      selectedRows: [],\n      // diffSelectedRows: [],\n      date: [],\n      buyDate: [],\n      expireDate: []\n    }\n  },\n  mounted() {\n    this.setSearchData()\n  },\n  watch: {\n    query(newVal) {\n      this.setSearchData()\n    }\n  },\n  methods: {\n    disabledSelect(record) {\n      return false\n    },\n    // 查询\n    onSearchNative() {\n      this.$searchQuery.start_time = this.date[0]\n        ? `${this.date[0].format('YYYY-MM-DD')} 00:00:00`\n        : ''\n      this.$searchQuery.end_time = this.date[1]\n        ? `${this.date[1].format('YYYY-MM-DD')} 23:59:59`\n        : ''\n      this.$searchQuery.buy_start_time = this.buyDate[0]\n        ? `${this.buyDate[0].format('YYYY-MM-DD')} 00:00:00`\n        : ''\n      this.$searchQuery.buy_end_time = this.buyDate[1]\n        ? `${this.buyDate[1].format('YYYY-MM-DD')} 23:59:59`\n        : ''\n      this.$searchQuery.expire_start_time = this.expireDate[0]\n        ? `${this.expireDate[0].format('YYYY-MM-DD')} 00:00:00`\n        : ''\n      this.$searchQuery.expire_end_time = this.expireDate[1]\n        ? `${this.expireDate[1].format('YYYY-MM-DD')} 23:59:59`\n        : ''\n      this.onSearch()\n    },\n    onSearchResetNative() {\n      this.date = [null, null]\n      this.buyDate = [null, null]\n      this.expireDate = [null, null]\n      this.onSearchReset()\n    },\n    // 设置searchData\n    setSearchData() {\n      const start = this.$searchQuery.start_time\n        ? cloneDeep(moment(this.$searchQuery.start_time))\n        : null\n      const end = this.$searchQuery.end_time\n        ? cloneDeep(moment(this.$searchQuery.end_time))\n        : null\n      const expireStart = this.$searchQuery.expire_start_time\n        ? cloneDeep(moment(this.$searchQuery.expire_start_time))\n        : null\n      const expireEnd = this.$searchQuery.expire_end_time\n        ? cloneDeep(moment(this.$searchQuery.expire_end_time))\n        : null\n      const buyStart = this.$searchQuery.buy_start_time\n        ? moment(this.$searchQuery.buy_start_time)\n        : null\n      const buyEnd = this.$searchQuery.buy_end_time\n        ? moment(this.$searchQuery.buy_end_time)\n        : null\n      this.date = [start, end]\n      this.expireDate = [expireStart, expireEnd]\n      this.buyDate = [buyStart, buyEnd]\n    },\n    // moment\n    moment,\n    // 列表选择\n    onSelectChange(selectedRowKeys, selectedRows) {\n      this.checkSelectedRows(selectedRows, 'card_type', 'giving', () => {\n        let isAvaliable\n        const firstItem = selectedRows[0]\n        const diffSelectedRows = selectedRows.filter(\n          item => item.card_type !== firstItem.card_type\n        )\n        return !diffSelectedRows.length\n      })\n      this.checkSelectedRows(selectedRows, 'is_open', 'area', () => {\n        return !selectedRows.filter(item => !item.is_open).length\n      })\n      this.checkSelectedRows(selectedRows, 'is_open', 'endTime', () => {\n        return !selectedRows.filter(item => !item.is_open).length\n      })\n      this.checkSelectedRows(selectedRows, 'is_open', 'extendDay', () => {\n        return !selectedRows.filter(item => !item.is_open).length\n      })\n      this.checkSelectedRows(selectedRows, 'is_open', 'reactive', () => {\n        return (\n          selectedRows.filter(\n            item => item.card_status === 2 && item.is_refund.id === 0\n          ).length === selectedRows.length\n        )\n      })\n      this.selectedRowKeys = selectedRowKeys\n      this.selectedRows = selectedRows\n    },\n    checkSelectedRows(selectedRows, key, targetDataKey, checkFn) {\n      this.action[targetDataKey].isShowTip = false\n      const isAvaliable = checkFn()\n      this.action[targetDataKey].isAvaliable =\n        selectedRows.length && isAvaliable\n      if (!isAvaliable) {\n        this.action[targetDataKey].isShowTip = true\n        const timerKey = `timer_${targetDataKey}`\n        clearTimeout(this[timerKey])\n        this[timerKey] = setTimeout(() => {\n          this.action[targetDataKey].isShowTip = false\n        }, 2000)\n      }\n    },\n    // 详情\n    onDetail(record) {\n      this.$router.push({\n        path: `/shop/sold/card/info/member/info/operation-record`,\n        query: { id: record.id, card_type: record.card_type }\n      })\n    },\n    // 冻结\n    onFreeze(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-freeze',\n        props: {\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 取消冻结\n    onUnfreeze(record) {\n      this.$confirm({\n        title: '提示',\n        content: '是否取消冻结？',\n        maskClosable: true,\n        onOk: () => {\n          return this.memberService\n            .unFreeze(record.id)\n            .toPromise()\n            .then(() => {\n              this.$router.reload()\n            })\n        }\n      })\n    },\n    // 退款\n    onRefund(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-refund',\n        props: {\n          type: 'member',\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 重新激活\n    onReactive(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-member-reactive',\n        props: {\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 跳转合同\n    toContract(record) {\n      let url = `${window.location.origin}/common/contract-preview?id=${record.order_id}`\n      window.open(url)\n    },\n    // 转让\n    onTransfer(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-transfer',\n        props: {\n          id: record.id,\n          type: 'member'\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 修改有效时间\n    onSetTime(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-set-time',\n        props: {\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 变更vip入场区域\n    onArea(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-area',\n        props: {\n          id: [record.id]\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 批量变更vip入场区域\n    onAreas() {\n      this.$modalRouter.push({\n        name: 'sold-card-batch-area',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: cloneDeep(this.$searchQuery)\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    // 批量变更入场时间段\n    onEnterTime() {\n      this.$modalRouter.push({\n        name: 'sold-card-batch-enter-time',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: cloneDeep(this.$searchQuery)\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    // 额度赠送\n    onGiving() {\n      this.$modalRouter.push({\n        name: 'sold-card-giving',\n        props: {\n          ids: this.selectedRowKeys,\n          type: this.selectedRows[0].card_type,\n          unit: this.selectedRows[0].unit,\n          searchQuery: cloneDeep(this.$searchQuery)\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    successTip() {\n      this.$modalRouter.push({\n        name: 'common-task-success-tip',\n        on: {\n          success: () => {\n            this.$router.reload()\n            this.onClear()\n          }\n        }\n      })\n    },\n    onClear() {\n      this.selectedRowKeys = []\n      this.selectedRows = []\n    },\n    onExtendDays() {\n      this.$modalRouter.push({\n        name: 'sold-card-extend-day',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: this.$searchQuery\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    onReactiveBatch() {\n      this.$modalRouter.push({\n        name: 'sold-card-reactive',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: this.$searchQuery\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    }\n  }\n}\n</script>\n"]}]}