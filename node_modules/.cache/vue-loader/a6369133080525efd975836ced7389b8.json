{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/st/image-upload/image-upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/st/image-upload/image-upload.vue","mtime":1596188219485},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { OssService } from '@/services/oss.service'\nimport { AppConfig } from '@/constants/config'\nimport { MessageService } from '@/services/message.service'\nimport ImageCropper from '@/views/biz-modals/image-cropper.vue'\nimport 'viewerjs/dist/viewer.css'\nimport Viewer from 'v-viewer/src/component.vue'\n\nconst defaultSize = {\n  w: '182px',\n  h: '114px'\n}\nexport default {\n  name: 'StImageUpload',\n  serviceInject() {\n    return {\n      oss: OssService,\n      appConfig: AppConfig,\n      messageService: MessageService\n    }\n  },\n  modals: {\n    ImageCropper\n  },\n  props: {\n    /**\n     * 上传按钮的文字\n     */\n    placeholder: {\n      type: String,\n      default: '上传照片'\n    },\n    /**\n     * 上传规则描述\n     */\n    description: {\n      type: String,\n      default: ''\n    },\n    /**\n     * 截图模态窗 相关选项\n     */\n    cropperModal: {\n      type: Object\n    },\n    /**\n     * 最多可上传图片数量\n     */\n    numLimit: {\n      type: Number,\n      default: 1\n    },\n    /**\n     * 单张图片最大 size，单位 M\n     */\n    sizeLimit: {\n      type: Number,\n      default: 2\n    },\n    /**\n     * 图片类型\n     */\n    fileType: {\n      type: String,\n      default: 'jpg, jpeg, png, bmp'\n    },\n    /**\n     * 图片及上传按钮的宽度\n     */\n    width: {\n      type: String,\n      default: defaultSize.w\n    },\n    /**\n     * 图片及上传按钮的宽度\n     */\n    height: {\n      type: String,\n      default: defaultSize.h\n    },\n    /**\n     * 初始图片列表 example: [{ image_id: 10000, image_key: 'http://styd-saas-test.oss-cn-shanghai.aliyuncs.com/image/pLOFb5kCPN4gPQ8H',image_url:'http://...' }]\n     */\n    list: {\n      type: Array,\n      default: () => []\n    },\n    /**\n     * 缩略图filter选项 同imgFilter选项\n     */\n    filterOptions: {\n      type: Object,\n      default: () => ({})\n    },\n    /**\n     * 是否使用oss私有空间\n     */\n    isPrivate: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * 预览时是否需要加上蒙版 蒙版和上传的图片一样大小\n     * flag 是否需要加上蒙版\n     * width 图片绘制宽度\n     * height 图片绘制高度\n     * maskUrl 蒙版的url\n     */\n    maskOptions: {\n      type: Object\n      // default: () => ({\n      //   width: 750,\n      //   height: 1334,\n      //   maskUrl: 'https://styd-saas-test.oss-cn-shanghai.aliyuncs.com/image/default/bg-invitation-4.png'\n      // })\n    },\n    /**\n     * 后端字段映射 image_id,image_key,image_url\n     */\n    props: {\n      type: Object,\n      default: () => ({\n        image_id: 'image_id',\n        image_key: 'image_key',\n        image_url: 'image_url',\n        image_host: 'image_host'\n      })\n    }\n  },\n  data() {\n    return {\n      fileList: [],\n      isLoading: false,\n      progress: 0,\n      defaultMaskOptions: {\n        width: 750,\n        height: 1334,\n        maskUrl:\n          'https://styd-saas-test.oss-cn-shanghai.aliyuncs.com/image/default/bg-invitation-4.png'\n      }\n    }\n  },\n  computed: {\n    imageId() {\n      return this.props.image_id\n    },\n    imageKey() {\n      return this.props.image_key\n    },\n    imageUrl() {\n      return this.props.image_url\n    },\n    imageHost() {\n      return this.props.image_host\n    },\n    isShowUploadBtn() {\n      return this.fileList.length < this.numLimit\n    },\n    isShowFileList() {\n      return this.fileList.length\n    },\n    isUploadBtnInvisible() {\n      return this.numLimit === 1 && this.fileList.length\n    },\n    sizeStyle() {\n      return `width: ${this.width};  height: ${this.height}`\n    },\n    computedFilterOptions() {\n      const w = parseInt(this.width) * 2\n      const h = parseInt(this.height) * 2\n      return Object.assign({ w, h }, this.filterOptions)\n    }\n  },\n  watch: {\n    list(newList) {\n      this.fileList = this.list\n    }\n  },\n  mounted() {\n    this.fileList = new Array(...this.list)\n    if (this.maskOptions && this.fileList.length > 0) {\n      this.maskOptions = Object.assign(\n        this.maskOptions,\n        this.defaultMaskOptions\n      )\n      this.drawMaskImage(this.fileList[0][this.imageUrl]).then(resSrc => {\n        this.fileList[0][this.imageUrl] = resSrc\n      })\n    }\n  },\n  methods: {\n    onReUpload(e) {\n      console.log(e)\n      if (!e.target.files || !e.target.files.length) {\n        return\n      }\n      this.upload({\n        file: e.target.files[0]\n      })\n    },\n    upload(data) {\n      const fileCheckRet = this.fileCheck(data)\n      if (!fileCheckRet.isValid) {\n        this.messageService.error({ content: fileCheckRet.msg })\n        return\n      }\n      if (this.cropperModal) {\n        this.processCropper(data)\n      } else {\n        this.processUpload(data)\n      }\n    },\n    processCropper(data) {\n      this.$modalRouter.push({\n        name: 'image-cropper',\n        props: {\n          file: data.file,\n          ...this.cropperModal\n        },\n        on: {\n          ok: res => {\n            const croppedData = res\n            this.processUpload(croppedData)\n          }\n        }\n      })\n    },\n    processUpload(data) {\n      this.isLoading = true\n      // 业务\n      this.oss\n        .put({\n          business: 'image',\n          isPrivate: this.isPrivate,\n          file: data.file,\n          uploadProgress: e => {\n            this.progress = parseInt((e.loaded / e.total) * 100)\n          }\n        })\n        .subscribe({\n          next: val => {\n            console.log(val)\n            if (this.maskOptions) {\n              this.drawMaskImage(val.url).then(resSrc => {\n                this.fileList.push({\n                  [this.imageId]: 0,\n                  [this.imageKey]: val.fileKey,\n                  [this.imageHost]: val.host,\n                  [this.imageUrl]: resSrc\n                })\n                this.$emit('change', this.fileList)\n              })\n            } else {\n              this.fileList.push({\n                [this.imageId]: 0,\n                [this.imageKey]: val.fileKey,\n                [this.imageHost]: val.host,\n                [this.imageUrl]: val.url\n              })\n              this.$emit('change', this.fileList)\n            }\n          },\n          error: val => {\n            this.messageService.error({ content: `Error ${val.message}` })\n            this.isLoading = false\n          },\n          complete: () => {\n            this.isLoading = false\n          }\n        })\n    },\n    onDel(index) {\n      const { fileList } = this\n      const deletedFile = fileList.splice(index, 1)\n      this.fileList = fileList\n      this.$emit('delete', deletedFile[0])\n      this.$emit('change', this.fileList)\n    },\n    fileCheck(data) {\n      const { size, type } = data.file\n      const { sizeLimit, fileType } = this\n      if (!fileType.includes(type.split('/')[1])) {\n        return {\n          isValid: false,\n          msg: `请上传${fileType}格式的文件`\n        }\n      }\n      console.log(size, sizeLimit)\n      if (size > sizeLimit * 1024 * 1024) {\n        return {\n          isValid: false,\n          msg: `最大不能超过${sizeLimit}M`\n        }\n      }\n      return {\n        isValid: true\n      }\n    },\n    drawMaskImage(userImgSrc) {\n      const myCanvas = document.getElementById('myCanvas')\n      const ctx = myCanvas.getContext('2d')\n      ctx.globalCompositeOperation = 'source-over'\n      const logo_img = new Image()\n      logo_img.setAttribute('crossOrigin', 'anonymous')\n      logo_img.src = this.maskOptions.maskUrl\n      const user_img = new Image()\n      user_img.setAttribute('crossOrigin', 'anonymous')\n      user_img.src = userImgSrc\n      const promise1 = new Promise((resolve, reject) => {\n        logo_img.onload = () => {\n          resolve()\n        }\n      })\n      const promise2 = new Promise((resolve, reject) => {\n        user_img.onload = () => {\n          resolve()\n        }\n      })\n      return new Promise((resolve, reject) => {\n        Promise.all([promise1, promise2]).then(result => {\n          ctx.clearRect(0, 0, myCanvas.width, myCanvas.height)\n          ctx.drawImage(\n            user_img,\n            0,\n            0,\n            this.maskOptions.width,\n            this.maskOptions.height\n          )\n          ctx.drawImage(\n            logo_img,\n            0,\n            0,\n            this.maskOptions.width,\n            this.maskOptions.height\n          )\n          ctx.stroke()\n          myCanvas.toBlob(function(blob) {\n            const objectURL = URL.createObjectURL(blob)\n            resolve(objectURL)\n          })\n        })\n      })\n    }\n  }\n}\n",{"version":3,"sources":["image-upload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"image-upload.vue","sourceRoot":"src/views/biz-components/st/image-upload","sourcesContent":["<template>\n  <div class=\"st-image-upload\">\n    <div\n      class=\"st-image-upload__item st-preview-item\"\n      v-for=\"(item, index) in fileList\"\n      v-viewer=\"{ url: 'data-src', toolbar: false }\"\n      :style=\"sizeStyle\"\n      :key=\"index\"\n    >\n      <img\n        class=\"st-image-upload__item-img\"\n        :src=\"\n          (item[imageUrl] || item[imageKey]) | imgFilter(computedFilterOptions)\n        \"\n        :data-src=\"(item[imageUrl] || item[imageKey]) | imgFilter\"\n        width=\"100%\"\n        height=\"100%\"\n      />\n      <slot name=\"item-extra\" :item=\"item\" :index=\"index\"></slot>\n      <div class=\"st-image-upload__actions\">\n        <slot name=\"actions\" :item=\"item\" :index=\"index\">\n          <span class=\"action action--re-upload\" @click=\"onDel(index)\">\n            <input type=\"file\" accept @change=\"onReUpload($event)\" />\n            重新上传\n          </span>\n          <!-- <span class=\"action\" @click=\"onDel(index)\">\n            删除\n          </span> -->\n        </slot>\n      </div>\n    </div>\n    <a-upload\n      v-show=\"isShowUploadBtn\"\n      listType=\"picture-card\"\n      :showUploadList=\"false\"\n      :customRequest=\"upload\"\n      class=\"st-image-upload__btn\"\n      :style=\"sizeStyle\"\n    >\n      <a-spin :spinning=\"isLoading\" :tip=\"progress + '%'\">\n        <slot>\n          <st-icon type=\"plus-circle\" size=\"32px\" color=\"#9BACB9\"></st-icon>\n          <div class=\"st-image-upload__placeholder\">{{ placeholder }}</div>\n          <div\n            v-if=\"description || $slots.description\"\n            class=\"st-image-upload__description\"\n          >\n            <slot name=\"description\">{{ description }}</slot>\n          </div>\n        </slot>\n      </a-spin>\n    </a-upload>\n    <canvas\n      id=\"myCanvas\"\n      v-if=\"maskOptions\"\n      :width=\"maskOptions.width\"\n      :height=\"maskOptions.height\"\n      v-show=\"false\"\n    ></canvas>\n  </div>\n</template>\n<script>\nimport { OssService } from '@/services/oss.service'\nimport { AppConfig } from '@/constants/config'\nimport { MessageService } from '@/services/message.service'\nimport ImageCropper from '@/views/biz-modals/image-cropper.vue'\nimport 'viewerjs/dist/viewer.css'\nimport Viewer from 'v-viewer/src/component.vue'\n\nconst defaultSize = {\n  w: '182px',\n  h: '114px'\n}\nexport default {\n  name: 'StImageUpload',\n  serviceInject() {\n    return {\n      oss: OssService,\n      appConfig: AppConfig,\n      messageService: MessageService\n    }\n  },\n  modals: {\n    ImageCropper\n  },\n  props: {\n    /**\n     * 上传按钮的文字\n     */\n    placeholder: {\n      type: String,\n      default: '上传照片'\n    },\n    /**\n     * 上传规则描述\n     */\n    description: {\n      type: String,\n      default: ''\n    },\n    /**\n     * 截图模态窗 相关选项\n     */\n    cropperModal: {\n      type: Object\n    },\n    /**\n     * 最多可上传图片数量\n     */\n    numLimit: {\n      type: Number,\n      default: 1\n    },\n    /**\n     * 单张图片最大 size，单位 M\n     */\n    sizeLimit: {\n      type: Number,\n      default: 2\n    },\n    /**\n     * 图片类型\n     */\n    fileType: {\n      type: String,\n      default: 'jpg, jpeg, png, bmp'\n    },\n    /**\n     * 图片及上传按钮的宽度\n     */\n    width: {\n      type: String,\n      default: defaultSize.w\n    },\n    /**\n     * 图片及上传按钮的宽度\n     */\n    height: {\n      type: String,\n      default: defaultSize.h\n    },\n    /**\n     * 初始图片列表 example: [{ image_id: 10000, image_key: 'http://styd-saas-test.oss-cn-shanghai.aliyuncs.com/image/pLOFb5kCPN4gPQ8H',image_url:'http://...' }]\n     */\n    list: {\n      type: Array,\n      default: () => []\n    },\n    /**\n     * 缩略图filter选项 同imgFilter选项\n     */\n    filterOptions: {\n      type: Object,\n      default: () => ({})\n    },\n    /**\n     * 是否使用oss私有空间\n     */\n    isPrivate: {\n      type: Boolean,\n      default: false\n    },\n    /**\n     * 预览时是否需要加上蒙版 蒙版和上传的图片一样大小\n     * flag 是否需要加上蒙版\n     * width 图片绘制宽度\n     * height 图片绘制高度\n     * maskUrl 蒙版的url\n     */\n    maskOptions: {\n      type: Object\n      // default: () => ({\n      //   width: 750,\n      //   height: 1334,\n      //   maskUrl: 'https://styd-saas-test.oss-cn-shanghai.aliyuncs.com/image/default/bg-invitation-4.png'\n      // })\n    },\n    /**\n     * 后端字段映射 image_id,image_key,image_url\n     */\n    props: {\n      type: Object,\n      default: () => ({\n        image_id: 'image_id',\n        image_key: 'image_key',\n        image_url: 'image_url',\n        image_host: 'image_host'\n      })\n    }\n  },\n  data() {\n    return {\n      fileList: [],\n      isLoading: false,\n      progress: 0,\n      defaultMaskOptions: {\n        width: 750,\n        height: 1334,\n        maskUrl:\n          'https://styd-saas-test.oss-cn-shanghai.aliyuncs.com/image/default/bg-invitation-4.png'\n      }\n    }\n  },\n  computed: {\n    imageId() {\n      return this.props.image_id\n    },\n    imageKey() {\n      return this.props.image_key\n    },\n    imageUrl() {\n      return this.props.image_url\n    },\n    imageHost() {\n      return this.props.image_host\n    },\n    isShowUploadBtn() {\n      return this.fileList.length < this.numLimit\n    },\n    isShowFileList() {\n      return this.fileList.length\n    },\n    isUploadBtnInvisible() {\n      return this.numLimit === 1 && this.fileList.length\n    },\n    sizeStyle() {\n      return `width: ${this.width};  height: ${this.height}`\n    },\n    computedFilterOptions() {\n      const w = parseInt(this.width) * 2\n      const h = parseInt(this.height) * 2\n      return Object.assign({ w, h }, this.filterOptions)\n    }\n  },\n  watch: {\n    list(newList) {\n      this.fileList = this.list\n    }\n  },\n  mounted() {\n    this.fileList = new Array(...this.list)\n    if (this.maskOptions && this.fileList.length > 0) {\n      this.maskOptions = Object.assign(\n        this.maskOptions,\n        this.defaultMaskOptions\n      )\n      this.drawMaskImage(this.fileList[0][this.imageUrl]).then(resSrc => {\n        this.fileList[0][this.imageUrl] = resSrc\n      })\n    }\n  },\n  methods: {\n    onReUpload(e) {\n      console.log(e)\n      if (!e.target.files || !e.target.files.length) {\n        return\n      }\n      this.upload({\n        file: e.target.files[0]\n      })\n    },\n    upload(data) {\n      const fileCheckRet = this.fileCheck(data)\n      if (!fileCheckRet.isValid) {\n        this.messageService.error({ content: fileCheckRet.msg })\n        return\n      }\n      if (this.cropperModal) {\n        this.processCropper(data)\n      } else {\n        this.processUpload(data)\n      }\n    },\n    processCropper(data) {\n      this.$modalRouter.push({\n        name: 'image-cropper',\n        props: {\n          file: data.file,\n          ...this.cropperModal\n        },\n        on: {\n          ok: res => {\n            const croppedData = res\n            this.processUpload(croppedData)\n          }\n        }\n      })\n    },\n    processUpload(data) {\n      this.isLoading = true\n      // 业务\n      this.oss\n        .put({\n          business: 'image',\n          isPrivate: this.isPrivate,\n          file: data.file,\n          uploadProgress: e => {\n            this.progress = parseInt((e.loaded / e.total) * 100)\n          }\n        })\n        .subscribe({\n          next: val => {\n            console.log(val)\n            if (this.maskOptions) {\n              this.drawMaskImage(val.url).then(resSrc => {\n                this.fileList.push({\n                  [this.imageId]: 0,\n                  [this.imageKey]: val.fileKey,\n                  [this.imageHost]: val.host,\n                  [this.imageUrl]: resSrc\n                })\n                this.$emit('change', this.fileList)\n              })\n            } else {\n              this.fileList.push({\n                [this.imageId]: 0,\n                [this.imageKey]: val.fileKey,\n                [this.imageHost]: val.host,\n                [this.imageUrl]: val.url\n              })\n              this.$emit('change', this.fileList)\n            }\n          },\n          error: val => {\n            this.messageService.error({ content: `Error ${val.message}` })\n            this.isLoading = false\n          },\n          complete: () => {\n            this.isLoading = false\n          }\n        })\n    },\n    onDel(index) {\n      const { fileList } = this\n      const deletedFile = fileList.splice(index, 1)\n      this.fileList = fileList\n      this.$emit('delete', deletedFile[0])\n      this.$emit('change', this.fileList)\n    },\n    fileCheck(data) {\n      const { size, type } = data.file\n      const { sizeLimit, fileType } = this\n      if (!fileType.includes(type.split('/')[1])) {\n        return {\n          isValid: false,\n          msg: `请上传${fileType}格式的文件`\n        }\n      }\n      console.log(size, sizeLimit)\n      if (size > sizeLimit * 1024 * 1024) {\n        return {\n          isValid: false,\n          msg: `最大不能超过${sizeLimit}M`\n        }\n      }\n      return {\n        isValid: true\n      }\n    },\n    drawMaskImage(userImgSrc) {\n      const myCanvas = document.getElementById('myCanvas')\n      const ctx = myCanvas.getContext('2d')\n      ctx.globalCompositeOperation = 'source-over'\n      const logo_img = new Image()\n      logo_img.setAttribute('crossOrigin', 'anonymous')\n      logo_img.src = this.maskOptions.maskUrl\n      const user_img = new Image()\n      user_img.setAttribute('crossOrigin', 'anonymous')\n      user_img.src = userImgSrc\n      const promise1 = new Promise((resolve, reject) => {\n        logo_img.onload = () => {\n          resolve()\n        }\n      })\n      const promise2 = new Promise((resolve, reject) => {\n        user_img.onload = () => {\n          resolve()\n        }\n      })\n      return new Promise((resolve, reject) => {\n        Promise.all([promise1, promise2]).then(result => {\n          ctx.clearRect(0, 0, myCanvas.width, myCanvas.height)\n          ctx.drawImage(\n            user_img,\n            0,\n            0,\n            this.maskOptions.width,\n            this.maskOptions.height\n          )\n          ctx.drawImage(\n            logo_img,\n            0,\n            0,\n            this.maskOptions.width,\n            this.maskOptions.height\n          )\n          ctx.stroke()\n          myCanvas.toBlob(function(blob) {\n            const objectURL = URL.createObjectURL(blob)\n            resolve(objectURL)\n          })\n        })\n      })\n    }\n  }\n}\n</script>\n"]}]}