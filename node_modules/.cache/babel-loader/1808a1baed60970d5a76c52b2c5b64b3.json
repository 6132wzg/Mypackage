{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/ring/ring.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/ring/ring.vue","mtime":1598250255719},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.function.name\";\nimport _toConsumableArray from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { View } from 'st-data-set';\nimport { Chart } from '@antv/g2';\nimport { toKFilter, thousandsFilter, setColorMap, colorToRgba } from \"../filters\";\nimport chartMixin from \"../mixin\";\nimport { chartConfig } from \"./ring.config\";\nexport default {\n  name: 'MultiLine',\n  mixins: [chartMixin],\n  props: {\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    dataItem: {\n      type: Function,\n      default: function _default(row) {\n        return row;\n      }\n    },\n    // 设置 图例、x轴、y轴 对应的key值\n    dataItemKeyMap: {\n      type: Object,\n      default: function _default() {\n        return {\n          name: 'name',\n          // 图例名\n          key: 'key',\n          // 图例name对应key值\n          value: 'value',\n          // y轴值\n          x: 'date' // x轴值\n\n        };\n      }\n    },\n    total: {\n      type: [Number, String],\n      default: 0\n    },\n    unitBack: {\n      type: Boolean,\n      default: false\n    },\n    unit: {\n      type: String,\n      default: '¥'\n    },\n    totalName: {\n      type: String,\n      default: ''\n    },\n    tooltipId: {\n      type: String,\n      default: ''\n    },\n    tooltipMap: {\n      type: Object,\n      default: function _default() {}\n    },\n    // 数组排序对应颜色顺序，设置对应字段的颜色；当fold为true时 fields又作为展开字段集,用于字段的展开\n    fields: {\n      type: [Boolean, Array],\n      default: function _default() {\n        return [];\n      }\n    },\n    fieldKey: {\n      type: String,\n      default: 'key'\n    },\n    // 颜色配置数组\n    colors: {\n      type: Array,\n      default: function _default() {\n        return ['#3F66F6', '#798AFF', '#06DB8C', '#77FF74', '#B8F10F', '#FFE679', '#FFB946', '#FF6466', '#C87FFF', '#484F83'];\n      }\n    },\n    // 是否按照颜色数组的顺序 循环设置图例颜色（即图例顺序与colors顺序一一对应），默认为false，根据图例key设置图例颜色\n    colorIsQueue: {\n      type: Boolean,\n      default: false\n    },\n    colorMap: {\n      type: [Object, Array, Boolean],\n      default: false\n    },\n    height: {\n      type: Number,\n      default: 210\n    },\n    padding: {\n      type: [Array, Number],\n      default: function _default() {\n        return ['auto', 185, 'auto', 'auto'];\n      }\n    }\n  },\n  watch: {\n    // 当浏览器窗口变小时，tooltip会消失问题\n    resize: function resize() {\n      var _this = this;\n\n      var h = this.$createElement;\n      this.$nextTick(function () {\n        var tooltipMap = _this.tooltipMap;\n\n        var _loop = function _loop(key) {\n          tooltipMap[key] && new Vue({\n            components: {\n              StHelpTooltip: StHelpTooltip\n            },\n            render: function render(h) {\n              return h(\"st-help-tooltip\", {\n                \"attrs\": {\n                  \"id\": tooltipMap[key]\n                }\n              });\n            }\n          }).$mount(\"#legend-\".concat(key));\n        };\n\n        for (var key in tooltipMap) {\n          _loop(key);\n        }\n\n        if (_this.tooltipId) {\n          var $s = _this.$el.querySelector.bind(_this.$el);\n\n          var component = new Vue({\n            components: {\n              StHelpTooltip: StHelpTooltip\n            },\n            render: function render(h) {\n              return h(\"st-help-tooltip\", {\n                \"attrs\": {\n                  \"id\": _this.tooltipId\n                }\n              });\n            }\n          }).$mount();\n          $s(\"#guide-name-tooltip\".concat(_this.tooltipId)).appendChild(component.$el);\n        }\n      });\n    }\n  },\n  data: function data() {\n    return {\n      type: 'Ring',\n      dv: new View()\n    };\n  },\n  computed: {\n    dataSource: function dataSource() {\n      //传入的总计为0时，多一个环形图为0的灰色环形图\n      if (this.total == 0 || !this.total) {\n        return [{\n          key: 0,\n          name: 'empty',\n          value: 1,\n          percent: 1\n        }].concat(_toConsumableArray(this.data));\n      }\n\n      return [{\n        key: 0,\n        name: 'empty',\n        value: 0,\n        percent: 0\n      }].concat(_toConsumableArray(this.data));\n    },\n\n    /**\n     * 图例枚举配置获取\n     * fieldsKey  为图例名对应的key值数组\n     * fieldsName 为图例名 数组                用于数据展开的依据\n     * fieldsObj  为图例名与其key值 的对应关系\n     * */\n    $fieldsOpts: function $fieldsOpts() {\n      var _this2 = this;\n\n      var fieldsKey = [];\n      var fieldsName = [];\n      var fieldsObj = {};\n      var data = this.dataSource;\n      data.map(function (item) {\n        fieldsKey.push(item[_this2.fieldKey]);\n        fieldsName.push(item.name);\n        fieldsObj[item[_this2.fieldKey]] = item.name;\n      });\n\n      if (this.fields.length) {\n        fieldsKey = [].concat(_toConsumableArray(this.fields), _toConsumableArray(fieldsKey));\n      }\n\n      fieldsKey = _toConsumableArray(new Set(fieldsKey));\n      fieldsName = _toConsumableArray(new Set(fieldsName));\n      return {\n        colorMap: this.colorMap,\n        fieldsKey: fieldsKey,\n        fieldsName: fieldsName,\n        fieldsObj: fieldsObj\n      };\n    },\n    // 构造颜色map\n    $colorMap: function $colorMap() {\n      // 根据 图例枚举，以图例name为key值，生成图例颜色map对应关系\n      return setColorMap(this.$fieldsOpts, this.colors, this.colorIsQueue);\n    },\n    opt$: function opt$() {\n      var _this$$attrs = this.$attrs,\n          _this$$attrs$legend = _this$$attrs.legend,\n          legend = _this$$attrs$legend === void 0 ? {} : _this$$attrs$legend,\n          _this$$attrs$guide = _this$$attrs.guide,\n          guide = _this$$attrs$guide === void 0 ? {} : _this$$attrs$guide;\n      return {\n        legend: _objectSpread({\n          position: 'right-center',\n          layout: 'line'\n        }, legend),\n        guide: _objectSpread({\n          layout: ''\n        }, guide)\n      };\n    }\n  },\n  methods: {\n    initDv: function initDv() {\n      var _this3 = this;\n\n      this.dv.source(this.dataSource);\n      this.dv.transform({\n        type: 'map',\n        callback: function callback(row, index) {\n          // 根据自定义配置项 格式化数据\n          for (var key in _this3.dataItemKeyMap) {\n            var itemDt = row[_this3.dataItemKeyMap[key]];\n            if (itemDt) row[key] = itemDt;\n          }\n\n          ;\n          row.$idx = index, row.value = +(row.value || 0);\n          return _this3.dataItem ? _this3.dataItem(row) : row;\n        }\n      }).transform({\n        type: 'percent',\n        field: 'value',\n        // 统计销量\n        dimension: 'name',\n        // 每年的占比\n        as: 'percent' // 结果存储在 percent 字段\n\n      });\n    },\n    renderChart: function renderChart() {\n      console.log('chart init', this.dv.rows);\n      this.chart = new Chart(_objectSpread({}, this.opts, {\n        container: this.$el,\n        data: this.dv,\n        forceFit: true,\n        height: this.height,\n        padding: ['auto', 185, 'auto', 'auto']\n      }));\n\n      if (this.isEmpty) {\n        this.chart.tooltip(false);\n        this.chart.legend('name', false);\n      }\n\n      this.chart.render();\n      this.chartEvent();\n    },\n    // 如果配置参数在单独的配置文件中这个方法必须设置\n    getChartConfig: function getChartConfig() {\n      // chartConfig 输出配置参数的方法\n      return chartConfig(this);\n    },\n    // 更新opts配置 需要重新计算最新的opts、并重新渲染\n    changeData: function changeData() {\n      this.chart.destroy();\n      this.renderChart();\n    },\n    valFormat: function valFormat(val) {\n      return Number((+val).toFixed(1)).toLocaleString();\n    },\n    resetTotal: function resetTotal() {\n      var $s = this.$el.querySelector.bind(this.$el);\n      $s('.guide-value').textContent = this.valFormat(this.total) || 0; // 总计的时候显示tooltip\n\n      $s('.guide-name-tooltip').setAttribute('style', this.tooltipId ? 'display: inline' : 'display: none');\n      $s('.guide-name-text').textContent = this.totalName;\n    },\n    setUnit: function setUnit(e) {\n      var $s = this.$el.querySelector.bind(this.$el); // 当环形图总计都是零的时候隐藏tooltip\n\n      if (e.data._origin.name === 'empty') {\n        $s('.g2-tooltip').setAttribute('style', 'display: none');\n        return;\n      }\n\n      var origin = e.data._origin;\n      var shapes = e.shapes;\n      var geom = e.geom;\n      $s('.guide-value').textContent = this.valFormat(origin.value);\n      $s('.guide-name-text').textContent = origin.name; // 不是总计的时候隐藏tooltip\n\n      $s('.guide-name-tooltip').setAttribute('style', 'display: none');\n    },\n    chartEvent: function chartEvent() {\n      var _this4 = this;\n\n      // 鼠标进入环形显示相关的值\n      this.chart.on('interval:mouseenter', function (ev) {\n        var shape = ev.shape;\n        var origin = ev.data._origin;\n\n        if (origin.name === 'empty') {\n          _this4.chart.getAllGeoms()[0].clearActivedShapes(shape);\n        }\n\n        _this4.setUnit(ev);\n      }); // 鼠标离开显示总值\n\n      this.chart.on('interval:mouseleave', function (e) {\n        _this4.resetTotal();\n      });\n    }\n  }\n};",null]}