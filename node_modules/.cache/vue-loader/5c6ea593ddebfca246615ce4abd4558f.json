{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/app/physical-test/list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/app/physical-test/list.vue","mtime":1597396799951},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport draggable from 'vuedraggable'\nimport MarkteingPluginTitle from '@/views/pages/brand/marketing/components#/marketing-title'\nimport BrandAppPhysicalTestNewLabel from '@/views/biz-modals/brand/app/physical-test/new-label'\nimport { ListService } from './list.service'\nimport { cloneDeep } from 'lodash-es'\nimport { TYPE } from '@/constants/marketing/plugin'\nexport default {\n  name: 'brand-app-physical-test',\n\n  bem: {\n    b: 'brand-app-physical-test'\n  },\n\n  components: { MarkteingPluginTitle },\n\n  modals: { BrandAppPhysicalTestNewLabel },\n\n  serviceInject() {\n    return {\n      physicalTestService: ListService\n    }\n  },\n\n  rxState() {\n    return {\n      loading: this.physicalTestService.loading$,\n      indicators: this.physicalTestService.list$,\n      labels: this.physicalTestService.labelList$,\n      auth: this.physicalTestService.auth$\n    }\n  },\n\n  props: {},\n\n  data() {\n    return {\n      statusAdd: false,\n      statusEdit: false,\n      tags: [],\n      editIndicator: {},\n      TYPE\n    }\n  },\n\n  computed: {\n    indicatorsNum() {\n      let len = this.indicators.length\n      if (len === 1) {\n        return 0\n      } else {\n        return this.statusAdd ? len - 2 : len - 1\n      }\n    },\n    canEditIndicator() {\n      return this.indicators.slice(1)\n    },\n    addButtonDisable() {\n      if (this.auth.add) {\n        return this.statusAdd\n      } else {\n        return true\n      }\n    }\n  },\n\n  methods: {\n    checkMove(evt) {\n      const { draggedContext, relatedContext, dragged, from, to } = evt\n      const draggedElement = draggedContext.element\n      const relatedElement = relatedContext.element\n      console.log('statusEdit', this.statusEdit)\n      // 新增状态不可拖拽\n      if (this.statusAdd) return false\n      // 编辑状态不可拖拽\n      if (this.statusEdit) return false\n      return (!relatedElement || !relatedElement.isAdd) && !draggedElement.isAdd\n    },\n    resetIndicator() {\n      this.editIndicator = {\n        item_name: '',\n        item_unit: '',\n        is_show: 1,\n        is_must: 1,\n        isEdit: true\n      }\n    },\n    handleReGetBodyImg() {\n      this.$message.success({ content: '体态图新增成功' })\n      this.physicalTestService.getBodyImgLableList().subscribe()\n    },\n    handleRemoveTag(tag) {\n      this.physicalTestService\n        .removePhysicalTestBodyImgLabel(tag.id)\n        .subscribe(res => {\n          this.$message.success({ content: '体态图删除成功' })\n          this.physicalTestService.getBodyImgLableList().subscribe()\n        })\n    },\n    handleAddIndicator() {\n      this.indicators = this.indicators.map(i => {\n        i.isEdit = false\n        return i\n      })\n      this.statusAdd = true\n      this.resetIndicator()\n      this.indicators.splice(1, 0, this.editIndicator)\n    },\n    handleEditIndicator(indicator) {\n      this.statusEdit = true\n      // 如果是从新增状态,点击编辑按钮时\n      if (this.statusAdd) {\n        this.indicators.splice(1, 1)\n        this.statusAdd = false\n      }\n      this.editIndicator = cloneDeep(indicator)\n      this.indicators = this.indicators.map(i => {\n        if (i.id === indicator.id) {\n          i.isEdit = true\n        } else {\n          i.isEdit = false\n        }\n        return i\n      })\n    },\n    handleRemoveIndicators(indicator) {\n      this.physicalTestService\n        .deleteBodyIndicator(indicator.id)\n        .subscribe(res => {\n          this.statusEdit = false\n          this.indicators = this.indicators.filter(i => i.id !== indicator.id)\n        })\n    },\n    handleSaveIndicators(indicator) {\n      console.log('handleSaveIndicators', indicator)\n      if (this.statusAdd) {\n        this.physicalTestService\n          .addBodyIndicator({\n            item_name: indicator.item_name,\n            item_unit: indicator.item_unit,\n            is_show: indicator.is_show,\n            is_must: indicator.is_must\n          })\n          .subscribe(res => {\n            // 保存新增的基础提测数据\n            this.statusEdit = false\n            this.statusAdd = false\n            this.resetIndicator()\n            this.physicalTestService.getBodyIndicatorList().subscribe()\n            console.log('res')\n          })\n      } else {\n        // 保存修改的基础提测数据\n        this.physicalTestService\n          .editBodyIndicator({\n            id: this.editIndicator.id,\n            item_name: this.editIndicator.item_name,\n            item_unit: this.editIndicator.item_unit,\n            is_show: this.editIndicator.is_show,\n            is_must: this.editIndicator.is_must\n          })\n          .subscribe(res => {\n            this.statusEdit = false\n            this.indicators = this.indicators.map(i => {\n              if (i.id === indicator.id) {\n                this.editIndicator.isEdit = false\n                i = this.editIndicator\n                this.resetIndicator()\n              }\n              return i\n            })\n          })\n      }\n    },\n    handleCancelEditIndicators(indicator) {\n      this.statusEdit = false\n      if (this.statusAdd) {\n        this.indicators.splice(1, 1)\n        this.resetIndicator()\n        this.statusAdd = false\n      } else {\n        this.indicators = this.indicators.map(i => {\n          i.isEdit = false\n          return i\n        })\n      }\n    },\n    handleSortIndicator() {\n      let indicators = this.indicators.slice(1)\n      this.physicalTestService\n        .moveBodyIndicators({\n          item_sort: indicators\n        })\n        .subscribe()\n    },\n    dragStart(ev) {\n      ev.item.classList.add('dragged')\n    },\n    dragEnd(ev) {\n      ev.item.classList.remove('dragged')\n    }\n  }\n}\n",null]}