{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/src/utils/list-to-tree.js","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/utils/list-to-tree.js","mtime":1591147717093},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport { forEach } from 'lodash-es';\nimport { listToMap } from '@/utils/list-to-map';\n/**\n * 将数组列表转换为树列表\n * @param { Array<Object> } list\n * @param { stirng } keyField 指定键名字段\n * @param { stirng } parentField 指定父级字段\n * @param { stirng } childrenField 指定孩子节点字段\n * @return {Array}\n * @example\n *\n * const arr = [{id:1,name:'a', parent_id:'0'},{id:2,name:'b',parent_id:1},{id:3,name:'c,parent_id:2}]\n * listToTree(arr) =>\n * [{\n *    id:1,\n *    name:'a',\n *    children:[\n *      {\n *          id:2,\n *          name:'b',\n *          children:[{id:3,name:\"c\"}]\n *      }\n *    ]\n * }]\n *\n */\n\nexport var listToTree = function listToTree(list) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$keyField = _ref.keyField,\n      keyField = _ref$keyField === void 0 ? 'id' : _ref$keyField,\n      _ref$parentField = _ref.parentField,\n      parentField = _ref$parentField === void 0 ? 'parent_id' : _ref$parentField,\n      _ref$childrenField = _ref.childrenField,\n      childrenField = _ref$childrenField === void 0 ? 'children' : _ref$childrenField,\n      _ref$isLeafField = _ref.isLeafField,\n      isLeafField = _ref$isLeafField === void 0 ? 'isLeaf' : _ref$isLeafField,\n      _ref$isParentField = _ref.isParentField,\n      isParentField = _ref$isParentField === void 0 ? 'isParent' : _ref$isParentField;\n\n  var map = listToMap(list, {\n    keyField: keyField\n  });\n  var tree = [];\n  forEach(list, function (item) {\n    // parentId\n    var parentId = item[parentField];\n    item[isLeafField] = true;\n    item.key = item.id;\n    item.title = item.name;\n    item.scopedSlots = {\n      title: 'title'\n    }; // 自己是子节点时\n\n    if (parentId && map[parentId]) {\n      var parent = map[parentId];\n      parent[childrenField] = parent[childrenField] || []; // 当父级不存在该子节点时\n\n      if (parent[childrenField].indexOf(item) === -1) {\n        parent[childrenField].push(item);\n        parent[isLeafField] = false;\n        parent[isParentField] = true;\n      } // 自己是根节点时\n\n    } else {\n      tree.push(item);\n    }\n  });\n  return tree;\n};",{"version":3,"sources":["/Users/wangzhigang/Desktop/styd/web/src/utils/list-to-tree.js"],"names":["forEach","listToMap","listToTree","list","keyField","parentField","childrenField","isLeafField","isParentField","map","tree","item","parentId","key","id","title","name","scopedSlots","parent","indexOf","push"],"mappings":";AAAA,SAASA,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CACxBC,IADwB,EASrB;AAAA,iFADC,EACD;AAAA,2BANDC,QAMC;AAAA,MANDA,QAMC,8BANU,IAMV;AAAA,8BALDC,WAKC;AAAA,MALDA,WAKC,iCALa,WAKb;AAAA,gCAJDC,aAIC;AAAA,MAJDA,aAIC,mCAJe,UAIf;AAAA,8BAHDC,WAGC;AAAA,MAHDA,WAGC,iCAHa,QAGb;AAAA,gCAFDC,aAEC;AAAA,MAFDA,aAEC,mCAFe,UAEf;;AACH,MAAMC,GAAG,GAAGR,SAAS,CAACE,IAAD,EAAO;AAAEC,IAAAA,QAAQ,EAARA;AAAF,GAAP,CAArB;AACA,MAAMM,IAAI,GAAG,EAAb;AACAV,EAAAA,OAAO,CAACG,IAAD,EAAO,UAAAQ,IAAI,EAAI;AACpB;AACA,QAAMC,QAAQ,GAAGD,IAAI,CAACN,WAAD,CAArB;AACAM,IAAAA,IAAI,CAACJ,WAAD,CAAJ,GAAoB,IAApB;AACAI,IAAAA,IAAI,CAACE,GAAL,GAAWF,IAAI,CAACG,EAAhB;AACAH,IAAAA,IAAI,CAACI,KAAL,GAAaJ,IAAI,CAACK,IAAlB;AACAL,IAAAA,IAAI,CAACM,WAAL,GAAmB;AAAEF,MAAAA,KAAK,EAAE;AAAT,KAAnB,CANoB,CAOpB;;AACA,QAAIH,QAAQ,IAAIH,GAAG,CAACG,QAAD,CAAnB,EAA+B;AAC7B,UAAMM,MAAM,GAAGT,GAAG,CAACG,QAAD,CAAlB;AACAM,MAAAA,MAAM,CAACZ,aAAD,CAAN,GAAwBY,MAAM,CAACZ,aAAD,CAAN,IAAyB,EAAjD,CAF6B,CAG7B;;AACA,UAAIY,MAAM,CAACZ,aAAD,CAAN,CAAsBa,OAAtB,CAA8BR,IAA9B,MAAwC,CAAC,CAA7C,EAAgD;AAC9CO,QAAAA,MAAM,CAACZ,aAAD,CAAN,CAAsBc,IAAtB,CAA2BT,IAA3B;AACAO,QAAAA,MAAM,CAACX,WAAD,CAAN,GAAsB,KAAtB;AACAW,QAAAA,MAAM,CAACV,aAAD,CAAN,GAAwB,IAAxB;AACD,OAR4B,CAS7B;;AACD,KAVD,MAUO;AACLE,MAAAA,IAAI,CAACU,IAAL,CAAUT,IAAV;AACD;AACF,GArBM,CAAP;AAsBA,SAAOD,IAAP;AACD,CAnCM","sourcesContent":["import { forEach } from 'lodash-es'\nimport { listToMap } from '@/utils/list-to-map'\n\n/**\n * 将数组列表转换为树列表\n * @param { Array<Object> } list\n * @param { stirng } keyField 指定键名字段\n * @param { stirng } parentField 指定父级字段\n * @param { stirng } childrenField 指定孩子节点字段\n * @return {Array}\n * @example\n *\n * const arr = [{id:1,name:'a', parent_id:'0'},{id:2,name:'b',parent_id:1},{id:3,name:'c,parent_id:2}]\n * listToTree(arr) =>\n * [{\n *    id:1,\n *    name:'a',\n *    children:[\n *      {\n *          id:2,\n *          name:'b',\n *          children:[{id:3,name:\"c\"}]\n *      }\n *    ]\n * }]\n *\n */\n\nexport const listToTree = (\n  list,\n  {\n    keyField = 'id',\n    parentField = 'parent_id',\n    childrenField = 'children',\n    isLeafField = 'isLeaf',\n    isParentField = 'isParent'\n  } = {}\n) => {\n  const map = listToMap(list, { keyField })\n  const tree = []\n  forEach(list, item => {\n    // parentId\n    const parentId = item[parentField]\n    item[isLeafField] = true\n    item.key = item.id\n    item.title = item.name\n    item.scopedSlots = { title: 'title' }\n    // 自己是子节点时\n    if (parentId && map[parentId]) {\n      const parent = map[parentId]\n      parent[childrenField] = parent[childrenField] || []\n      // 当父级不存在该子节点时\n      if (parent[childrenField].indexOf(item) === -1) {\n        parent[childrenField].push(item)\n        parent[isLeafField] = false\n        parent[isParentField] = true\n      }\n      // 自己是根节点时\n    } else {\n      tree.push(item)\n    }\n  })\n  return tree\n}\n"]}]}