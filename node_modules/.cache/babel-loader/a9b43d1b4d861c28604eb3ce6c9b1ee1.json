{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/product/card/member/period/edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/product/card/member/period/edit.vue","mtime":1597396799962},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { UserService } from '@/services/user.service';\nimport moment from 'moment';\nimport { PatternService } from '@/services/pattern.service';\nimport SelectShop from '@/views/fragments/shop/select-shop';\nimport { cloneDeep, remove } from 'lodash-es';\nimport { EditService } from \"./edit.service\";\nimport MemberCard from '@/views/biz-components/h5/pages/member-card';\nimport H5Container from '@/views/biz-components/h5/h5-container';\nimport h5mixin from \"./h5mixin\";\nimport { MEMBER_CARD } from '@/views/biz-components/h5/pages/member-card.config';\nimport CardBgRadio from '@/views/biz-components/card-bg-radio/card-bg-radio';\nimport FormBanner from '@/views/biz-components/card/form-banner.vue';\nimport { ADMISSION_RANGE, SELL_TYPE, PRICE_SETTING, SUPPORT_SALES, UNIT, CARD_TYPE } from '@/constants/card/member';\nimport { ruleOptions } from \"./period.config\";\nimport StEditor from '@/views/biz-components/st/editor/editor.vue';\nexport default {\n  name: 'BrandPeriodCardEdit',\n  mixins: [h5mixin],\n  serviceInject: function serviceInject() {\n    return {\n      pattern: PatternService,\n      editService: EditService,\n      userService: UserService\n    };\n  },\n  rxState: function rxState() {\n    return {\n      addLoading: this.editService.loading$,\n      cardInfo: this.editService.cardInfo$,\n      cardBgList: this.editService.cardBgList$,\n      admissionRange: this.editService.admissionRange$,\n      priceSetting: this.editService.priceSetting$,\n      supportSales: this.editService.supportSales$,\n      unit: this.editService.unit$,\n      sellType: this.editService.sellType$,\n      isShelfCard: this.editService.isShelfCard$,\n      supportMemberNums: this.editService.supportMemberNums$\n    };\n  },\n  bem: {\n    b: 'st-help-popover'\n  },\n  components: {\n    StEditor: StEditor,\n    SelectShop: SelectShop,\n    MemberCard: MemberCard,\n    H5Container: H5Container,\n    CardBgRadio: CardBgRadio,\n    FormBanner: FormBanner\n  },\n  data: function data() {\n    var form = this.$stForm.create();\n    var decorators = form.decorators(ruleOptions);\n    return {\n      // cardData\n      form: form,\n      decorators: decorators,\n      ADMISSION_RANGE: ADMISSION_RANGE,\n      SELL_TYPE: SELL_TYPE,\n      PRICE_SETTING: PRICE_SETTING,\n      SUPPORT_SALES: SUPPORT_SALES,\n      UNIT: UNIT,\n      cardType: MEMBER_CARD.PERIOD_CARD,\n      MEMBER_CARD: MEMBER_CARD,\n      cardData: {\n        // 卡id\n        id: null,\n        // 会员卡类型1-次卡 2-期限卡\n        card_type: this.isFamilyCard ? CARD_TYPE.MORE_PERIOD : CARD_TYPE.PERIOD,\n        // 会员卡名称\n        card_name: '',\n        // 特殊说明\n        special_note: '',\n        // 支持入场范围 1-单店 2-多店 3-全店\n        admission_range: ADMISSION_RANGE.ONLY_STORE,\n        // 支持入场门店\n        admission_shop_list: [],\n        // 价格设置类型 1-统一定价 2-门店定价\n        price_setting: PRICE_SETTING.UNIFORM_PRICE,\n        // 价格梯度\n        price_gradient: [],\n        // 支持售卖场馆类型 1-全部门店 2-指定门店\n        support_sales: SUPPORT_SALES.ALL_STORE,\n        // 支持售卖门店\n        sell_shop_list: [],\n        // 上架门店数量\n        shelf_shop_num: 0,\n        // 支持售卖时间\n        start_time: '',\n        end_time: '',\n        // 结束时间面板是否显示\n        endOpen: false,\n        // 是否支持转让\n        _is_transfer: false,\n        is_transfer: 0,\n        // 转让单位\n        unit: UNIT.RMB,\n        // 转让手续费\n        num: undefined,\n        // 售卖方式\n        sell_type: [SELL_TYPE.OFFLINE],\n        // 卡背景\n        card_bg: {\n          image_id: 0,\n          image_key: this.cardBgList[0].image_key,\n          image_url: '',\n          index: 1\n        },\n        // 是否配置了用户端\n        appConfig: true,\n        // 卡介绍\n        card_introduction: '',\n        // 备注\n        card_contents: ''\n      },\n      transfer_unit_is_first: true,\n      // 品牌统一定价-价格梯度\n      rallyPriceList: [],\n      // 门店自主定价-价格梯度\n      shopPriceList: [],\n      // 售卖时间\n      start_time: null,\n      end_time: null,\n      unit_list: [{\n        value: 2,\n        label: '天'\n      }, {\n        value: 3,\n        label: '月'\n      }, {\n        value: 4,\n        label: '年'\n      }],\n      // 校验价格的help文本\n      priceValidatorText: '',\n      // 卡背景的help文本\n      cardBgValidatorText: '',\n      // 是否禁止选择开始时间,如果卡状态是可售卖，则需要禁止修改开始时间\n      startTimeIsDisabled: false\n    };\n  },\n  mounted: function mounted() {\n    this.init();\n  },\n  methods: {\n    // init\n    init: function init() {\n      var _this = this;\n\n      this.form.setFieldsValue({\n        'cardData.special_note': this.cardInfo.special_note,\n        'cardData.admission_range': this.cardInfo.admission_range,\n        'cardData.price_setting': this.cardInfo.price_setting,\n        'cardData.support_sales': this.cardInfo.support_sales,\n        start_time: moment(this.cardInfo.start_time * 1000),\n        end_time: moment(this.cardInfo.end_time * 1000),\n        'cardData.num': this.cardInfo.transfer_num\n      });\n\n      if (this.isFamilyCard) {\n        this.form.setFieldsValue({\n          'cardData.support_member_num': this.cardInfo.support_member_num\n        });\n      } // 入场门店\n\n\n      this.cardData.admission_range = this.cardInfo.admission_range;\n      this.cardData.admission_shop_list = this.cardInfo.admission_shop_list; // 价格设置\n\n      this.cardData.price_setting = this.cardInfo.price_setting;\n\n      if (this.cardInfo.price_setting === PRICE_SETTING.UNIFORM_PRICE) {\n        // 品牌定价\n        this.cardInfo.price_gradient.forEach(function (i) {\n          var key = parseInt(Math.random() * 999999).toString();\n\n          _this.rallyPriceList.push({\n            key: key,\n            time: {\n              unit: +i.unit,\n              num: +i.num\n            },\n            rally_price: +i.rally_price,\n            frozen_day: +i.frozen_day,\n            gift_unit: +i.gift_unit\n          });\n        });\n      } else {\n        // 门店定价\n        this.cardInfo.price_gradient.forEach(function (i) {\n          var key = parseInt(Math.random() * 999999).toString();\n\n          _this.shopPriceList.push({\n            key: key,\n            time: {\n              unit: +i.unit,\n              num: +i.num\n            },\n            frozen_day: +i.frozen_day,\n            gift_unit: +i.gift_unit,\n            rally_price: {\n              min_price: +i.min_price,\n              max_price: +i.max_price\n            }\n          });\n        });\n      } // 支持售卖门店\n\n\n      this.cardData.support_sales = this.cardInfo.support_sales;\n      this.cardData.sell_shop_list = this.cardData.support_sales === SUPPORT_SALES.SPECIFIED_STORE ? cloneDeep(this.cardInfo.sell_shop_list) : []; // 支持售卖时间\n\n      this.start_time = moment(this.cardInfo.start_time * 1000);\n      this.end_time = moment(this.cardInfo.end_time * 1000);\n      this.startTimeIsDisabled = this.cardInfo.start_time * 1000 < moment().startOf('day').valueOf() && this.cardInfo.end_time * 1000 > moment().valueOf(); // 转让设置\n\n      this.cardData._is_transfer = !!this.cardInfo.is_transfer;\n      this.cardData.unit = this.cardInfo.transfer_unit;\n      this.cardData.num = this.cardInfo.transfer_num; // 售卖方式\n\n      this.cardData.sell_type = this.cardInfo.sell_type; // 卡背景\n\n      this.cardData.card_bg = cloneDeep(this.cardInfo.card_bg); // 卡介绍\n\n      this.cardData.card_introduction = this.cardInfo.card_introduction; // 卡备注\n\n      this.cardData.card_contents = this.cardInfo.card_contents;\n      this.initH5CardInfo();\n    },\n    // 保存\n    onHandleSubmit: function onHandleSubmit(e) {\n      var _this2 = this;\n\n      e.preventDefault(); // 校验价格\n\n      this.priceValidator(this.cardData.price_setting); // 校验卡背景\n\n      this.cardBgValidator();\n      this.form.validateFieldsAndScroll(function (err, values) {\n        if (!err && _this2.priceIsOk && _this2.cardBgIsOk) {\n          // 入场门店\n          if (_this2.cardData.admission_range !== ADMISSION_RANGE.GENERAL_STORE) {\n            // 不是多门店\n            _this2.cardData.admission_shop_list = [];\n          } // 售卖门店\n\n\n          if (_this2.cardData.support_sales !== SUPPORT_SALES.SPECIFIED_STORE) {\n            // 不是多门店\n            _this2.cardData.sell_shop_list = [];\n          } // 售卖门店\n\n\n          if (_this2.cardData.admission_range === ADMISSION_RANGE.GENERAL_STORE && _this2.cardData.support_sales === SUPPORT_SALES.ENTRY_STORE) {\n            // 多门店 && 支持入场门店\n            _this2.cardData.sell_shop_list = cloneDeep(_this2.cardData.admission_shop_list);\n          } // 价格梯度\n\n\n          var p = [];\n\n          switch (_this2.cardData.price_setting) {\n            case PRICE_SETTING.UNIFORM_PRICE:\n              // 品牌统一定价\n              _this2.rallyPriceList.forEach(function (i) {\n                p.push({\n                  unit: +i.time.unit,\n                  num: +i.time.num,\n                  rally_price: +i.rally_price,\n                  frozen_day: +i.frozen_day,\n                  gift_unit: +i.gift_unit\n                });\n              });\n\n              break;\n\n            case PRICE_SETTING.SHOP_PRICE:\n              // 门店自主定价\n              _this2.shopPriceList.forEach(function (i) {\n                p.push({\n                  unit: +i.time.unit,\n                  num: +i.time.num,\n                  min_price: +i.rally_price.min_price,\n                  max_price: +i.rally_price.max_price,\n                  frozen_day: +i.frozen_day,\n                  gift_unit: +i.gift_unit\n                });\n              });\n\n              break;\n          }\n\n          _this2.cardData.special_note = values.cardData.special_note;\n          _this2.cardData.price_gradient = cloneDeep(p); // 时间\n\n          _this2.cardData.start_time = \"\".concat(_this2.start_time.format('YYYY-MM-DD'));\n          _this2.cardData.end_time = \"\".concat(_this2.end_time.format('YYYY-MM-DD')); // 卡id\n\n          _this2.cardData.id = +_this2.$searchQuery.id; // 转让\n\n          _this2.cardData.num = _this2.cardData._is_transfer ? +values.cardData.num : undefined;\n\n          if (!_this2.isFamilyCard) {\n            _this2.cardData.support_member_num = 1;\n            _this2.cardData.card_type = CARD_TYPE.PERIOD;\n          } else {\n            _this2.cardData.support_member_num = values.cardData.support_member_num;\n            _this2.cardData.card_type = CARD_TYPE.MORE_PERIOD;\n          }\n\n          _this2.editService.editCard(_this2.cardData).subscribe(function (res) {\n            _this2.$router.push({\n              name: 'brand-product-card-member-list-all'\n            });\n          });\n        }\n      });\n    },\n    // 增加入场门店\n    admission_range_change: function admission_range_change(data) {\n      this.cardData.admission_shop_list = cloneDeep(data);\n      this.syncAdmissionShop();\n    },\n    // 入场门店支持方式change\n    admission_range: function admission_range(data) {\n      this.cardData.admission_range = data.target.value; // 入场门店变化时，售卖门店同时变化\n\n      this.form.setFieldsValue({\n        'cardData.support_sales': SUPPORT_SALES.ALL_STORE,\n        'cardData.price_setting': PRICE_SETTING.UNIFORM_PRICE\n      });\n      this.cardData.support_sales = SUPPORT_SALES.ALL_STORE;\n      this.cardData.price_setting = PRICE_SETTING.UNIFORM_PRICE;\n      this.priceValidatorText = '';\n      this.syncAdmission();\n    },\n    // 价格设置方式change\n    price_range: function price_range(data) {\n      this.cardData.price_setting = data.target.value;\n    },\n    // 增加品牌价格\n    brand_price_add: function brand_price_add() {\n      var key = parseInt(Math.random() * 999999).toString();\n      this.rallyPriceList.push({\n        key: key,\n        time: {\n          unit: 2,\n          num: null\n        },\n        rally_price: null,\n        frozen_day: null,\n        gift_unit: null\n      });\n    },\n    // 删除品牌价格\n    brand_price_delete: function brand_price_delete(index) {\n      this.rallyPriceList.splice(index, 1);\n    },\n    // 品牌价格梯度-期限\n    brandPriceSettingHandleChange: function brandPriceSettingHandleChange(_ref) {\n      var value = _ref.value,\n          key = _ref.key,\n          col = _ref.col,\n          prop = _ref.prop;\n\n      if (prop !== undefined) {\n        this.rallyPriceList[key][col][prop] = value;\n      } else {\n        this.rallyPriceList[key][col] = value;\n      }\n    },\n    // 增加门店价格\n    shop_price_add: function shop_price_add() {\n      var key = parseInt(Math.random() * 999999).toString();\n      this.shopPriceList.push({\n        key: key,\n        time: {\n          unit: 2,\n          num: null\n        },\n        rally_price: {\n          min_price: null,\n          max_price: null\n        },\n        frozen_day: null,\n        gift_unit: null\n      });\n    },\n    // 删除门店价格\n    shop_price_delete: function shop_price_delete(index) {\n      this.shopPriceList.splice(index, 1);\n    },\n    // 门店价格梯度-期限\n    shopPriceSettingHandleChange: function shopPriceSettingHandleChange(_ref2) {\n      var value = _ref2.value,\n          key = _ref2.key,\n          col = _ref2.col,\n          prop = _ref2.prop;\n\n      if (prop !== undefined) {\n        this.shopPriceList[key][col][prop] = value;\n      } else {\n        this.shopPriceList[key][col] = value;\n      }\n    },\n    // 支持售卖门店change\n    support_range: function support_range(data) {\n      this.cardData.support_sales = data.target.value;\n    },\n    // 增加售卖门店\n    sales_shop_change: function sales_shop_change(data) {\n      this.cardData.sell_shop_list = cloneDeep(data);\n    },\n    // 售卖时间-start\n    disabledStartDate: function disabledStartDate(startValue) {\n      var endValue = this.end_time;\n\n      if (!endValue) {\n        // 结束时间未选择\n        return startValue.valueOf() < moment().startOf('day').valueOf();\n      }\n\n      var start = endValue.valueOf() > moment().add(30, 'y').valueOf() ? moment(endValue).subtract(30, 'y').valueOf() : moment().startOf('day').valueOf();\n      return startValue.valueOf() < start || startValue.valueOf() > moment(endValue).valueOf();\n    },\n    start_time_change: function start_time_change(data) {\n      this.start_time = cloneDeep(data);\n    },\n    handleStartOpenChange: function handleStartOpenChange(open) {\n      if (!open) {\n        this.cardData.endOpen = true;\n      }\n    },\n    // 售卖时间-end\n    end_time_change: function end_time_change(data) {\n      this.end_time = cloneDeep(data);\n    },\n    handleEndOpenChange: function handleEndOpenChange(open) {\n      this.cardData.endOpen = open;\n    },\n    disabledEndDate: function disabledEndDate(endValue) {\n      var startValue = this.start_time;\n\n      if (!startValue) {\n        // 开始时间未选择\n        return endValue.valueOf() < moment().startOf('day').valueOf();\n      }\n\n      return endValue.valueOf() >= moment(startValue).add(30, 'y').valueOf() || endValue.valueOf() < moment(startValue).valueOf() || endValue.valueOf() < moment().startOf('day').valueOf();\n    },\n    // moment\n    moment: moment,\n    range: function range(start, end) {\n      var result = [];\n\n      for (var i = start; i < end; i++) {\n        result.push(i);\n      }\n\n      return result;\n    },\n    // 转让\n    transfer: function transfer(e) {\n      this.cardData._is_transfer = e.target.checked; // 重置转让费用的校验\n\n      this.form.resetFields(['cardData.num']);\n    },\n    // 价格梯度校验\n    priceValidator: function priceValidator(type) {\n      var _this3 = this;\n\n      var fnName = type === PRICE_SETTING.UNIFORM_PRICE ? 'brandPriceValidataArray' : 'shopPriceValidataArray';\n      var validata = this[fnName].length ? this[fnName].every(function (i) {\n        return _this3.pattern.NUM_FLOAT(1).test(i.split('-')[1]);\n      }) : false;\n      this.priceValidatorText = validata ? '' : '请输入正确的价格';\n    },\n    onCardBgChange: function onCardBgChange(e) {\n      this.cardBgValidatorText = '';\n    },\n    // 卡背景校验\n    cardBgValidator: function cardBgValidator() {\n      var validata = this.cardData.card_bg.image_key !== '';\n      this.cardBgValidatorText = validata ? '' : '请上传卡背景';\n    }\n  },\n  watch: {\n    'cardData._is_transfer': {\n      deep: true,\n      handler: function handler(newVal, oldVal) {\n        this.cardData.is_transfer = +newVal;\n      }\n    },\n    'cardData.unit': {\n      deep: true,\n      handler: function handler() {\n        if (!this.transfer_unit_is_first) {\n          this.form.resetFields(['cardData.num']);\n        }\n\n        this.transfer_unit_is_first = false;\n      }\n    },\n    'cardData.admission_shop_list': {\n      deep: true,\n      handler: function handler() {\n        var v = this.cardData.admission_range;\n        this.cardData.admission_range = v;\n        this.form.setFieldsValue({\n          'cardData.admission_range': v\n        });\n      }\n    },\n    'cardData.sell_shop_list': {\n      deep: true,\n      handler: function handler() {\n        var v = this.cardData.support_sales;\n        this.cardData.support_sales = v;\n        this.form.setFieldsValue({\n          'cardData.support_sales': v\n        });\n      }\n    }\n  },\n  computed: {\n    // 支持售卖门店\n    support_sales_list: function support_sales_list() {\n      var arr = cloneDeep(this.supportSales);\n      var index = this.cardData.admission_range === ADMISSION_RANGE.GENERAL_STORE ? 999 : 2;\n      arr.splice(index, 1);\n      return arr;\n    },\n    // 售卖方式\n    sell_type_list: function sell_type_list() {\n      var sell_type = cloneDeep(this.sellType);\n      var arr = [];\n      sell_type.forEach(function (i) {\n        arr.push({\n          value: i.value,\n          label: i.label\n        });\n      });\n\n      if (!this.cardData.appConfig) {\n        remove(arr, function (i) {\n          return i.value === SELL_TYPE.CLIENT;\n        });\n      }\n\n      return arr;\n    },\n    // 品牌统一定价-价格梯度校验数组\n    brandPriceValidataArray: function brandPriceValidataArray() {\n      var array = [];\n      this.rallyPriceList.forEach(function (i) {\n        Object.keys(i).forEach(function (o) {\n          array.push(o === 'time' ? \"time-\".concat(i.time.num) : \"\".concat(o, \"-\").concat(i[o]));\n        });\n      });\n      return array;\n    },\n    // 门店自主定价-价格梯度校验数组\n    shopPriceValidataArray: function shopPriceValidataArray() {\n      var array = [];\n      this.shopPriceList.forEach(function (i) {\n        Object.keys(i).forEach(function (o) {\n          var value = [];\n\n          if (o === 'time') {\n            value = [\"time-\".concat(i.time.num)];\n          } else if (o === 'rally_price') {\n            value = [\"min_price-\".concat(i.rally_price.min_price), \"max_price-\".concat(i.rally_price.max_price)];\n          } else {\n            value = [\"\".concat(o, \"-\").concat(i[o])];\n          }\n\n          array.push.apply(array, _toConsumableArray(value));\n        });\n      });\n      return array;\n    },\n    // 价格是否校验通过\n    priceIsOk: function priceIsOk() {\n      return this.priceValidatorText === '';\n    },\n    // 卡背景是否校验通过\n    cardBgIsOk: function cardBgIsOk() {\n      return this.cardBgValidatorText === '';\n    },\n    // 转让设置的min\n    transferMin: function transferMin() {\n      // return this.cardData.transfer_unit === 1 ? 1 : 0.1\n      return 0;\n    },\n    // 转让设置的max\n    transferMax: function transferMax() {\n      return this.cardData.unit === UNIT.PERCENT ? 100 : 999999.9;\n    },\n    // 是否是多人卡\n    isFamilyCard: function isFamilyCard() {\n      return this.$searchQuery.type === 'family-card';\n    }\n  }\n};",null]}