{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/src/mixins/table.mixin.js","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/mixins/table.mixin.js","mtime":1597895241971},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _typeof from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { isPlainObject, pick } from 'lodash-es'; // 使用page作为当前页查询参数的路由放这里\n\nvar ROUTE_NAMES_USE_PAGE = [\n/**\n * brand\n */\n'brand-product-course-team-list-shop', 'brand-product-course-team-list-brand', 'brand-product-course-personal-list-brand', 'brand-product-course-personal-list-shop', 'brand-product-card-deposit-list-all', 'brand-product-card-deposit-list-shelves', 'brand-finance-salary-template-basic', 'brand-finance-salary-template-performance', 'brand-setting-shop-list', 'brand-staff-info-course', 'brand-staff-info-follow', 'brand-staff-info-sold', 'brand-staff-info-member', 'brand-marketing-plugin-coupon-list',\n/**\n * shop\n */\n'shop-product-course-manage-personal-list', 'shop-product-course-manage-team-list', 'shop-product-course-manage-package-list', 'shop-product-course-schedule-personal-personal-reserve-table', 'shop-product-card-member-list-all', 'shop-product-card-deposit-list-all', 'shop-product-card-deposit-list-shelves', 'shop-sold-card-list-member', 'shop-sold-card-list-deposit', 'shop-sold-course-list-personal', 'shop-sold-course-list-package', 'shop-sold-cabinet-list', 'shop-sold-transaction-list', 'shop-member-list', 'shop-member-label-list', 'shop-finance-order-list', 'shop-reception-entrance', 'shop-staff-info-member', 'shop-staff-info-course', 'shop-staff-info-sold', 'shop-staff-list', 'shop-setting-hardware-entry-list'];\nexport default {\n  data: function data() {\n    return {\n      // 选中项目的keys\n      selectedRowKeys: [],\n      // 选中项的行数组\n      selectedRows: []\n    };\n  },\n  computed: {\n    finalSearchQuery: function finalSearchQuery() {\n      return this.query || this.$searchQuery;\n    },\n    // 多选是否至少勾选一项\n    isSelectedEnabled: function isSelectedEnabled() {\n      return this.selectedRowKeys.length > 0;\n    },\n    // 没有一项选中\n    isSelectedDisabled: function isSelectedDisabled() {\n      return this.selectedRowKeys.length === 0;\n    },\n    currentPageField: function currentPageField() {\n      var _field = ROUTE_NAMES_USE_PAGE.includes(this.$route.name) ? 'page' : 'current_page';\n\n      return _field;\n    },\n    prevPage: function prevPage() {\n      return this.finalSearchQuery[this.currentPageField];\n    }\n  },\n  methods: {\n    /**\n     * 筛选搜索 使用当前的query参数，只是页数到第一页  只做路由跳转 获取数据的行为在 beforeRouteUpdate 或 beforeEach中定义\n     * @example\n     *  ```html\n     *      <st-button @click='onSearch'></st-button>\n     *  ```\n     */\n    onSearch: function onSearch() {\n      this.onSelectionReset();\n      this.$router.push({\n        query: _objectSpread({}, this.finalSearchQuery, _defineProperty({}, this.currentPageField, 1))\n      });\n    },\n\n    /**\n     * 多个字段下的搜索 this.onMultiSearch({a:1,b:2})\n     */\n    onMultiSearch: function onMultiSearch() {\n      var searchFieldsValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!isPlainObject(searchFieldsValue)) {\n        throw new Error(\"[tableMixin] should provide searchFieldsValue is object but got \".concat(_typeof(searchFieldsValue)));\n      }\n\n      this.$router.push({\n        query: _objectSpread({}, this.finalSearchQuery, {}, searchFieldsValue, _defineProperty({}, this.currentPageField, 1))\n      });\n    },\n\n    /**\n     * 筛选重置\n     */\n    onSearchReset: function onSearchReset() {\n      var _query;\n\n      this.onSelectionReset();\n      this.$router.push({\n        query: (_query = {}, _defineProperty(_query, this.currentPageField, 1), _defineProperty(_query, \"size\", this.finalSearchQuery.size), _query)\n      });\n    },\n\n    /**\n     * 单个筛选项的即时搜索 @change=\"onSingleSearch('card_type',$event)\"\n     */\n    onSingleSearch: function onSingleSearch(key, data) {\n      this.onSelectionReset();\n      this.$router.push({\n        query: _objectSpread({}, this.finalSearchQuery, {}, _defineProperty({}, key, data), _defineProperty({}, this.currentPageField, 1))\n      });\n    },\n\n    /**\n     * 关键词的即时搜索\n     * @example 关键词搜索 去除其它query 页面至第一页，保留分页器\n     *   `@change=\"onKeywordsSearch('keyword',$event)\"`\n     * @example 关键词搜索 保留id字段\n     *   `@change=\"onKeywordsSearch('keyword',$event,['id'])\"`\n     */\n    onKeywordsSearch: function onKeywordsSearch(key, data) {\n      var _objectSpread7;\n\n      var keepFields = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      this.onSelectionReset();\n      this.$router.push({\n        query: _objectSpread(_defineProperty({}, key, data), pick(this.finalSearchQuery, keepFields), (_objectSpread7 = {}, _defineProperty(_objectSpread7, this.currentPageField, 1), _defineProperty(_objectSpread7, \"size\", this.finalSearchQuery.size), _objectSpread7))\n      });\n    },\n    // 重置 多选框\n    onSelectionReset: function onSelectionReset() {\n      this.selectedRowKeys = [];\n      this.selectedRows = [];\n    },\n    // 多选区更新\n    onSelectionChange: function onSelectionChange(selectedRowKeys, selectedRows) {\n      this.selectedRowKeys = selectedRowKeys;\n      this.selectedRows = selectedRows;\n    },\n    getTableQuery: function getTableQuery(pagination, filter, sorter) {\n      var _ref;\n\n      // 排序字段 排序顺序\n      var sort_by, sort_order;\n\n      if (sorter && sorter.field) {\n        sort_by = sorter.field;\n        sort_order = {\n          ascend: 'asc',\n          descend: 'desc'\n        }[sorter.order];\n      }\n\n      if (!pagination) {\n        throw new Error(\"[tableMixin] pagination is not provide \".concat(_typeof(pagination)));\n      }\n\n      return _ref = {}, _defineProperty(_ref, this.currentPageField, pagination.current ? pagination.current : 1), _defineProperty(_ref, \"size\", pagination.pageSize), _defineProperty(_ref, \"sort_by\", sort_by), _defineProperty(_ref, \"sort_order\", sort_order), _ref;\n    },\n    // 子表更新\n    onChildrenTableChange: function onChildrenTableChange(pagination, filter, sorter) {\n      var query = pagination.query || {};\n      return Promise.resolve(_objectSpread({}, this.getTableQuery(pagination, filter, sorter), _defineProperty({}, this.currentPageField, pagination.current ? pagination.current : 1), query));\n    },\n    // 表格更新\n    onTableChange: function onTableChange(pagination, filter, sorter) {\n      this.onSelectionReset();\n      var nextPage = pagination.current !== this.prevPage ? pagination.current : 1;\n      this.$router.push({\n        query: _objectSpread({}, this.finalSearchQuery, {}, this.getTableQuery(pagination, filter, sorter), _defineProperty({}, this.currentPageField, nextPage))\n      });\n    }\n  }\n};",null]}