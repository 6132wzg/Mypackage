{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js??ref--13-2!/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/setting/sms/group.service.ts","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/setting/sms/group.service.ts","mtime":1591147717360},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js","mtime":1591062571609}],"contextDependencies":[],"result":["import _classCallCheck from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar _a, _b, _c;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from 'vue-service-app';\nimport { State, Effect } from 'rx-state';\nimport { tap } from 'rxjs/operators';\nimport { GroupApi, GroupListQuery } from '@/api/v1/setting/sms/group';\nimport { UserService } from '@/services/user.service';\nimport { forkJoin } from 'rxjs';\n\nvar GroupService = /*#__PURE__*/function () {\n  function GroupService(GroupApi, userService) {\n    _classCallCheck(this, GroupService);\n\n    this.GroupApi = GroupApi;\n    this.userService = userService;\n    this.groupList$ = new State([]);\n    this.groupPage$ = new State([]);\n    this.templateList$ = new State([]);\n    this.templatePage$ = new State([]);\n    this.loading$ = new State({});\n    this.notifyType$ = this.userService.getOptions$('setting.notify_type');\n    this.sendStatus$ = this.userService.getOptions$('setting.send_status');\n  }\n\n  _createClass(GroupService, [{\n    key: \"getGroupList\",\n    value: function getGroupList(query) {\n      var _this = this;\n\n      return this.GroupApi.getGroupList(query).pipe(tap(function (res) {\n        _this.groupList$.commit(function () {\n          return res.list;\n        });\n\n        _this.groupPage$.commit(function () {\n          return res.page;\n        });\n      }));\n    }\n  }, {\n    key: \"getTemplateList\",\n    value: function getTemplateList(query) {\n      var _this2 = this;\n\n      return this.GroupApi.getTemplateList(query).pipe(tap(function (res) {\n        _this2.templateList$.commit(function () {\n          return res.list;\n        });\n\n        _this2.templatePage$.commit(function () {\n          return res.page;\n        });\n      }));\n    }\n  }, {\n    key: \"onReset\",\n    value: function onReset(id) {\n      return this.GroupApi.onReset(id).pipe();\n    }\n  }, {\n    key: \"onDelete\",\n    value: function onDelete(query) {\n      return this.GroupApi.onDelete(query).pipe();\n    }\n  }, {\n    key: \"init\",\n    value: function init(query) {\n      return forkJoin(this.getGroupList(query));\n    }\n  }, {\n    key: \"beforeEach\",\n    value: function beforeEach(to, from) {\n      return this.init(to.meta.query);\n    }\n  }]);\n\n  return GroupService;\n}();\n\n__decorate([Effect(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [typeof (_a = typeof GroupListQuery !== \"undefined\" && GroupListQuery) === \"function\" ? _a : Object]), __metadata(\"design:returntype\", void 0)], GroupService.prototype, \"getGroupList\", null);\n\nGroupService = __decorate([Injectable(), __metadata(\"design:paramtypes\", [typeof (_b = typeof GroupApi !== \"undefined\" && GroupApi) === \"function\" ? _b : Object, typeof (_c = typeof UserService !== \"undefined\" && UserService) === \"function\" ? _c : Object])], GroupService);\nexport { GroupService };",{"version":3,"sources":["/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/setting/sms/group.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, ServiceRoute, Controller } from 'vue-service-app'\nimport { State, Effect } from 'rx-state'\nimport { tap } from 'rxjs/operators'\nimport {\n  GroupApi,\n  GroupListQuery,\n  GroupTemplateQuery\n} from '@/api/v1/setting/sms/group'\nimport { UserService } from '@/services/user.service'\nimport { forkJoin } from 'rxjs'\n\n@Injectable()\nexport class GroupService implements Controller {\n  groupList$ = new State([])\n  groupPage$ = new State([])\n  templateList$ = new State([])\n  templatePage$ = new State([])\n  loading$ = new State({})\n  notifyType$ = this.userService.getOptions$('setting.notify_type')\n  sendStatus$ = this.userService.getOptions$('setting.send_status')\n\n  constructor(private GroupApi: GroupApi, private userService: UserService) {}\n  @Effect()\n  getGroupList(query: GroupListQuery) {\n    return this.GroupApi.getGroupList(query).pipe(\n      tap((res: any) => {\n        this.groupList$.commit(() => res.list)\n        this.groupPage$.commit(() => res.page)\n      })\n    )\n  }\n  getTemplateList(query: GroupTemplateQuery) {\n    return this.GroupApi.getTemplateList(query).pipe(\n      tap((res: any) => {\n        this.templateList$.commit(() => res.list)\n        this.templatePage$.commit(() => res.page)\n      })\n    )\n  }\n  onReset(id: any) {\n    return this.GroupApi.onReset(id).pipe()\n  }\n  onDelete(query: any) {\n    return this.GroupApi.onDelete(query).pipe()\n  }\n  init(query: any) {\n    return forkJoin(this.getGroupList(query))\n  }\n  beforeEach(to: ServiceRoute, from: ServiceRoute) {\n    return this.init(to.meta.query)\n  }\n}\n"],"sourceRoot":""}]}