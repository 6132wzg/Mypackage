{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/multi-line/multi-line.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/multi-line/multi-line.vue","mtime":1598250255716},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.function.name\";\nimport _toConsumableArray from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { View } from 'st-data-set';\nimport { Chart } from '@antv/g2';\nimport { toKFilter as _toKFilter, thousandsFilter, setColorMap, colorToRgba } from \"../filters\";\nimport chartMixin from \"../mixin\";\nexport default {\n  name: 'MultiLine',\n  mixins: [chartMixin],\n  props: {\n    /**\n     * @example\n     * fold 为false [{date:'05-28', key: 2, name: '私教课', value: 20}, {date:'05-28', key: 3, name: '团体课', value: 50}]\n     * fold 为true [{date:'05-28', 私教课:20, 团体课:50, 储值卡:78}]\n     * fold 为true [{date:'05-28', 2:20, 3:50, 5:78}]          2、3、5 分别为 私教课 团体课 储值卡，需通过自定义dataItem 格式化\n     * fold 为true时 fields不能为空, 用于展开数据\n     */\n    fold: {\n      type: Boolean,\n      default: false\n    },\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    dataItem: {\n      type: Function,\n      default: function _default(row) {\n        return row;\n      }\n    },\n    // 设置 图例、x轴、y轴 对应的key值\n    dataItemKeyMap: {\n      type: Object,\n      default: function _default() {\n        return {\n          name: 'name',\n          // 图例名\n          key: 'key',\n          // 图例name对应key值\n          value: 'value',\n          // y轴值\n          date: 'date' // x轴值\n\n        };\n      }\n    },\n    height: {\n      type: Number,\n      default: 280\n    },\n    // 数组排序对应颜色顺序，设置对应字段的颜色；当fold为true时 fields又作为展开字段集,用于字段的展开\n    fields: {\n      type: [Boolean, Array],\n      default: function _default() {\n        return [];\n      }\n    },\n    fieldKey: {\n      type: String,\n      default: 'key'\n    },\n    // 颜色配置数组\n    colors: {\n      type: Array,\n      default: function _default() {\n        return ['#3F66F6', '#798AFF', '#06DB8C', '#77FF74', '#B8F10F', '#FFE679', '#FFB946', '#FF6466', '#C87FFF', '#484F83'];\n      }\n    },\n    // 是否按照颜色数组的顺序 循环设置图例颜色（即图例顺序与colors顺序一一对应），默认为false，根据图例key设置图例颜色\n    colorIsQueue: {\n      type: Boolean,\n      default: false\n    },\n    colorMap: {\n      type: [Object, Array, Boolean],\n      default: false\n    },\n    max: {\n      type: Number,\n      default: 4000\n    }\n  },\n  data: function data() {\n    return {\n      type: 'MultiLine',\n      dv: new View() // MAX: 0\n\n    };\n  },\n  computed: {\n    isEmpty: function isEmpty() {\n      return !this.data || !this.data.length;\n    },\n    dataSource: function dataSource() {\n      // 数据为空时，默认添加一项空数据，保证空统计图的绘制\n      if (!this.data || !this.data.length) {\n        return [{\n          key: 0,\n          name: '',\n          value: 0,\n          date: ''\n        }].concat(_toConsumableArray(this.data));\n      }\n\n      return this.data;\n    },\n\n    /**\n     * 图例枚举配置获取\n     * fieldsKey  为图例名对应的key值数组\n     * fieldsName 为图例名 数组                用于数据展开的依据\n     * fieldsObj  为图例名与其key值 的对应关系\n     * */\n    $fieldsOpts: function $fieldsOpts() {\n      var _this = this;\n\n      var fieldsKey = [];\n      var fieldsName = [];\n      var fieldsObj = {};\n      var data = this.fold ? this.dv.rows : this.dataSource;\n      data.map(function (item) {\n        fieldsKey.push(item[_this.fieldKey]);\n        fieldsName.push(item.name);\n        fieldsObj[item[_this.fieldKey]] = item.name;\n      });\n\n      if (this.fields.length) {\n        fieldsKey = [].concat(_toConsumableArray(this.fields), _toConsumableArray(fieldsKey));\n      }\n\n      fieldsKey = _toConsumableArray(new Set(fieldsKey));\n      fieldsName = _toConsumableArray(new Set(fieldsName));\n      return {\n        colorMap: this.colorMap,\n        fieldsKey: fieldsKey,\n        fieldsName: fieldsName,\n        fieldsObj: fieldsObj\n      };\n    },\n    // 构造颜色map\n    $colorMap: function $colorMap() {\n      // 根据 图例枚举，以图例name为key值，生成图例颜色map对应关系\n      return setColorMap(this.$fieldsOpts, this.colors, this.colorIsQueue);\n    },\n    // 构造阴影颜色map\n    shadowColors: function shadowColors() {\n      var shadowColorMap = {};\n\n      for (var key in this.$colorMap) {\n        shadowColorMap[key] = colorToRgba(this.$colorMap[key], 0.4);\n      }\n\n      return shadowColorMap;\n    },\n    // y轴 最大值设置\n    MAX: function MAX() {\n      var maxValue = this.dv.rows.length ? this.dv.max('value') : this.max;\n      return maxValue > this.max ? maxValue : this.max;\n    }\n  },\n  methods: {\n    toKFilter: function toKFilter(val) {\n      var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      var n = _toKFilter(val);\n\n      return n.toString().indexOf('万') >= 0 ? n : n + unit;\n    },\n    thousandsFilter: thousandsFilter,\n    initDv: function initDv() {\n      var _this2 = this;\n\n      this.dv.source(this.dataSource);\n\n      if (this.fold) {\n        this.dv.transform({\n          type: 'fold',\n          fields: this.$fieldsOpts.fieldsName,\n          key: 'name',\n          value: 'value'\n        });\n      }\n\n      this.dv.transform({\n        type: 'map',\n        callback: function callback(row, index) {\n          // 根据自定义配置项 格式化数据\n          for (var key in _this2.dataItemKeyMap) {\n            var itemDt = row[_this2.dataItemKeyMap[key]];\n            if (itemDt) row[key] = itemDt;\n          }\n\n          ;\n          row.$idx = index, row.value = +row.value;\n          return _this2.dataItem ? _this2.dataItem(row) : row;\n        }\n      });\n    },\n    renderChart: function renderChart() {\n      console.log('chart init', this.dv.rows);\n      this.chart = new Chart(_objectSpread({}, this.opts, {\n        container: this.$el,\n        data: this.dv,\n        forceFit: true,\n        height: this.height,\n        padding: [8, 160, 'auto', 'auto'],\n        renderer: 'svg'\n      }));\n\n      if (this.isEmpty) {\n        this.chart.tooltip(false);\n        this.chart.legend('name', false);\n      }\n\n      this.chart.render();\n    },\n    // 更新opts配置 需要重新计算最新的opts、并重新渲染\n    changeData: function changeData() {\n      this.chart.destroy();\n      this.renderChart();\n    }\n  }\n};",null]}