import { isPlainObject, isString, isArray, isFunction, set } from "./utils"
const decoratorsGenerator = (arg, form, vm) => {
  if (!isPlainObject(arg) && !isFunction(arg)) {
    throw new Error(
      `[vue-st-form]#decorators() shoud pass an object or function but got ${typeof options}`
    )
  }
  let options
  if (isPlainObject(arg)) {
    options = arg
  }
  if (isFunction(arg)) {
    options = arg(vm)
  }
  const _decorators = {}
  const makeAntValidator = (fn, key) => (rule, value, callback) => {
    // 添加try  catch 以抓取运行时错误
    try {
      const res = fn(rule, value, form.getFieldsValue())
      //  如果验证返回undefined 或者true 算通过
      if (res === undefined || res === true) {
        return callback()
      }
      // 验证不通过
      if (res === false) {
        return callback(
          rule.message ||
            rule.defalutMessage ||
            `${key}字段验证未通过`
        )
      }
      if (isString(res)) {
        return callback(res)
      }

      if (res instanceof Promise) {
        return res.then(
          () => {
            callback()
          },
          rejectErr => {
            // console.error(rejectErr)
            callback(rejectErr.message)
          }
        )
      }

      // 其它所有情况算作通过
      return callback()
    } catch (e) {
      console.error(e)
    }
  }
  Object.keys(options).forEach(key => {
    const opt = options[key]
    let decoOpt = opt

    if (opt.rules) {
      if (!isArray(opt.rules)) {
        throw new Error(
          `[vue-st-form] ${key} rules should be Array`
        )
      }
      decoOpt.rules = opt.rules
      opt.rules.forEach(rule => {
        if (rule.validator) {
          rule.validator = makeAntValidator(
            rule.validator,
            key,
            rule
          )
        }
      })
    }

    set(_decorators, key, [key, decoOpt])
  })
  return _decorators
}

export default {
  install(Vue) {
    Vue.mixin({
      beforeCreate() {
        const vm = this
        vm.$stForm = {
          create(antFormOptions = {}) {
            const form = vm.$form.createForm(vm, antFormOptions)

            form.validate = function(options, validateOptions = {}) {
              let validateFileds = undefined
              let formValidateOptions = {
                first: false,
                firstFields: [],
                force: false,
                scroll: {}
              }
              if (isArray(options)) {
                validateFileds = options
                formValidateOptions = Object.assign(
                  formValidateOptions,
                  validateOptions
                )
              } else if (isPlainObject(options)) {
                formValidateOptions = Object.assign(
                  formValidateOptions,
                  options
                )
              } else if (isFunction(options)) {
                return new Promise((resolve, reject) => {
                  // https://github.com/yiminghe/dom-scroll-into-view#function-parameter
                  form.validateFieldsAndScroll(options)
                })
              }
              let forceFields =
                formValidateOptions && formValidateOptions.forceFields
              if (isArray(forceFields)) {
                forceFields.map(field => {
                  form.setFieldsValue({
                    [field]: form.getFieldValue(field)
                  })
                })
              }
              return new Promise((resolve, reject) => {
                // https://github.com/yiminghe/dom-scroll-into-view#function-parameter
                form.validateFieldsAndScroll(
                  validateFileds,
                  formValidateOptions,
                  (errs, values) => {
                    try {
                      if (errs) {
                        reject(errs)
                      } else {
                        resolve(values)
                      }
                    } catch (e) {
                      reject(e)
                    }
                  }
                )
              })
            }
            form.decorators = function(arg) {
              const _decorators = decoratorsGenerator(arg, form, vm)
              form._decorators = _decorators
              return _decorators
            }
            form.addDecorators = function(arg) {
              const _decorators = decoratorsGenerator(arg, form, null)
              const _decoratorsComplex = Object.assign(form._decorators, _decorators)
              form._decorators = _decoratorsComplex
              return _decoratorsComplex
            }
            return form
          }
        }
      }
    })
  }
}
