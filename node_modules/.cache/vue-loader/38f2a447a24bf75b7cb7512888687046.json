{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/image-cropper.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/image-cropper.vue","mtime":1600912105707},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Cropper from 'cropperjs'\nimport { AppConfig } from '@/constants/config'\n\nlet cropper\nexport default {\n  name: 'StModalCropper',\n  serviceInject() {\n    return {\n      appConfig: AppConfig\n    }\n  },\n  data() {\n    return {\n      show: false,\n      filename: ''\n    }\n  },\n  props: {\n    title: {\n      type: String,\n      default: '图片裁剪'\n    },\n    file: {\n      type: null,\n      required: true\n    },\n    cropper: {\n      type: Object,\n      default: () => ({\n        aspectRatio: 16 / 9\n      })\n    }\n  },\n  computed: {\n    _title() {\n      return this.title\n    },\n    _imageUrl() {\n      return URL.createObjectURL(this.file)\n    },\n    _cropperOptions() {\n      return Object.assign(this.appConfig.CROPPER_DEFAULT_CONFIG, this.cropper)\n    }\n  },\n  watch: {\n    image: {\n      deep: true,\n      handler(newVal, oldVal) {\n        console.log(newVal)\n      }\n    }\n  },\n  mounted() {\n    this.init()\n  },\n  methods: {\n    init() {\n      const imageEl = document.getElementById('modal_cropper_image')\n      cropper = new Cropper(imageEl, this._cropperOptions)\n    },\n    handleCancel() {\n      this.$emit('cancel')\n    },\n    handleOk() {\n      cropper.getCroppedCanvas().toBlob(blob => {\n        this.show = false\n        this.$emit('ok', { file: blob })\n      })\n    }\n  }\n}\n",{"version":3,"sources":["image-cropper.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAiBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"image-cropper.vue","sourceRoot":"src/views/biz-modals","sourcesContent":["<template>\n  <st-modal\n    class=\"st-modal-cropper\"\n    :title=\"_title\"\n    v-model=\"show\"\n    @cancel=\"handleCancel\"\n    @ok=\"handleOk\"\n  >\n    <div class=\"st-modal-cropper-content\">\n      <div class=\"st-modal-cropper-image\">\n        <img :src=\"_imageUrl\" id=\"modal_cropper_image\" hidden alt />\n      </div>\n      <p class=\"st-modal-cropper-preview\" id=\"crop_preview\"></p>\n    </div>\n  </st-modal>\n</template>\n<script>\nimport Cropper from 'cropperjs'\nimport { AppConfig } from '@/constants/config'\n\nlet cropper\nexport default {\n  name: 'StModalCropper',\n  serviceInject() {\n    return {\n      appConfig: AppConfig\n    }\n  },\n  data() {\n    return {\n      show: false,\n      filename: ''\n    }\n  },\n  props: {\n    title: {\n      type: String,\n      default: '图片裁剪'\n    },\n    file: {\n      type: null,\n      required: true\n    },\n    cropper: {\n      type: Object,\n      default: () => ({\n        aspectRatio: 16 / 9\n      })\n    }\n  },\n  computed: {\n    _title() {\n      return this.title\n    },\n    _imageUrl() {\n      return URL.createObjectURL(this.file)\n    },\n    _cropperOptions() {\n      return Object.assign(this.appConfig.CROPPER_DEFAULT_CONFIG, this.cropper)\n    }\n  },\n  watch: {\n    image: {\n      deep: true,\n      handler(newVal, oldVal) {\n        console.log(newVal)\n      }\n    }\n  },\n  mounted() {\n    this.init()\n  },\n  methods: {\n    init() {\n      const imageEl = document.getElementById('modal_cropper_image')\n      cropper = new Cropper(imageEl, this._cropperOptions)\n    },\n    handleCancel() {\n      this.$emit('cancel')\n    },\n    handleOk() {\n      cropper.getCroppedCanvas().toBlob(blob => {\n        this.show = false\n        this.$emit('ok', { file: blob })\n      })\n    }\n  }\n}\n</script>\n"]}]}