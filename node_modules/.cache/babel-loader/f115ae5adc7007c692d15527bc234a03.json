{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/vue-service-app/src/index.js","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/vue-service-app/src/index.js","mtime":1591147717498},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _classCallCheck from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport { Container, Inject, InjectionToken, Injectable } from \"./di\";\nimport multiguard from 'vue-router-multiguard';\nimport { isCtor, isFn, last } from \"./utils\";\nimport ServiceRouter from \"./router\";\nimport VuePlugin from \"./vue-plugin\";\nimport { plusHook } from 'vue-router-plus';\nimport createController from \"./controller-mixin\";\nimport { isPlainObject } from 'lodash-es';\n\nvar VueServiceApp = /*#__PURE__*/function () {\n  _createClass(VueServiceApp, null, [{\n    key: \"install\",\n    value: function install(Vue, container) {\n      Vue.use(VuePlugin, container);\n    }\n  }]);\n\n  function VueServiceApp() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$base = _ref.base,\n        base = _ref$base === void 0 ? '/' : _ref$base,\n        _ref$mode = _ref.mode,\n        mode = _ref$mode === void 0 ? 'history' : _ref$mode,\n        _ref$routes = _ref.routes,\n        routes = _ref$routes === void 0 ? [] : _ref$routes,\n        _ref$scrollBehavior = _ref.scrollBehavior,\n        scrollBehavior = _ref$scrollBehavior === void 0 ? function () {} : _ref$scrollBehavior,\n        _ref$container = _ref.container,\n        container = _ref$container === void 0 ? null : _ref$container;\n\n    _classCallCheck(this, VueServiceApp);\n\n    this.routerOptions = {\n      base: base,\n      mode: mode,\n      routes: routes,\n      scrollBehavior: scrollBehavior\n    };\n    /**\n     * @type {Container}\n     */\n\n    this.container = container;\n    /**\n     * @type {ServiceRouter}\n     */\n\n    this.router = null;\n\n    if (!this.container) {\n      throw new Error('[vue-service-app] need container!');\n    } // init\n\n\n    this.initRouter();\n    this.initProvideRouter(); // router.beforeEach\n\n    this.resolveAllHooksHandler();\n    this.guardsHandler();\n    this.controllerHandler();\n    this.afterEachHandler();\n    console.log('[vue-service-app]', this);\n  }\n\n  _createClass(VueServiceApp, [{\n    key: \"initRouter\",\n    value: function initRouter() {\n      // TODO: 可以去掉 直接配置在meta中即可\n      var walkRoutes = function walkRoutes(routes) {\n        routes.forEach(function (route) {\n          if (!route.meta) {\n            route.meta = {};\n          }\n\n          if (route.guards) {\n            route.meta.guards = route.guards || [];\n          }\n\n          route.meta.controller = route.controller;\n\n          if (route.queryOptions) {\n            route.meta.queryOptions = route.queryOptions;\n          }\n\n          if (route.children && route.children.length) {\n            walkRoutes(route.children);\n          }\n        });\n      };\n\n      walkRoutes(this.routerOptions.routes);\n      this.router = new ServiceRouter(this.routerOptions, {\n        maxRedirect: {\n          count: 150,\n          duration: 3000\n        }\n      });\n    }\n    /**\n     * router Provider\n     */\n\n  }, {\n    key: \"initProvideRouter\",\n    value: function initProvideRouter() {\n      this.container.bindValue(ServiceRouter, this.router);\n    }\n  }, {\n    key: \"resolveAllHooksHandler\",\n    value: function resolveAllHooksHandler() {\n      this.router.beforeEach(function (to, from, next) {\n        if (!to.matched.length) {\n          return next();\n        }\n\n        var matched = to.matched;\n        var tasks = [];\n        matched.forEach(function (routeRecord) {\n          // 路由守卫\n          var Guards = routeRecord.meta.guards; // 路由控制器\n\n          var Controller = routeRecord.meta.controller; // 路由组件\n\n          var Component = routeRecord.components.default;\n\n          if (isCtor(Controller)) {\n            routeRecord.Controller = Controller;\n          } else {\n            if (isFn(Controller)) {\n              tasks.push(Controller().then(function (Ctrl) {\n                routeRecord.Controller = Ctrl;\n              }));\n            }\n          }\n\n          if (isPlainObject(Component)) {\n            routeRecord.Component = Component;\n          } else {\n            if (isFn(Component)) {\n              tasks.push(Component().then(function (Comp) {\n                routeRecord.Component = Comp.default;\n              }));\n            }\n          } // resolve 异步 guards\n\n\n          if (Guards && Guards.length) {\n            var GuardsQueue = Guards.filter(function (G) {\n              return isFn(G) || isCtor(G);\n            }).map(function (G) {\n              return isCtor(G) ? Promise.resolve(G) : G();\n            });\n            tasks.push(Promise.all(GuardsQueue).then(function (Gs) {\n              routeRecord.Guards = Gs;\n            }));\n          }\n        });\n\n        if (!tasks.length) {\n          return next();\n        }\n\n        Promise.all(tasks).then(function () {\n          next(); // console.log(matched)\n        });\n      });\n    }\n  }, {\n    key: \"guardsHandler\",\n    value: function guardsHandler() {\n      var _this = this;\n\n      this.router.beforeEach(function (to, from, next) {\n        var matched = to.matched;\n\n        if (!matched) {\n          return next();\n        } // console.log('matched', matched)\n\n\n        var guards = matched.reduce(function (res, routeRecord) {\n          return res.concat(routeRecord.Guards || []);\n        }, []);\n        var middlewares = []; // 同name -> 路由更新的钩子\n\n        if (to.name === from.name) {\n          middlewares = _this._getBeforeMiddlewaresByGuards(guards, 'beforeRouteUpdate');\n        } // 不同name -> guard的路由进入钩子\n\n\n        if (to.name !== from.name) {\n          middlewares = _this._getBeforeMiddlewaresByGuards(guards, 'beforeRouteEnter');\n        }\n\n        if (!middlewares.length) {\n          return next();\n        }\n\n        var plusMiddlewares = middlewares.map(function (fn) {\n          return plusHook(fn);\n        });\n        multiguard(plusMiddlewares)(to, from, next);\n      });\n    }\n  }, {\n    key: \"controllerHandler\",\n    value: function controllerHandler() {\n      var _this2 = this;\n\n      this.router.beforeEach(function (to, from, next) {\n        if (_this2.isControllerMixied) {\n          return next();\n        }\n\n        var matched = to.matched;\n\n        if (!matched.length) {\n          return next();\n        }\n\n        matched.filter(function (routeRecord) {\n          return routeRecord.Controller;\n        }).forEach(function (routeRecord) {\n          if (routeRecord.isControllerMixed) {\n            return;\n          }\n\n          var Component = routeRecord.Component;\n\n          if (Component) {\n            Component.mixins = Component.mixins || [];\n            var controllerMixin = createController(routeRecord.Controller, _this2.container);\n            Component.mixins.unshift(controllerMixin);\n            routeRecord.isControllerMixed = true;\n          }\n        });\n        return next();\n      });\n    }\n    /**\n     * 路由后置处理\n     */\n\n  }, {\n    key: \"afterEachHandler\",\n    value: function afterEachHandler() {\n      var _this3 = this;\n\n      this.router.afterEach(function (to, from) {\n        var matched = to.matched;\n\n        if (!matched.length) {\n          return;\n        }\n\n        matched.reduce(function (res, routeRecord) {\n          return res.concat(routeRecord.Guards || []);\n        }, []).map(function (G) {\n          return _this3.container.get(G);\n        }).filter(function (g) {\n          return g.afterEach;\n        }).reduce(function (res, g) {\n          return res.concat([g.afterEach.bind(g)]);\n        }, []).forEach(function (fn) {\n          fn(to, from);\n        });\n      });\n    }\n    /**\n     * @param {Array<any>} Guards 路由构造函数\n     * @param {string} mode beforeRouteEnter 或  beforeRouteUpdate\n     */\n\n  }, {\n    key: \"_getBeforeMiddlewaresByGuards\",\n    value: function _getBeforeMiddlewaresByGuards(Guards, mode) {\n      var _this4 = this;\n\n      return Guards.map(function (G) {\n        return _this4.container.get(G);\n      }).filter(function (g) {\n        return g.beforeEach || g[mode];\n      }).reduce(function (res, g) {\n        // 加入beforeEach钩子\n        if (g.beforeEach) {\n          res.push(g.beforeEach.bind(g));\n        } // 加入beforeRouteEnter 或 beforeRouteUpdate 钩子\n\n\n        if (g[mode]) {\n          res.push(g[mode].bind(g));\n        }\n\n        return res;\n      }, []);\n    }\n  }]);\n\n  return VueServiceApp;\n}();\n\nexport { ServiceRouter, Inject, InjectionToken, Injectable, Container, createController };\nexport default VueServiceApp;",null]}