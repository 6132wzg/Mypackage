{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/components/select/select-scroll.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/components/select/select-scroll.vue","mtime":1598250255816},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { debounce, isEqual } from 'lodash-es'\n\nexport default {\n  name: 'StSelectScroll',\n  bem: {\n    b: 'st-select-scroll'\n  },\n  model: {\n    props: 'selected',\n    event: 'change'\n  },\n  props: {\n    value: {\n      type: [String, Number, Number],\n      default: undefined\n    },\n    list: {\n      type: Array,\n      default: () => []\n    },\n    labelHtml: {\n      type: Function,\n      default: (label, keyword) => {\n        return label.replace(\n          new RegExp(keyword, 'g'),\n          `\\<span class='global-highlight-color'\\>${keyword}\\<\\/span\\>`\n        )\n      }\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    isSrcoll: {\n      type: Boolean,\n      default: false\n    },\n    isEnd: {\n      type: Boolean,\n      default: false\n    },\n    showSearch: {\n      type: Boolean,\n      default: true\n    },\n    showArrow: {\n      type: Boolean,\n      default: false\n    },\n    allowClear: {\n      type: Boolean,\n      default: false\n    },\n    _label: {\n      type: String,\n      default: 'label'\n    },\n    _value: {\n      type: String,\n      default: 'value'\n    },\n    // 搜索关键词字段名定义， 默认为 keyword， search refresh scroll 三个事件输出的参数为 {keyword: ''}\n    _keyword: {\n      type: String,\n      default: 'keyword'\n    },\n    placeholder: String,\n    // 联动条件\n    query: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      // 搜索关键字\n      keyword: '',\n      selected: undefined\n    }\n  },\n  computed: {\n    lists() {\n      return this.list.map(item => ({\n        label: item[this._label],\n        value: item[this._value]\n      }))\n    },\n    _allowClear() {\n      return this.showSearch ? true : this.allowClear\n    },\n    isSearchNone() {\n      return this.keyword !== '' && !this.list.length\n    }\n  },\n  watch: {\n    value: {\n      handler(v) {\n        this.selected = v\n      },\n      immediate: true\n    },\n    lists: {\n      deep: true,\n      handler(newValue, oldValue) {\n        if (isEqual(newValue, oldValue) || !newValue.length) return\n        // 默认选中第一项 blur时起作用\n        this.selected = newValue[0].value\n      }\n    },\n    // 联动条件刷新监听\n    query: {\n      deep: true,\n      handler(newValue, oldValue) {\n        if (isEqual(newValue, oldValue)) return\n        this.keyword = ''\n        this.$emit('refresh', { ...newValue, [this._keyword]: '' })\n      }\n    }\n  },\n  components: {},\n  created() {\n    this.selected = this.value\n  },\n  methods: {\n    // 搜索事件触发\n    onSearch: debounce(function(val) {\n      console.log(val)\n      let str = val.trim()\n      if (this.keyword === str) return\n      this.keyword = str\n      if (str !== '') {\n        this.$emit('search', { [this._keyword]: str })\n      }\n    }, 200),\n    // 检测清空选中\n    onChange(val) {\n      !val && this.$emit('change', val)\n    },\n    // 选择发生变化\n    onSelect(val) {\n      this.$emit('change', val)\n    },\n    // 搜索框失焦事件\n    onBlur() {\n      this.$emit('blur', this.selected)\n    },\n    // 聚焦时先清空历史搜索\n    onFocus() {\n      this.keyword = ''\n    },\n    // 滚动到底部时触发事件\n    scroll: debounce(function(e) {\n      const { target } = e\n      if (\n        Math.floor(target.scrollTop) + target.clientHeight >\n          target.scrollHeight - 20 &&\n        this.isSrcoll\n      ) {\n        if (!this.loading && !this.isEnd) {\n          this.$emit('scroll', { [this._keyword]: this.keyword })\n        }\n      }\n    }, 200)\n  }\n}\n",{"version":3,"sources":["select-scroll.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"select-scroll.vue","sourceRoot":"src/views/components/select","sourcesContent":["<template>\n  <!-- showArrow属性与suffixIcon 存在冲突，所以showArrow为false时不传 -->\n  <a-select\n    v-model=\"selected\"\n    :class=\"b(showArrow ? 'rotate' : 'no-rotate')\"\n    :showSearch=\"showSearch\"\n    :allowClear=\"_allowClear\"\n    :placeholder=\"placeholder\"\n    :defaultActiveFirstOption=\"true\"\n    :filterOption=\"false\"\n    :getPopupContainer=\"\n      triggerNode => {\n        return triggerNode.parentNode || document.body\n      }\n    \"\n    v-bind=\"{\n      ...(showArrow ? { showArrow } : {}),\n      ...$attrs\n    }\"\n    @popupScroll=\"scroll\"\n    @change=\"onChange\"\n    @search=\"onSearch\"\n    @select=\"onSelect\"\n    @blur=\"onBlur\"\n    @focus=\"onFocus\"\n    ref=\"selectScroll\"\n  >\n    <!-- 搜索图标 -->\n    <span slot=\"suffixIcon\" v-if=\"!showArrow\">\n      <slot name=\"suffixIcon\"><a-icon slot=\"suffixIcon\" type=\"search\" /></slot>\n    </span>\n    <!-- 无数据 -->\n    <span slot=\"notFoundContent\">\n      <slot name=\"notFoundContent\" v-if=\"isSearchNone\"></slot>\n      <slot name=\"notContent\" v-else>\n        <span>无数据</span>\n      </slot>\n    </span>\n\n    <a-select-option\n      v-for=\"(item, index) in lists\"\n      :value=\"item.value\"\n      :key=\"item.value || index\"\n    >\n      <span v-html=\"labelHtml(item.label, keyword)\">\n        {{ item.label }}\n      </span>\n    </a-select-option>\n    <!-- loading -->\n    <a-select-option disabled :key=\"new Date() + Math.random()\" v-if=\"loading\">\n      <a-spin size=\"small\"></a-spin>\n    </a-select-option>\n    <!-- 已经到底啦 -->\n    <a-select-option\n      disabled\n      :key=\"new Date() + Math.random()\"\n      v-if=\"isSrcoll && list.length && isEnd\"\n    >\n      已经到底啦\n    </a-select-option>\n  </a-select>\n</template>\n<script>\nimport { debounce, isEqual } from 'lodash-es'\n\nexport default {\n  name: 'StSelectScroll',\n  bem: {\n    b: 'st-select-scroll'\n  },\n  model: {\n    props: 'selected',\n    event: 'change'\n  },\n  props: {\n    value: {\n      type: [String, Number, Number],\n      default: undefined\n    },\n    list: {\n      type: Array,\n      default: () => []\n    },\n    labelHtml: {\n      type: Function,\n      default: (label, keyword) => {\n        return label.replace(\n          new RegExp(keyword, 'g'),\n          `\\<span class='global-highlight-color'\\>${keyword}\\<\\/span\\>`\n        )\n      }\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    isSrcoll: {\n      type: Boolean,\n      default: false\n    },\n    isEnd: {\n      type: Boolean,\n      default: false\n    },\n    showSearch: {\n      type: Boolean,\n      default: true\n    },\n    showArrow: {\n      type: Boolean,\n      default: false\n    },\n    allowClear: {\n      type: Boolean,\n      default: false\n    },\n    _label: {\n      type: String,\n      default: 'label'\n    },\n    _value: {\n      type: String,\n      default: 'value'\n    },\n    // 搜索关键词字段名定义， 默认为 keyword， search refresh scroll 三个事件输出的参数为 {keyword: ''}\n    _keyword: {\n      type: String,\n      default: 'keyword'\n    },\n    placeholder: String,\n    // 联动条件\n    query: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      // 搜索关键字\n      keyword: '',\n      selected: undefined\n    }\n  },\n  computed: {\n    lists() {\n      return this.list.map(item => ({\n        label: item[this._label],\n        value: item[this._value]\n      }))\n    },\n    _allowClear() {\n      return this.showSearch ? true : this.allowClear\n    },\n    isSearchNone() {\n      return this.keyword !== '' && !this.list.length\n    }\n  },\n  watch: {\n    value: {\n      handler(v) {\n        this.selected = v\n      },\n      immediate: true\n    },\n    lists: {\n      deep: true,\n      handler(newValue, oldValue) {\n        if (isEqual(newValue, oldValue) || !newValue.length) return\n        // 默认选中第一项 blur时起作用\n        this.selected = newValue[0].value\n      }\n    },\n    // 联动条件刷新监听\n    query: {\n      deep: true,\n      handler(newValue, oldValue) {\n        if (isEqual(newValue, oldValue)) return\n        this.keyword = ''\n        this.$emit('refresh', { ...newValue, [this._keyword]: '' })\n      }\n    }\n  },\n  components: {},\n  created() {\n    this.selected = this.value\n  },\n  methods: {\n    // 搜索事件触发\n    onSearch: debounce(function(val) {\n      console.log(val)\n      let str = val.trim()\n      if (this.keyword === str) return\n      this.keyword = str\n      if (str !== '') {\n        this.$emit('search', { [this._keyword]: str })\n      }\n    }, 200),\n    // 检测清空选中\n    onChange(val) {\n      !val && this.$emit('change', val)\n    },\n    // 选择发生变化\n    onSelect(val) {\n      this.$emit('change', val)\n    },\n    // 搜索框失焦事件\n    onBlur() {\n      this.$emit('blur', this.selected)\n    },\n    // 聚焦时先清空历史搜索\n    onFocus() {\n      this.keyword = ''\n    },\n    // 滚动到底部时触发事件\n    scroll: debounce(function(e) {\n      const { target } = e\n      if (\n        Math.floor(target.scrollTop) + target.clientHeight >\n          target.scrollHeight - 20 &&\n        this.isSrcoll\n      ) {\n        if (!this.loading && !this.isEnd) {\n          this.$emit('scroll', { [this._keyword]: this.keyword })\n        }\n      }\n    }, 200)\n  }\n}\n</script>\n"]}]}