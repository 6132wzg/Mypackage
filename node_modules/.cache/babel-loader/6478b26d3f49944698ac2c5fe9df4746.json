{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/staff/department#/tree/tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/staff/department#/tree/tree.vue","mtime":1591147717364},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { TreeToMap } from '@/utils/tree-to-map.js';\nimport TreeItem from \"./tree-item.vue\";\nimport { cloneDeep } from 'lodash-es';\nexport default {\n  name: 'StOrganTree',\n  data: function data() {\n    return {\n      treeDataSelf: {},\n      count: 0\n    };\n  },\n  props: {\n    treeData: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  components: {\n    TreeItem: TreeItem\n  },\n  methods: {\n    onClickItem: function onClickItem(item) {\n      console.log(item);\n    },\n    makeFolder: function makeFolder(item) {\n      Vue.set(item, 'children', []);\n      this.addItem(item);\n    },\n    getNodeItemDetail: function getNodeItemDetail(item) {\n      console.log('getNodeItemDetail', item);\n      this.$emit('node-click', item.id);\n    },\n    traverseTree: function traverseTree(node, tree, opString) {\n      var _this = this;\n\n      return tree.map(function (item) {\n        item[opString] = item.name === node.name; // item.count && (this.count = this.count + item.count)\n\n        var obj = _defineProperty({}, opString, item.name === node.name);\n\n        return item.children ? _objectSpread({}, obj, {\n          name: item.name,\n          children: _this.traverseTree(node, item.children, opString),\n          id: item.id,\n          count: item.count\n        }) : item;\n      });\n    },\n    addItem: function addItem(item) {\n      this.treeDataSelf = this.traverseTree(item, [cloneDeep(this.treeData)], 'isAdd')[0];\n      this.$emit('add-item', item);\n    },\n    editItem: function editItem(item) {\n      this.treeDataSelf = this.traverseTree(item, [cloneDeep(this.treeData)], 'isEdit')[0];\n      this.$emit('edit-item', item);\n    },\n    deleteItem: function deleteItem(item) {\n      this.$emit('delete', item);\n    },\n    updateData: function updateData() {\n      this.$emit('updateData');\n    }\n  },\n  watch: {\n    treeData: function treeData(o) {\n      this.treeDataSelf = cloneDeep(this.treeData);\n    }\n  },\n  mounted: function mounted() {\n    this.treeDataSelf = cloneDeep(this.treeData);\n  }\n};",{"version":3,"sources":["tree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAeA,SAAA,SAAA,QAAA,wBAAA;AACA,OAAA,QAAA;AACA,SAAA,SAAA,QAAA,WAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,EADA;AAEA,MAAA,KAAA,EAAA;AAFA,KAAA;AAIA,GAPA;AAQA,EAAA,KAAA,EAAA;AACA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,oBAAA;AACA,eAAA,EAAA;AACA;AAJA;AADA,GARA;AAgBA,EAAA,UAAA,EAAA;AACA,IAAA,QAAA,EAAA;AADA,GAhBA;AAmBA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,uBACA,IADA,EACA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,IAAA;AACA,KAHA;AAIA,IAAA,UAJA,sBAIA,IAJA,EAIA;AACA,MAAA,GAAA,CAAA,GAAA,CAAA,IAAA,EAAA,UAAA,EAAA,EAAA;AACA,WAAA,OAAA,CAAA,IAAA;AACA,KAPA;AAQA,IAAA,iBARA,6BAQA,IARA,EAQA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,mBAAA,EAAA,IAAA;AACA,WAAA,KAAA,CAAA,YAAA,EAAA,IAAA,CAAA,EAAA;AACA,KAXA;AAYA,IAAA,YAZA,wBAYA,IAZA,EAYA,IAZA,EAYA,QAZA,EAYA;AAAA;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,IAAA,CAAA,QAAA,CAAA,GAAA,IAAA,CAAA,IAAA,KAAA,IAAA,CAAA,IAAA,CADA,CAEA;;AACA,YAAA,GAAA,uBAAA,QAAA,EAAA,IAAA,CAAA,IAAA,KAAA,IAAA,CAAA,IAAA,CAAA;;AACA,eAAA,IAAA,CAAA,QAAA,qBAEA,GAFA;AAGA,UAAA,IAAA,EAAA,IAAA,CAAA,IAHA;AAIA,UAAA,QAAA,EAAA,KAAA,CAAA,YAAA,CAAA,IAAA,EAAA,IAAA,CAAA,QAAA,EAAA,QAAA,CAJA;AAKA,UAAA,EAAA,EAAA,IAAA,CAAA,EALA;AAMA,UAAA,KAAA,EAAA,IAAA,CAAA;AANA,aAQA,IARA;AASA,OAbA,CAAA;AAcA,KA3BA;AA4BA,IAAA,OA5BA,mBA4BA,IA5BA,EA4BA;AACA,WAAA,YAAA,GAAA,KAAA,YAAA,CACA,IADA,EAEA,CAAA,SAAA,CAAA,KAAA,QAAA,CAAA,CAFA,EAGA,OAHA,EAIA,CAJA,CAAA;AAKA,WAAA,KAAA,CAAA,UAAA,EAAA,IAAA;AACA,KAnCA;AAoCA,IAAA,QApCA,oBAoCA,IApCA,EAoCA;AACA,WAAA,YAAA,GAAA,KAAA,YAAA,CACA,IADA,EAEA,CAAA,SAAA,CAAA,KAAA,QAAA,CAAA,CAFA,EAGA,QAHA,EAIA,CAJA,CAAA;AAKA,WAAA,KAAA,CAAA,WAAA,EAAA,IAAA;AACA,KA3CA;AA4CA,IAAA,UA5CA,sBA4CA,IA5CA,EA4CA;AACA,WAAA,KAAA,CAAA,QAAA,EAAA,IAAA;AACA,KA9CA;AA+CA,IAAA,UA/CA,wBA+CA;AACA,WAAA,KAAA,CAAA,YAAA;AACA;AAjDA,GAnBA;AAsEA,EAAA,KAAA,EAAA;AACA,IAAA,QADA,oBACA,CADA,EACA;AACA,WAAA,YAAA,GAAA,SAAA,CAAA,KAAA,QAAA,CAAA;AACA;AAHA,GAtEA;AA2EA,EAAA,OA3EA,qBA2EA;AACA,SAAA,YAAA,GAAA,SAAA,CAAA,KAAA,QAAA,CAAA;AACA;AA7EA,CAAA","sourcesContent":["<template>\n  <ul class=\"st-tree\">\n    <tree-item\n      class=\"item\"\n      :item=\"treeDataSelf\"\n      @make-folder=\"makeFolder\"\n      @add-item=\"addItem\"\n      @edit-item=\"editItem\"\n      @update-data=\"updateData\"\n      @node-item-detail=\"getNodeItemDetail\"\n    ></tree-item>\n  </ul>\n</template>\n\n<script>\nimport { TreeToMap } from '@/utils/tree-to-map.js'\nimport TreeItem from './tree-item.vue'\nimport { cloneDeep } from 'lodash-es'\nexport default {\n  name: 'StOrganTree',\n  data() {\n    return {\n      treeDataSelf: {},\n      count: 0\n    }\n  },\n  props: {\n    treeData: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    }\n  },\n  components: {\n    TreeItem\n  },\n  methods: {\n    onClickItem(item) {\n      console.log(item)\n    },\n    makeFolder(item) {\n      Vue.set(item, 'children', [])\n      this.addItem(item)\n    },\n    getNodeItemDetail(item) {\n      console.log('getNodeItemDetail', item)\n      this.$emit('node-click', item.id)\n    },\n    traverseTree(node, tree, opString) {\n      return tree.map(item => {\n        item[opString] = item.name === node.name\n        // item.count && (this.count = this.count + item.count)\n        const obj = { [opString]: item.name === node.name }\n        return item.children\n          ? {\n              ...obj,\n              name: item.name,\n              children: this.traverseTree(node, item.children, opString),\n              id: item.id,\n              count: item.count\n            }\n          : item\n      })\n    },\n    addItem(item) {\n      this.treeDataSelf = this.traverseTree(\n        item,\n        [cloneDeep(this.treeData)],\n        'isAdd'\n      )[0]\n      this.$emit('add-item', item)\n    },\n    editItem(item) {\n      this.treeDataSelf = this.traverseTree(\n        item,\n        [cloneDeep(this.treeData)],\n        'isEdit'\n      )[0]\n      this.$emit('edit-item', item)\n    },\n    deleteItem(item) {\n      this.$emit('delete', item)\n    },\n    updateData() {\n      this.$emit('updateData')\n    }\n  },\n  watch: {\n    treeData(o) {\n      this.treeDataSelf = cloneDeep(this.treeData)\n    }\n  },\n  mounted() {\n    this.treeDataSelf = cloneDeep(this.treeData)\n  }\n}\n</script>\n"],"sourceRoot":"src/views/pages/brand/staff/department#/tree"}]}