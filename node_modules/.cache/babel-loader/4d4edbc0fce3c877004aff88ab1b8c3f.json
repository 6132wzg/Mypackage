{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/face/recognition.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/face/recognition.vue","mtime":1596188219487},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { OssService } from '@/services/oss.service';\nimport { AppConfig } from '@/constants/config';\nimport { MessageService } from '@/services/message.service';\nimport { RecognitionService } from \"./recognition.service\";\nimport BrowserType from \"./recognition-browser\";\nimport { get } from 'lodash-es';\nexport default {\n  bem: {\n    recognition: 'st-face-recognition'\n  },\n  serviceInject: function serviceInject() {\n    return {\n      oss: OssService,\n      appConfig: AppConfig,\n      messageService: MessageService,\n      recognitionService: RecognitionService\n    };\n  },\n  rxState: function rxState() {\n    return {\n      loading: this.recognitionService.loading$\n    };\n  },\n  props: {\n    fileList: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    props: {\n      type: Object,\n      default: function _default() {\n        return {\n          image_id: 'image_id',\n          image_key: 'image_key',\n          image_url: 'image_url'\n        };\n      }\n    }\n  },\n  data: function data() {\n    return {\n      title: '人脸信息录入',\n      okText: '确认上传',\n      show: false,\n      list: this.fileList,\n      face: null,\n      canvasElm: null,\n      confirmLoading: false,\n      openCameraError: false,\n      // 开启摄像头失败\n      isLoading: false,\n      picWidth: 270,\n      picHeight: 270,\n      canvasCardContext: '',\n      canvasCard: ''\n    };\n  },\n  watch: {\n    fileList: function fileList(newList) {\n      this.list = this.fileList;\n\n      if (this.list.length) {\n        this.face = {\n          url: this.list[0][this.imageUrl],\n          fileKey: this.list[0][this.imageKey]\n        };\n      }\n    },\n    'loading.getMemberCheckResult': function loadingGetMemberCheckResult(v) {\n      this.$emit('loadingChange', v);\n    },\n    progress: function progress(v) {\n      this.$emit('progressChange', v);\n    }\n  },\n  computed: {\n    imageId: function imageId() {\n      return this.props.image_id;\n    },\n    imageKey: function imageKey() {\n      return this.props.image_key;\n    },\n    imageUrl: function imageUrl() {\n      return this.props.image_url;\n    },\n    userImgSrc: function userImgSrc() {\n      return get(this.face, 'url', '');\n    }\n  },\n  created: function created() {\n    // 现在已不需要在兼容firefox\n    // const browserV = BrowserType()\n    // if (browserV === 'FF') {\n    //   this.picHeight = 202\n    // }\n    this.createOutCanvas();\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      if (navigator.mediaDevices.getUserMedia || navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia) {\n        // 调用用户媒体设备, 访问摄像头\n        _this.openCamera();\n\n        _this.canvasElm = _this.$refs.canvas;\n      } else {\n        _this.openCameraError = true;\n        _this.face = null;\n      }\n    });\n  },\n  methods: {\n    // 取消人脸识别图片上传\n    onCancel: function onCancel() {\n      this.show = false;\n    },\n    // 人脸图片上传\n    uploadUserImageFormPhoto: function uploadUserImageFormPhoto(data) {\n      var _this2 = this;\n\n      this.isLoading = true;\n      this.oss.put({\n        business: 'face',\n        isPrivate: true,\n        file: data.file\n      }).subscribe({\n        next: function next(val) {\n          console.log('val', val);\n          _this2.face = val;\n        },\n        error: function error(val) {\n          _this2.messageService.error({\n            content: \"Error \".concat(val.message)\n          });\n\n          _this2.isLoading = false;\n        },\n        complete: function complete() {\n          _this2.isLoading = false;\n        }\n      });\n    },\n    uploadUserImageFormCamera: function uploadUserImageFormCamera(data) {\n      var _this3 = this;\n\n      var canvas = this.canvasElm;\n      canvas.toBlob(function (blob) {\n        _this3.isLoading = true;\n\n        _this3.oss.put({\n          file: blob,\n          isPrivate: true,\n          business: 'face',\n          uploadProgress: function uploadProgress(e) {\n            _this3.progress = parseInt(e.loaded / e.total * 100);\n          }\n        }).subscribe({\n          next: function next(val) {\n            _this3.isLoading = false;\n            _this3.face = val;\n          },\n          error: function error(val) {\n            _this3.isLoading = false;\n\n            _this3.messageService.error({\n              content: \"Error \".concat(val.message)\n            });\n          },\n          complete: function complete() {\n            // 图片上传成功\n            _this3.isLoading = false;\n          }\n        });\n      });\n    },\n    // 图片质量检测\n    uploadUserImageAndQualityTest: function uploadUserImageAndQualityTest() {\n      var _this4 = this;\n\n      var image = this.face;\n      this.recognitionService.getMemberCheckResult({\n        image_key: image.fileKey\n      }).subscribe(function (res) {\n        var isScan = res.is_scan;\n\n        if (isScan) {\n          var imageId = _this4.list.length && _this4.list[0][_this4.imageId];\n          var current = _this4.list.length && _this4.list[0];\n\n          if (current) {\n            current[_this4.imageKey] = image.fileKey;\n          } else {\n            var _this4$list$push;\n\n            _this4.list.push((_this4$list$push = {}, _defineProperty(_this4$list$push, _this4.imageId, 0), _defineProperty(_this4$list$push, _this4.imageKey, image.fileKey), _defineProperty(_this4$list$push, _this4.imageUrl, image.url), _this4$list$push));\n          }\n\n          _this4.$emit('change', _this4.list);\n\n          _this4.show = false;\n        } else {\n          _this4.messageService.error({\n            content: \"\\u4E0A\\u4F20\\u56FE\\u7247\\u8D28\\u91CF\\u4E0D\\u4F73,\\u8BF7\\u91CD\\u65B0\\u62CD\\u7167\"\n          });\n\n          _this4.face = null;\n        }\n      });\n    },\n    // 创建人脸照片绘制所需的canvas\n    createOutCanvas: function createOutCanvas() {\n      this.canvasCard = document.createElement('canvas');\n      this.canvasCard.style.opacity = 0;\n      this.canvasCard.width = this.picWidth;\n      this.canvasCard.height = this.picHeight;\n      this.canvasCard.style.width = this.picWidth + 'px';\n      this.canvasCard.style.height = this.picHeight + 'px';\n      this.canvasCardContext = this.canvasCard.getContext('2d');\n      this.canvasCardContext.fillStyle = '#ffffff';\n      this.canvasCardContext.fillRect(0, 0, this.picWidth, this.picHeight);\n    },\n    // 拍照\n    handlerTakePhoto: function handlerTakePhoto() {\n      // 如果已有用户头像,则对数组操作,去除当前数据\n      if (this.userImgSrc) {\n        this.face = null;\n        return;\n      } // 如果已拍照,显示重拍,点击重新展示相机\n      // 如果未拍照,显示为拍照,点击拍照\n\n\n      var context = this.canvasElm.getContext('2d');\n      var video = this.$refs.video;\n      context.drawImage(video, 0, 0, this.picWidth, this.picHeight); //const imgSrc = this.canvasElm.toDataURL('image/png')\n\n      this.canvasCardContext.drawImage(this.canvasElm, 0, 0, this.picWidth, this.picHeight, 0, 0, this.picWidth, this.picHeight); //this.userImgSrc = this.canvasElm.toDataURL('image/png')\n\n      this.uploadUserImageFormCamera();\n    },\n    // 开启摄像头\n    openCamera: function openCamera() {\n      if (!navigator.mediaDevices.getUserMedia) {\n        navigator.mediaDevices.getUserMedia = function (constraints) {\n          // 首先获取现存的getUserMedia(如果存在)\n          var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.getUserMedia; // 有些浏览器不支持，会返回错误信息\n          // 保持接口一致\n\n          if (!getUserMedia) {\n            this.openCameraError = true;\n            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\n          }\n\n          this.openCameraError = false; // 否则，使用Promise将调用包装到旧的navigator.getUserMedia\n\n          return new Promise(function (resolve, reject) {\n            getUserMedia.call(navigator, constraints, resolve, reject);\n          });\n        };\n      }\n\n      var constraints = {\n        video: {\n          width: this.picWidth,\n          height: this.picHeight\n        }\n      };\n      this.isLoading = true;\n      navigator.mediaDevices.getUserMedia(constraints).then(this.CameraOpensuccess).catch(this.CameraOpenerror);\n    },\n    // 关闭摄像头\n    closeCamera: function closeCamera() {\n      console.log('关闭摄像头');\n      if (!this.$refs['video'].srcObject) return;\n      var stream = this.$refs['video'].srcObject;\n      var tracks = stream.getTracks();\n      tracks.forEach(function (track) {\n        track.stop();\n      });\n      this.$refs['video'].srcObject = null;\n    },\n    // 摄像头开启成功\n    CameraOpensuccess: function CameraOpensuccess(stream) {\n      var video = this.$refs.video;\n\n      if ('srcObject' in video) {\n        video.srcObject = stream;\n      } else {\n        // 避免在新的浏览器中使用它，因为它正在被弃用。\n        video.src = window.URL.createObjectURL(stream);\n      }\n\n      var that = this;\n\n      video.oncanplay = function (e) {\n        console.log('oncanplay');\n        that.isLoading = false;\n      };\n\n      video.onloadedmetadata = function (e) {\n        video.play(); // video.style.transform = 'scaleX(-1)'\n      };\n    },\n    // 摄像呕吐开启失败\n    CameraOpenerror: function CameraOpenerror(error) {\n      console.log(\"error message \".concat(error));\n      this.openCameraError = true;\n      this.isLoading = false;\n    },\n    // 图片uri转化\n    dataURItoBlob: function dataURItoBlob(dataURI) {\n      // 图片转成Buffer\n      var byteString = atob(dataURI.split(',')[1]);\n      var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n      var ab = new ArrayBuffer(byteString.length);\n      var ia = new Uint8Array(ab);\n\n      for (var i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n      }\n\n      return new Blob([ab], {\n        type: mimeString\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.closeCamera();\n  }\n};",null]}