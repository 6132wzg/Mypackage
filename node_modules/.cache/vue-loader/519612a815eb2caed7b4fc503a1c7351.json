{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/brand-stat-line.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/brand-stat-line.vue","mtime":1594864208767},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport { toKFilter, thousandsFilter, setColorMap } from './filters'\nimport { View } from 'st-data-set'\nimport { Chart } from '@antv/g2'\nimport chartMixin from './mixin'\n\nexport default {\n  name: 'BrandStatLine',\n  mixins: [chartMixin],\n  props: {\n    /**\n     * @example\n     * fold 为false [{date:'05-28', name: '私教课', value: 20}, {date:'05-28', name: '团体课', value: 50}]\n     * fold 为true [{date:'05-28',私教课:20,团体课:50,储值卡:78}]\n     * fold 为true时 fields不能为空\n     */\n    fold: {\n      type: Boolean,\n      default: false\n    },\n    data: {\n      type: Array,\n      default: () => []\n    },\n    height: {\n      type: Number,\n      default: 280\n    },\n    // 数组排序对应颜色顺序，设置对应字段的颜色；当fold为true时 fields又作为展开字段集,用于字段的展开\n    fields: {\n      type: [Boolean, Array],\n      default: () => ['其他', '全部']\n    },\n    colorKey: {\n      type: String,\n      default: 'name'\n    },\n    // 颜色数组\n    colors: {\n      type: Array,\n      default: () => [\n        '#3F66F6',\n        '#798AFF',\n        '#06DB8C',\n        '#77FF74',\n        '#B8F10F',\n        '#FFE679',\n        '#FFB946',\n        '#FF6466',\n        '#C87FFF',\n        '#484F83'\n      ]\n    },\n    colorMap: {\n      type: [Object, Boolean],\n      default: false\n    },\n    max: {\n      type: Number,\n      default: 4000\n    }\n  },\n  data() {\n    return {\n      // MAX: 0\n    }\n  },\n  computed: {\n    $fields() {\n      let fields = []\n      if (!this.fields) return [...new Set(this.data.map(item => item.name))]\n      if (this.fields.length) {\n        fields = [...this.fields, ...new Set(this.data.map(item => item.name))]\n      }\n      return fields\n    },\n    // 构造颜色map\n    $colorMap() {\n      if (this.colorMap) return this.colorMap\n      return setColorMap(this.$fields || [], this.colors)\n    },\n    // 构造阴影颜色map\n    shadowColors() {\n      const shadowColorMap = {}\n      for (let key in this.$colorMap) {\n        shadowColorMap[key] = this.colorToRgba(this.$colorMap[key], 0.4)\n      }\n      // this.$fields.map((key, idx) => {\n      //   shadowColorMap[key] = this.colorToRgba(\n      //     this.colors[idx % this.colors.length],\n      //     0.4\n      //   )\n      // })\n      return shadowColorMap\n    },\n    MAX() {\n      const maxValue = this.dv.max('value')\n      return maxValue > this.max ? maxValue : this.max\n    }\n  },\n  methods: {\n    initDv() {\n      this.dv = new View()\n      this.dv.source(this.data)\n      if (this.fold) {\n        this.dv.transform({\n          type: 'fold',\n          fields: this.$fields,\n          key: 'name',\n          value: 'value'\n        })\n      }\n      this.dv.transform({\n        type: 'map',\n        callback: (row, index) => {\n          ;(row.$idx = index), (row.value = +row.value)\n          return row\n        }\n      })\n    },\n    changeData() {\n      this.chart.destroy()\n      this.initChart()\n    },\n    initChart() {\n      this.getChartInstance()\n      this.chart.source(this.dv, {\n        date: {\n          tickCount: 7,\n          range: [0, 1]\n        },\n        value: {\n          max: +this.MAX,\n          min: 0,\n          tickCount: 8,\n          formatter: toKFilter,\n          sync: true\n        }\n      })\n      this.setAxis()\n      this.setLegend()\n      this.getLineChart()\n      this.chart.render()\n    },\n    getChartInstance() {\n      this.chart = new Chart({\n        container: this.$el,\n        forceFit: true,\n        height: this.height,\n        padding: [8, 160, 'auto', 'auto'],\n        renderer: 'svg'\n      })\n    },\n    setAxis() {\n      this.chart.axis('date', {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        tickLine: {\n          lineWidth: 0,\n          length: 0\n        }\n      })\n      this.chart.axis('value', {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        grid: {\n          lineStyle: {\n            lineWidth: 0.5,\n            lineDash: [0, 0]\n          }\n        }\n      })\n    },\n    setLegend() {\n      this.chart.legend('name', {\n        position: 'right-center',\n        itemWidth: 80,\n        useHtml: true,\n        textStyle: {\n          fill: '#3E4D5C'\n        },\n        itemTpl: () => {\n          return (\n            '<li class=\"g2-legend-list-item item-{index} {checked}\" data-color=\"{originColor}\" data-value=\"{originValue}\">' +\n            `<span class=\"g2-legend-marker\" style=\"background-color:{color};\"></span>` +\n            ` <span class=\"g2-legend-text\">{value}</span>` +\n            '</li>'\n          )\n        }\n      })\n    },\n    getLineChart() {\n      this.chart\n        .line()\n        .style(`name*${this.colorKey}`, {\n          shadowColor: (name, key) => {\n            console.log('shadowColor', name, key)\n            return this.shadowColors[name]\n          },\n          shadowBlur: 20,\n          shadowOffsetY: 4\n        })\n        .tooltip('name*value', (name, value) => {\n          return {\n            name,\n            value: '¥' + thousandsFilter(value)\n          }\n        })\n        .shape('smooth')\n        .size(2)\n        .position('date*value')\n        .color(`name*${this.colorKey}`, (name, key) => {\n          console.log('color', name, key)\n          return this.$colorMap[name]\n        })\n    },\n\n    colorToRgba(str = '', opacity) {\n      const reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/\n      let color = str.toLowerCase()\n      if (reg.test(color)) {\n        if (color.length === 4) {\n          let colorNew = '#'\n          for (let i = 1; i < 4; i += 1) {\n            colorNew += color.slice(i, i + 1).concat(color.slice(i, i + 1))\n          }\n          color = colorNew\n        }\n        let colorChange = []\n        for (let i = 1; i < 7; i += 2) {\n          colorChange.push(parseInt('0x' + color.slice(i, i + 2)))\n        }\n        return `RGB(${colorChange.join(',')},${opacity})`\n      } else {\n        return color\n      }\n    }\n  }\n}\n",{"version":3,"sources":["brand-stat-line.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"brand-stat-line.vue","sourceRoot":"src/views/biz-components/stat","sourcesContent":["<template>\n  <div class=\"brand-stat-line\"></div>\n</template>\n\n<script>\nimport { toKFilter, thousandsFilter, setColorMap } from './filters'\nimport { View } from 'st-data-set'\nimport { Chart } from '@antv/g2'\nimport chartMixin from './mixin'\n\nexport default {\n  name: 'BrandStatLine',\n  mixins: [chartMixin],\n  props: {\n    /**\n     * @example\n     * fold 为false [{date:'05-28', name: '私教课', value: 20}, {date:'05-28', name: '团体课', value: 50}]\n     * fold 为true [{date:'05-28',私教课:20,团体课:50,储值卡:78}]\n     * fold 为true时 fields不能为空\n     */\n    fold: {\n      type: Boolean,\n      default: false\n    },\n    data: {\n      type: Array,\n      default: () => []\n    },\n    height: {\n      type: Number,\n      default: 280\n    },\n    // 数组排序对应颜色顺序，设置对应字段的颜色；当fold为true时 fields又作为展开字段集,用于字段的展开\n    fields: {\n      type: [Boolean, Array],\n      default: () => ['其他', '全部']\n    },\n    colorKey: {\n      type: String,\n      default: 'name'\n    },\n    // 颜色数组\n    colors: {\n      type: Array,\n      default: () => [\n        '#3F66F6',\n        '#798AFF',\n        '#06DB8C',\n        '#77FF74',\n        '#B8F10F',\n        '#FFE679',\n        '#FFB946',\n        '#FF6466',\n        '#C87FFF',\n        '#484F83'\n      ]\n    },\n    colorMap: {\n      type: [Object, Boolean],\n      default: false\n    },\n    max: {\n      type: Number,\n      default: 4000\n    }\n  },\n  data() {\n    return {\n      // MAX: 0\n    }\n  },\n  computed: {\n    $fields() {\n      let fields = []\n      if (!this.fields) return [...new Set(this.data.map(item => item.name))]\n      if (this.fields.length) {\n        fields = [...this.fields, ...new Set(this.data.map(item => item.name))]\n      }\n      return fields\n    },\n    // 构造颜色map\n    $colorMap() {\n      if (this.colorMap) return this.colorMap\n      return setColorMap(this.$fields || [], this.colors)\n    },\n    // 构造阴影颜色map\n    shadowColors() {\n      const shadowColorMap = {}\n      for (let key in this.$colorMap) {\n        shadowColorMap[key] = this.colorToRgba(this.$colorMap[key], 0.4)\n      }\n      // this.$fields.map((key, idx) => {\n      //   shadowColorMap[key] = this.colorToRgba(\n      //     this.colors[idx % this.colors.length],\n      //     0.4\n      //   )\n      // })\n      return shadowColorMap\n    },\n    MAX() {\n      const maxValue = this.dv.max('value')\n      return maxValue > this.max ? maxValue : this.max\n    }\n  },\n  methods: {\n    initDv() {\n      this.dv = new View()\n      this.dv.source(this.data)\n      if (this.fold) {\n        this.dv.transform({\n          type: 'fold',\n          fields: this.$fields,\n          key: 'name',\n          value: 'value'\n        })\n      }\n      this.dv.transform({\n        type: 'map',\n        callback: (row, index) => {\n          ;(row.$idx = index), (row.value = +row.value)\n          return row\n        }\n      })\n    },\n    changeData() {\n      this.chart.destroy()\n      this.initChart()\n    },\n    initChart() {\n      this.getChartInstance()\n      this.chart.source(this.dv, {\n        date: {\n          tickCount: 7,\n          range: [0, 1]\n        },\n        value: {\n          max: +this.MAX,\n          min: 0,\n          tickCount: 8,\n          formatter: toKFilter,\n          sync: true\n        }\n      })\n      this.setAxis()\n      this.setLegend()\n      this.getLineChart()\n      this.chart.render()\n    },\n    getChartInstance() {\n      this.chart = new Chart({\n        container: this.$el,\n        forceFit: true,\n        height: this.height,\n        padding: [8, 160, 'auto', 'auto'],\n        renderer: 'svg'\n      })\n    },\n    setAxis() {\n      this.chart.axis('date', {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        tickLine: {\n          lineWidth: 0,\n          length: 0\n        }\n      })\n      this.chart.axis('value', {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        grid: {\n          lineStyle: {\n            lineWidth: 0.5,\n            lineDash: [0, 0]\n          }\n        }\n      })\n    },\n    setLegend() {\n      this.chart.legend('name', {\n        position: 'right-center',\n        itemWidth: 80,\n        useHtml: true,\n        textStyle: {\n          fill: '#3E4D5C'\n        },\n        itemTpl: () => {\n          return (\n            '<li class=\"g2-legend-list-item item-{index} {checked}\" data-color=\"{originColor}\" data-value=\"{originValue}\">' +\n            `<span class=\"g2-legend-marker\" style=\"background-color:{color};\"></span>` +\n            ` <span class=\"g2-legend-text\">{value}</span>` +\n            '</li>'\n          )\n        }\n      })\n    },\n    getLineChart() {\n      this.chart\n        .line()\n        .style(`name*${this.colorKey}`, {\n          shadowColor: (name, key) => {\n            console.log('shadowColor', name, key)\n            return this.shadowColors[name]\n          },\n          shadowBlur: 20,\n          shadowOffsetY: 4\n        })\n        .tooltip('name*value', (name, value) => {\n          return {\n            name,\n            value: '¥' + thousandsFilter(value)\n          }\n        })\n        .shape('smooth')\n        .size(2)\n        .position('date*value')\n        .color(`name*${this.colorKey}`, (name, key) => {\n          console.log('color', name, key)\n          return this.$colorMap[name]\n        })\n    },\n\n    colorToRgba(str = '', opacity) {\n      const reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/\n      let color = str.toLowerCase()\n      if (reg.test(color)) {\n        if (color.length === 4) {\n          let colorNew = '#'\n          for (let i = 1; i < 4; i += 1) {\n            colorNew += color.slice(i, i + 1).concat(color.slice(i, i + 1))\n          }\n          color = colorNew\n        }\n        let colorChange = []\n        for (let i = 1; i < 7; i += 2) {\n          colorChange.push(parseInt('0x' + color.slice(i, i + 2)))\n        }\n        return `RGB(${colorChange.join(',')},${opacity})`\n      } else {\n        return color\n      }\n    }\n  }\n}\n</script>\n"]}]}