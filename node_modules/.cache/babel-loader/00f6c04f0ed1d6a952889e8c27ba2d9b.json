{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/sold/card/list/member.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/sold/card/list/member.vue","mtime":1597895242241},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport moment from 'moment';\nimport { cloneDeep, filter } from 'lodash-es';\nimport { MemberService } from \"./member.service\";\nimport tableMixin from '@/mixins/table.mixin';\nimport { columns, totalColumns } from \"./member.config\";\nimport StTotal from '@/views/biz-components/st/total/total.vue';\nimport SoldCardArea from '@/views/biz-modals/sold/card/area';\nimport SoldCardBatchArea from '@/views/biz-modals/sold/card/batch-area';\nimport SoldCardBatchEnterTime from '@/views/biz-modals/sold/card/batch-enter-time';\nimport SoldCardFreeze from '@/views/biz-modals/sold/card/freeze';\nimport SoldCardGiving from '@/views/biz-modals/sold/card/giving';\nimport SoldCardRefund from '@/views/biz-modals/sold/card/refund';\nimport SoldCardSetTime from '@/views/biz-modals/sold/card/set-time';\nimport SoldCardTransfer from '@/views/biz-modals/sold/card/transfer';\nimport SoldCardExtendDay from '@/views/biz-modals/sold/card/extend-day';\nimport SoldCardReactive from '@/views/biz-modals/sold/card/reactive';\nimport SoldCardMemberReactive from '@/views/biz-modals/sold/card/member/reactive';\nimport useCardActions from '@/hooks/card-actions.hook';\nimport CommonTaskSuccessTip from '@/views/biz-modals/common/task/success-tip';\nimport useInternalNoteActions from '@/hooks/shop/sold-internal-note-actions.hook';\nimport soldMemberCardActions from '@/hooks/sold/member-card-actions.hook';\nexport default {\n  name: 'PageShopSoldCardMemberList',\n  mixins: [tableMixin],\n  bem: {\n    basic: 'page-shop-sold'\n  },\n  components: {\n    StTotal: StTotal\n  },\n  modals: {\n    SoldCardArea: SoldCardArea,\n    SoldCardFreeze: SoldCardFreeze,\n    SoldCardGiving: SoldCardGiving,\n    SoldCardRefund: SoldCardRefund,\n    SoldCardSetTime: SoldCardSetTime,\n    SoldCardTransfer: SoldCardTransfer,\n    CommonTaskSuccessTip: CommonTaskSuccessTip,\n    SoldCardBatchArea: SoldCardBatchArea,\n    SoldCardBatchEnterTime: SoldCardBatchEnterTime,\n    SoldCardExtendDay: SoldCardExtendDay,\n    SoldCardMemberReactive: SoldCardMemberReactive,\n    SoldCardReactive: SoldCardReactive\n  },\n  serviceInject: function serviceInject() {\n    return {\n      memberService: MemberService\n    };\n  },\n  rxState: function rxState() {\n    return {\n      loading: this.memberService.loading$,\n      list: this.memberService.list$,\n      page: this.memberService.page$,\n      cardTypes: this.memberService.cardTypes$,\n      cardStatus: this.memberService.cardStatus$,\n      isOpens: this.memberService.isOpens$,\n      total: this.memberService.total$,\n      auth: this.memberService.auth$\n    };\n  },\n  beforeCreate: function beforeCreate() {\n    var _this = this;\n\n    this.cardActions.$on('refresh', function (val) {\n      _this.$router.reload();\n    });\n  },\n  hooks: function hooks() {\n    return {\n      cardActions: useCardActions(),\n      internalNoteActions: useInternalNoteActions(),\n      soldMemberCardActions: soldMemberCardActions(this)\n    };\n  },\n  computed: {\n    conditions: function conditions() {\n      var conditions = _objectSpread({}, this.$searchQuery, {\n        is_valid: this.$searchQuery.card_status\n      });\n\n      return conditions;\n    },\n    columns: columns,\n    totalColumns: totalColumns,\n    // 列表选择的卡是否一致\n    isUnifyCard: function isUnifyCard() {\n      var _this2 = this;\n\n      return this.selectedRows.length > 0 && this.selectedRows.every(function (o) {\n        return o.card_type === _this2.selectedRows[0].card_type;\n      });\n    }\n  },\n  data: function data() {\n    return {\n      action: {\n        /**\n         * 赠送额度\n         */\n        giving: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n\n        /**\n         * 变更入场vip区域\n         */\n        area: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n\n        /**\n         * 变更入场vip区域\n         */\n        endTime: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n\n        /**\n         * 延长卡有效期\n         */\n        extendDay: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n\n        /**\n         * 重新激活\n         */\n        reactive: {\n          isAvaliable: false,\n          isShowTip: false\n        }\n      },\n      // 结束时间面板是否显示\n      endOpen: false,\n      selectedRowKeys: [],\n      selectedRows: [],\n      // diffSelectedRows: [],\n      date: []\n    };\n  },\n  mounted: function mounted() {\n    this.setSearchData();\n  },\n  watch: {\n    query: function query(newVal) {\n      this.setSearchData();\n    }\n  },\n  methods: {\n    disabledSelect: function disabledSelect(record) {\n      return false;\n    },\n    // 查询\n    onSearchNative: function onSearchNative() {\n      this.$searchQuery.start_time = this.date[0] ? \"\".concat(this.date[0].format('YYYY-MM-DD'), \" 00:00:00\") : '';\n      this.$searchQuery.end_time = this.date[1] ? \"\".concat(this.date[1].format('YYYY-MM-DD'), \" 23:59:59\") : '';\n      this.onSearch();\n    },\n    onSearchResetNative: function onSearchResetNative() {\n      this.date = [null, null];\n      this.onSearchReset();\n    },\n    // 设置searchData\n    setSearchData: function setSearchData() {\n      var start = this.$searchQuery.start_time ? cloneDeep(moment(this.$searchQuery.start_time)) : null;\n      var end = this.$searchQuery.end_time ? cloneDeep(moment(this.$searchQuery.end_time)) : null;\n      this.date = [start, end];\n    },\n    // moment\n    moment: moment,\n    // 列表选择\n    onSelectChange: function onSelectChange(selectedRowKeys, selectedRows) {\n      this.checkSelectedRows(selectedRows, 'card_type', 'giving', function () {\n        var isAvaliable;\n        var firstItem = selectedRows[0];\n        var diffSelectedRows = selectedRows.filter(function (item) {\n          return item.card_type !== firstItem.card_type;\n        });\n        return !selectedRows.filter(function (item) {\n          return !item.is_open;\n        }).length && !diffSelectedRows.length;\n      });\n      this.checkSelectedRows(selectedRows, 'is_open', 'area', function () {\n        return !selectedRows.filter(function (item) {\n          return !item.is_open;\n        }).length;\n      });\n      this.checkSelectedRows(selectedRows, 'is_open', 'endTime', function () {\n        return !selectedRows.filter(function (item) {\n          return !item.is_open;\n        }).length;\n      });\n      this.checkSelectedRows(selectedRows, 'is_open', 'extendDay', function () {\n        return !selectedRows.filter(function (item) {\n          return !item.is_open;\n        }).length;\n      });\n      this.checkSelectedRows(selectedRows, 'is_open', 'reactive', function () {\n        return selectedRows.filter(function (item) {\n          return item.card_status === 2 && item.is_refund.id === 0;\n        }).length === selectedRows.length;\n      });\n      this.selectedRowKeys = selectedRowKeys;\n      this.selectedRows = selectedRows;\n    },\n    checkSelectedRows: function checkSelectedRows(selectedRows, key, targetDataKey, checkFn) {\n      var _this3 = this;\n\n      this.action[targetDataKey].isShowTip = false;\n      var isAvaliable = checkFn();\n      this.action[targetDataKey].isAvaliable = selectedRows.length && isAvaliable;\n\n      if (!isAvaliable) {\n        this.action[targetDataKey].isShowTip = true;\n        var timerKey = \"timer_\".concat(targetDataKey);\n        clearTimeout(this[timerKey]);\n        this[timerKey] = setTimeout(function () {\n          _this3.action[targetDataKey].isShowTip = false;\n        }, 2000);\n      }\n    },\n    // 详情\n    onDetail: function onDetail(record) {\n      this.$router.push({\n        path: \"/shop/sold/card/info/member/info/operation-record\",\n        query: {\n          id: record.id,\n          card_type: record.card_type\n        }\n      });\n    },\n    // 冻结\n    onFreeze: function onFreeze(record) {\n      var _this4 = this;\n\n      this.$modalRouter.push({\n        name: 'sold-card-freeze',\n        props: {\n          id: record.id\n        },\n        on: {\n          success: function success() {\n            _this4.$router.reload();\n          }\n        }\n      });\n    },\n    // 取消冻结\n    onUnfreeze: function onUnfreeze(record) {\n      var _this5 = this;\n\n      this.$confirm({\n        title: '提示',\n        content: '是否取消冻结？',\n        maskClosable: true,\n        onOk: function onOk() {\n          return _this5.memberService.unFreeze(record.id).toPromise().then(function () {\n            _this5.$router.reload();\n          });\n        }\n      });\n    },\n    // 退款\n    onRefund: function onRefund(record) {\n      var _this6 = this;\n\n      this.$modalRouter.push({\n        name: 'sold-card-refund',\n        props: {\n          type: 'member',\n          id: record.id\n        },\n        on: {\n          success: function success() {\n            _this6.$router.reload();\n          }\n        }\n      });\n    },\n    // 重新激活\n    onReactive: function onReactive(record) {\n      var _this7 = this;\n\n      this.$modalRouter.push({\n        name: 'sold-card-member-reactive',\n        props: {\n          id: record.id\n        },\n        on: {\n          success: function success() {\n            _this7.$router.reload();\n          }\n        }\n      });\n    },\n    // 跳转合同\n    toContract: function toContract(record) {\n      var url = \"\".concat(window.location.origin, \"/common/contract-preview?id=\").concat(record.order_id);\n      window.open(url);\n    },\n    // 转让\n    onTransfer: function onTransfer(record) {\n      var _this8 = this;\n\n      this.$modalRouter.push({\n        name: 'sold-card-transfer',\n        props: {\n          id: record.id,\n          type: 'member'\n        },\n        on: {\n          success: function success() {\n            _this8.$router.reload();\n          }\n        }\n      });\n    },\n    // 修改有效时间\n    onSetTime: function onSetTime(record) {\n      var _this9 = this;\n\n      this.$modalRouter.push({\n        name: 'sold-card-set-time',\n        props: {\n          id: record.id\n        },\n        on: {\n          success: function success() {\n            _this9.$router.reload();\n          }\n        }\n      });\n    },\n    // 变更vip入场区域\n    onArea: function onArea(record) {\n      var _this10 = this;\n\n      this.$modalRouter.push({\n        name: 'sold-card-area',\n        props: {\n          id: [record.id]\n        },\n        on: {\n          success: function success() {\n            _this10.$router.reload();\n          }\n        }\n      });\n    },\n    // 批量变更vip入场区域\n    onAreas: function onAreas() {\n      var _this11 = this;\n\n      this.$modalRouter.push({\n        name: 'sold-card-batch-area',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: cloneDeep(this.$searchQuery)\n        },\n        on: {\n          success: function success() {\n            _this11.successTip();\n          }\n        }\n      });\n    },\n    // 批量变更入场时间段\n    onEnterTime: function onEnterTime() {\n      var _this12 = this;\n\n      this.$modalRouter.push({\n        name: 'sold-card-batch-enter-time',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: cloneDeep(this.$searchQuery)\n        },\n        on: {\n          success: function success() {\n            _this12.successTip();\n          }\n        }\n      });\n    },\n    // 额度赠送\n    onGiving: function onGiving() {\n      var _this13 = this;\n\n      this.$modalRouter.push({\n        name: 'sold-card-giving',\n        props: {\n          ids: this.selectedRowKeys,\n          type: this.selectedRows[0].card_type,\n          unit: this.selectedRows[0].unit,\n          searchQuery: cloneDeep(this.$searchQuery)\n        },\n        on: {\n          success: function success() {\n            _this13.successTip();\n          }\n        }\n      });\n    },\n    successTip: function successTip() {\n      var _this14 = this;\n\n      this.$modalRouter.push({\n        name: 'common-task-success-tip',\n        on: {\n          success: function success() {\n            _this14.$router.reload();\n\n            _this14.onClear();\n          }\n        }\n      });\n    },\n    onClear: function onClear() {\n      this.selectedRowKeys = [];\n      this.selectedRows = [];\n    },\n    onExtendDays: function onExtendDays() {\n      var _this15 = this;\n\n      this.$modalRouter.push({\n        name: 'sold-card-extend-day',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: this.$searchQuery\n        },\n        on: {\n          success: function success() {\n            _this15.successTip();\n          }\n        }\n      });\n    },\n    onReactiveBatch: function onReactiveBatch() {\n      var _this16 = this;\n\n      this.$modalRouter.push({\n        name: 'sold-card-reactive',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: this.$searchQuery\n        },\n        on: {\n          success: function success() {\n            _this16.successTip();\n          }\n        }\n      });\n    }\n  }\n};",null]}