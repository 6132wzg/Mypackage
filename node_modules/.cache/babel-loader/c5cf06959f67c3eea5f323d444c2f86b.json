{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/area.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/area.vue","mtime":1600926382166},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\nimport G2 from '@antv/g2';\nvar defaultOptions = {\n  /**\n   * 指定图表的高度，单位为 'px\n   */\n  height: 300,\n\n  /**\n   * 设置图表的内边距\n   */\n  padding: 'auto',\n  fieldNames: {\n    x: 'year',\n    y: 'value'\n  },\n  lineColor: '#258EF9',\n  lineWidth: 2,\n\n  /**\n   * 使用渐变色，l 后面传入角度，0 代表起始颜色，1 代表结束颜色\n   */\n  areaColor: 'l(90) 0:rgba(63, 102, 246, .2) 1:rgba(0, 202, 255, 0)'\n};\nexport default {\n  name: 'StAreaChart',\n  props: {\n    /**\n     * 图表id\n     */\n    id: {\n      type: String,\n      default: 'area-chart'\n    },\n\n    /**\n     * 面积图类型\n     */\n    type: {\n      type: String,\n      default: 'basic'\n    },\n\n    /**\n     * 图表数据\n     */\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    options: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.renderChart();\n  },\n  methods: {\n    renderChart: function renderChart() {\n      var opts = Object.assign(defaultOptions, this.options);\n      var _opts$fieldNames = opts.fieldNames,\n          x = _opts$fieldNames.x,\n          y = _opts$fieldNames.y;\n      G2.track(false); // 关闭打点监控\n\n      var chart = new G2.Chart(_objectSpread({\n        container: this.id,\n        forceFit: true\n      }, opts));\n      chart.source(this.data);\n      chart.scale(_defineProperty({}, x, {\n        range: [0, 1]\n      }));\n      chart.axis(x, {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          },\n          tickLine: null\n        },\n        tickLine: {\n          alignWithLabel: false,\n          length: 0\n        }\n      });\n      chart.axis(y, {\n        label: {\n          formatter: function formatter(val) {\n            return (val / 10000).toFixed(1) + 'k';\n          },\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        grid: {\n          type: 'line',\n          lineStyle: {\n            stroke: '#E6E9EF',\n            // 网格线的颜色\n            lineWidth: 1,\n            // 网格线的粗细\n            lineDash: [0, 0] // 网格线的虚线配置，第一个参数描述虚线的实部占多少像素，第二个参数描述虚线的虚部占多少像素\n\n          }\n        }\n      });\n      chart.tooltip({\n        crosshairs: {\n          type: 'line'\n        }\n      });\n      chart.area().position([x, y]).color(opts.areaColor).shape('smooth');\n      chart.line().position([x, y]).color(opts.lineColor).size(opts.lineWidth).shape('smooth');\n      chart.render();\n    }\n  }\n};",{"version":3,"sources":["area.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div :id=\"id\"></div>\n</template>\n<script>\nimport G2 from '@antv/g2'\nconst defaultOptions = {\n  /**\n   * 指定图表的高度，单位为 'px\n   */\n  height: 300,\n  /**\n   * 设置图表的内边距\n   */\n  padding: 'auto',\n  fieldNames: {\n    x: 'year',\n    y: 'value'\n  },\n  lineColor: '#258EF9',\n  lineWidth: 2,\n  /**\n   * 使用渐变色，l 后面传入角度，0 代表起始颜色，1 代表结束颜色\n   */\n  areaColor: 'l(90) 0:rgba(63, 102, 246, .2) 1:rgba(0, 202, 255, 0)'\n}\nexport default {\n  name: 'StAreaChart',\n  props: {\n    /**\n     * 图表id\n     */\n    id: {\n      type: String,\n      default: 'area-chart'\n    },\n    /**\n     * 面积图类型\n     */\n    type: {\n      type: String,\n      default: 'basic'\n    },\n    /**\n     * 图表数据\n     */\n    data: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    options: {\n      type: Object,\n      default() {\n        return {}\n      }\n    }\n  },\n  mounted() {\n    this.renderChart()\n  },\n  methods: {\n    renderChart() {\n      const opts = Object.assign(defaultOptions, this.options)\n      const { x, y } = opts.fieldNames\n      G2.track(false) // 关闭打点监控\n      const chart = new G2.Chart({\n        container: this.id,\n        forceFit: true,\n        ...opts\n      })\n      chart.source(this.data)\n      chart.scale({\n        [x]: {\n          range: [0, 1]\n        }\n      })\n      chart.axis(x, {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          },\n          tickLine: null\n        },\n        tickLine: {\n          alignWithLabel: false,\n          length: 0\n        }\n      })\n      chart.axis(y, {\n        label: {\n          formatter: function formatter(val) {\n            return (val / 10000).toFixed(1) + 'k'\n          },\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        grid: {\n          type: 'line',\n          lineStyle: {\n            stroke: '#E6E9EF', // 网格线的颜色\n            lineWidth: 1, // 网格线的粗细\n            lineDash: [0, 0] // 网格线的虚线配置，第一个参数描述虚线的实部占多少像素，第二个参数描述虚线的虚部占多少像素\n          }\n        }\n      })\n      chart.tooltip({\n        crosshairs: {\n          type: 'line'\n        }\n      })\n      chart\n        .area()\n        .position([x, y])\n        .color(opts.areaColor)\n        .shape('smooth')\n      chart\n        .line()\n        .position([x, y])\n        .color(opts.lineColor)\n        .size(opts.lineWidth)\n        .shape('smooth')\n      chart.render()\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views/biz-components/chart"}]}