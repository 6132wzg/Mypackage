{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/sold/course/list/package.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/sold/course/list/package.vue","mtime":1596792848083},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { cloneDeep, filter } from 'lodash-es'\nimport { PackageService } from './package.service'\nimport tableMixin from '@/mixins/table.mixin'\nimport { columns, totalColumns } from './package.config'\nimport StTotal from '@/views/biz-components/st/total/total.vue'\nimport SoldCourseFreeze from '@/views/biz-modals/sold/course/freeze'\nimport SoldCourseRefund from '@/views/biz-modals/sold/course/refund'\nimport SoldCourseSurplus from '@/views/biz-modals/sold/course/surplus'\nimport SoldCourseTransfer from '@/views/biz-modals/sold/course/transfer'\nimport SoldCourseScope from '@/views/biz-modals/sold/course/scope'\nimport SoldCourseValid from '@/views/biz-modals/sold/course/valid'\nimport SoldCoursePackageReactive from '@/views/biz-modals/sold/course/package/reactive'\nimport SoldCoursePackageUpgrade from '@/views/biz-modals/sold/course/package/upgrade'\nimport SoldCoursePackageUpdateExpirationDate from '@/views/biz-modals/sold/course/package/update-expiration-date'\nimport SoldCoursePackageReactiveBatch from '@/views/biz-modals/sold/course/package/reactive-batch'\nimport SoldCoursePackageExtendDay from '@/views/biz-modals/sold/course/package/extend-day'\nimport SoldCoursePackageDeduction from '@/views/biz-modals/sold/course/package/deduction'\nimport SoldCoursePackageMembeChange from '@/views/biz-modals/sold/course/package/member-change'\nimport SoldCoursePackageExtendDayBatch from '@/views/biz-modals/sold/course/package/extend-day-batch'\nimport CommonTaskSuccessTip from '@/views/biz-modals/common/task/success-tip'\nimport DealGathering from '@/views/biz-modals/sold/deal/gathering'\nimport { PACKAGE_TYPE, IS_LIMIT } from '@/constants/sold/package'\nimport useInternalNoteActions from '@/hooks/shop/sold-internal-note-actions.hook'\nimport { PRODUCT_TYPE } from '@/constants/sold/transaction'\nexport default {\n  name: 'PageShopSoldCoursePackageList',\n  mixins: [tableMixin],\n  bem: {\n    basic: 'page-shop-sold'\n  },\n  components: {\n    StTotal\n  },\n  modals: {\n    SoldCourseFreeze,\n    SoldCourseRefund,\n    SoldCourseSurplus,\n    SoldCourseTransfer,\n    SoldCourseValid,\n    DealGathering,\n    SoldCoursePackageReactive,\n    SoldCoursePackageExtendDay,\n    SoldCoursePackageExtendDayBatch,\n    SoldCoursePackageDeduction,\n    SoldCoursePackageUpgrade,\n    SoldCoursePackageUpdateExpirationDate,\n    SoldCoursePackageMembeChange,\n    SoldCoursePackageReactiveBatch,\n    SoldCourseScope,\n    CommonTaskSuccessTip\n  },\n  serviceInject() {\n    return {\n      packageService: PackageService\n    }\n  },\n  rxState() {\n    return {\n      list: this.packageService.list$,\n      loading: this.packageService.loading$,\n      page: this.packageService.page$,\n      courseStatus: this.packageService.courseStatus$,\n      packageTypes: this.packageService.packageTypes$,\n      effectiveWay: this.packageService.effectiveWay$,\n      auth: this.packageService.auth$,\n      total: this.packageService.total$\n    }\n  },\n  data() {\n    return {\n      PACKAGE_TYPE,\n      IS_LIMIT,\n      visible: false,\n      // 结束时间面板是否显示\n      endOpen: false,\n      selectedRowKeys: [],\n      selectedRows: [],\n      diffSelectedRows: [],\n      date: [],\n      effectiveDate: [],\n      action: {\n        /**\n         * 更换上课范围\n         */\n        courseRange: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n        /**\n         * 延长卡有效期\n         */\n        extendDay: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n        /**\n         * 重新激活\n         */\n        reactive: {\n          isAvaliable: false,\n          isShowTip: false\n        }\n      }\n    }\n  },\n  hooks() {\n    return {\n      internalNoteActions: useInternalNoteActions()\n    }\n  },\n  mounted() {\n    this.setSearchData()\n  },\n  computed: {\n    columns,\n    totalColumns,\n    effectiveWayOptions() {\n      return [\n        {\n          label: '全部',\n          value: -1\n        },\n        {\n          label: '是',\n          value: 1\n        },\n        {\n          label: '否',\n          value: 0\n        }\n      ]\n    }\n  },\n  methods: {\n    disabledSelect(record) {\n      return false\n    },\n    onUpdateExpirationDate(id) {\n      this.$modalRouter.push({\n        name: 'sold-course-package-update-expiration-date',\n        props: {\n          id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    onMemberChange(id) {\n      this.$modalRouter.push({\n        name: 'sold-course-package-membe-change',\n        props: {\n          id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    onDeduction(id) {\n      this.$modalRouter.push({\n        name: 'sold-course-package-deduction',\n        props: {\n          id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    onChangeRenew() {\n      this.$modalRouter.push({\n        name: 'sold-course-package-reactive-batch',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: cloneDeep(this.$searchQuery)\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    onChangeExtends() {\n      this.$modalRouter.push({\n        name: 'sold-course-package-extend-day-batch',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: cloneDeep(this.$searchQuery)\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    onValid(record) {\n      this.$modalRouter.push({\n        name: 'sold-course-valid',\n        props: {\n          info: record\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n            this.onClear()\n          }\n        }\n      })\n    },\n    onExtend(id) {\n      this.$modalRouter.push({\n        name: 'sold-course-package-extend-day',\n        props: {\n          id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n            this.onClear()\n          }\n        }\n      })\n    },\n    // 激活\n    onReactive(id) {\n      this.$modalRouter.push({\n        name: 'sold-course-package-reactive',\n        props: {\n          id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n            this.onClear()\n          }\n        }\n      })\n    },\n    // 升级\n    onUpgrade(record) {\n      this.$modalRouter.push({\n        name: 'sold-course-package-upgrade',\n        props: {\n          id: record.id\n        },\n        on: {\n          success: res => {\n            if (res.type === 'create') {\n              // 创建订单成功\n              this.$router.reload()\n              this.onClear()\n            } else if (res.type === 'createPay') {\n              // 创建订单成功 并且到支付页面\n              this.$modalRouter.push({\n                name: 'deal-gathering',\n                props: {\n                  order_id: res.orderId,\n                  type: 'package'\n                },\n                on: {\n                  success: () => {\n                    this.$router.reload()\n                    this.onClear()\n                  }\n                }\n              })\n            }\n          }\n        }\n      })\n    },\n    // 清空列表选择\n    onClear() {\n      this.selectedRowKeys = []\n      this.selectedRows = []\n    },\n    // 变更上课范围\n    onChangeCourse() {\n      this.$modalRouter.push({\n        name: 'sold-course-scope',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: this.$searchQuery\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    successTip() {\n      this.$modalRouter.push({\n        name: 'common-task-success-tip',\n        on: {\n          success: () => {\n            this.$router.reload()\n            this.onClear()\n          }\n        }\n      })\n    },\n    onPageChange(data) {\n      this.$router.push({\n        query: { ...this.$searchQuery, page: data.current, size: data.pageSize }\n      })\n    },\n    // 修改剩余课时\n    onSurplus(record) {\n      const time = record.effective_state\n        ? `${moment(record.course_buy_time).format(\n            'YYYY-MM-DD HH:mm'\n          )} 至 ${moment(record.course_end_time).format('YYYY-MM-DD HH:mm')}`\n        : '--'\n      let data = {\n        id: record.id,\n        courseName: record.course_name,\n        effective_state: record.effective_state,\n        time\n      }\n      this.$modalRouter.push({\n        name: 'sold-course-surplus',\n        props: {\n          courseType: 'coursePackage',\n          courseData: data\n        },\n        on: {\n          success() {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 冻结\n    onFreeze(record) {\n      this.$modalRouter.push({\n        name: 'sold-course-freeze',\n        props: {\n          type: 'package',\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 取消冻结\n    onUnfreeze(record) {\n      this.$confirm({\n        title: '提示',\n        content: '是否取消冻结？',\n        maskClosable: true,\n        onOk: () => {\n          this.packageService\n            .unFreeze(record.id)\n            .toPromise()\n            .then(() => {\n              this.$router.reload()\n            })\n        }\n      })\n    },\n    // 转让\n    onTransfer(record) {\n      this.$modalRouter.push({\n        name: 'sold-course-transfer',\n        props: {\n          type: 'package',\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 跳转合同\n    toContract(record) {\n      let url = `${window.location.origin}/common/contract-preview?id=${record.order_id}`\n      window.open(url)\n    },\n    // 退款\n    onRefund(record) {\n      this.$modalRouter.push({\n        name: 'sold-course-refund',\n        props: {\n          type: 'package',\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 详情\n    onDetail(record) {\n      this.$router.push({\n        path: `/shop/sold/course/info/package/info/operation-record`,\n        query: { id: record.id }\n      })\n    },\n    // 查询\n    onSearchNative() {\n      this.$searchQuery.start_time = this.date[0]\n        ? `${this.date[0].format('YYYY-MM-DD')} 00:00:00`\n        : ''\n      this.$searchQuery.end_time = this.date[1]\n        ? `${this.date[1].format('YYYY-MM-DD')} 23:59:59`\n        : ''\n      this.$searchQuery.valid_time_start = this.effectiveDate[0]\n        ? `${this.effectiveDate[0].format('YYYY-MM-DD')} 00:00:00`\n        : ''\n      this.$searchQuery.valid_time_end = this.effectiveDate[1]\n        ? `${this.effectiveDate[1].format('YYYY-MM-DD')} 23:59:59`\n        : ''\n      this.onSearch()\n    },\n    onSearchResetNative() {\n      this.date = [null, null]\n      this.effectiveDate = [null, null]\n      this.onSearchReset()\n    },\n    // 设置searchData\n    setSearchData() {\n      const start = this.$searchQuery.start_time\n        ? cloneDeep(moment(this.$searchQuery.start_time))\n        : null\n      const end = this.$searchQuery.end_time\n        ? cloneDeep(moment(this.$searchQuery.end_time))\n        : null\n      const validStart = this.$searchQuery.valid_time_start\n        ? cloneDeep(moment(this.$searchQuery.valid_time_start))\n        : null\n      const validEnd = this.$searchQuery.valid_time_end\n        ? cloneDeep(moment(this.$searchQuery.valid_time_end))\n        : null\n      this.date = [start, end]\n      this.effectiveDate = [validStart, validEnd]\n    },\n    moment,\n    onSelectChange(selectedRowKeys, selectedRows) {\n      this.checkSelectedRows(\n        selectedRows,\n        'course_status',\n        'courseRange',\n        () => {\n          this.selectedRowKeys = selectedRowKeys\n          this.diffSelectedRows = selectedRows.filter(\n            item => item.package_type === 2\n          )\n          return this.diffSelectedRows.length\n        }\n      )\n      this.checkSelectedRows(selectedRows, 'course_status', 'extendDay', () => {\n        return (\n          selectedRows.filter(item => item.course_status === 1).length ===\n          selectedRows.length\n        )\n      })\n      this.checkSelectedRows(selectedRows, 'course_status', 'reactive', () => {\n        return (\n          selectedRows.filter(\n            item => item.course_status === 3 && item.is_refund.id === 0\n          ).length === selectedRows.length\n        )\n      })\n    },\n    checkSelectedRows(selectedRows, key, targetDataKey, checkFn) {\n      this.action[targetDataKey].isShowTip = false\n      const isAvaliable = checkFn()\n      this.action[targetDataKey].isAvaliable =\n        selectedRows.length && isAvaliable\n      if (!isAvaliable) {\n        this.action[targetDataKey].isShowTip = true\n        const timerKey = `timer_${targetDataKey}`\n        clearTimeout(this[timerKey])\n        this[timerKey] = setTimeout(() => {\n          this.action[targetDataKey].isShowTip = false\n        }, 2000)\n      }\n    }\n  }\n}\n",null]}