{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/reception/cabinet.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/reception/cabinet.vue","mtime":1596792848077},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { MessageService } from '@/services/message.service'\nimport { CabinetService } from './cabinet.service'\nimport { CabinetListService } from './components#/cabinet-list.service'\nimport { CabinetAreaService as AreaService } from '../setting/components#/area.service'\nimport CabinetList from './components#/cabinet-list'\nimport Draggable from 'vuedraggable'\nimport { CABINET, CABINET_BUSINESS_TYPE } from '@/constants/reception/cabinet'\nimport { find } from 'lodash-es'\nexport default {\n  bem: {\n    b: 'page-setting-cabinet'\n  },\n  modals: {},\n  serviceInject() {\n    return {\n      messageService: MessageService,\n      cabinetService: CabinetService,\n      cabinetListService: CabinetListService,\n      areaService: AreaService\n    }\n  },\n  rxState() {\n    return {\n      list: this.areaService.list$,\n      cabinetList: this.cabinetListService.list$,\n      auth: this.cabinetService.auth$,\n      loading: this.cabinetService.loading$\n    }\n  },\n  data() {\n    return {\n      CABINET,\n      CABINET_BUSINESS_TYPE,\n      isActive: '',\n      editId: 0,\n      isShowAddAreaBtn: false,\n      checked: [],\n      isOperationInBatch: false\n    }\n  },\n  components: {\n    CabinetList,\n    Draggable\n  },\n  computed: {\n    type() {\n      return this.$searchQuery.type || 'temporary'\n    },\n    defaultActiveKey() {\n      return +this.$searchQuery.id || 0\n    },\n    currentArea() {\n      const { list } = this\n      const id = this.$searchQuery.id\n      let currentArea = {}\n      list.forEach(item => {\n        if (item.id === +id) {\n          currentArea = item\n        }\n      })\n      return currentArea\n    },\n    areaName() {\n      return this.currentArea.area_name\n    },\n    cabinetType() {\n      return this.$searchQuery.type === 'long-term'\n    }\n  },\n  created() {\n    this.initQueryId()\n  },\n  methods: {\n    initQueryId() {\n      const list = this.list\n      const id = (list[0] && list[0].id) || 0\n      this.$router.replace({\n        query: {\n          ...this.$searchQuery,\n          id\n        }\n      })\n    },\n    onAreaListChange(type) {\n      this.editId = 0\n      this.isShowAddAreaBtn = false\n      if (type === 'cancel') {\n        return\n      }\n      this.areaService.getList().subscribe(() => {\n        if (this.list.length <= 1) {\n          this.initQueryId()\n        }\n      })\n    },\n    onAreaChange(id) {\n      this.$router.push({\n        query: {\n          ...this.$searchQuery,\n          id\n        }\n      })\n    },\n    onAreaSortChange(e) {\n      this.cabinetService.sort(this.list).subscribe()\n    },\n    onCabinetTabChange(key) {\n      this.$router.push({\n        query: {\n          ...this.$searchQuery,\n          type: key\n        }\n      })\n      this.checked = []\n      this.isOperationInBatch = false\n    },\n    onCabinetListChange() {\n      this.$router.push({\n        query: this.$searchQuery\n      })\n      this.onAreaListChange()\n    },\n    onCabinetSelectChange(checked) {\n      this.checked = checked\n    },\n    changeOperationMode() {\n      this.isOperationInBatch = !this.isOperationInBatch\n    },\n    clearCabinet() {\n      if (this.checked.length <= 0) {\n        this.messageService.error({\n          content: '请选择储物柜'\n        })\n        return\n      }\n      if (this.getSmartOfflineNum().length > 0) {\n        this.messageService.error({\n          content: '已离线的储物柜无法清柜，请重新选择'\n        })\n        return\n      }\n      this.$confirm({\n        title: `当前选中柜子中共有${this.getUsingCabinetNum()}个柜子在使用中，请问确认进行清柜操作？`,\n        onOk: () => {\n          this.cabinetService\n            .clearCabinet({\n              cabinet_ids: this.checked\n            })\n            .subscribe(res => {\n              this.messageService.success({\n                content: '批量清柜成功!'\n              })\n              this.changeOperationMode()\n              this.$router.reload()\n            })\n        },\n        onCancel() {}\n      })\n    },\n    getSmartOfflineNum() {\n      const checkedCabinets = this.checked.map(id =>\n        find(this.cabinetList, { id })\n      )\n      const checkedOfflineCabinets = checkedCabinets.filter(\n        item => item.is_smart && !item.is_online\n      )\n      return checkedOfflineCabinets.length\n    },\n    getUsingCabinetNum() {\n      const checkedCabinets = this.checked.map(id =>\n        find(this.cabinetList, { id })\n      )\n      const checkedUsingCabinets = checkedCabinets.filter(\n        item => item.cabinet_business_type === this.CABINET_BUSINESS_TYPE.USING\n      )\n      return checkedUsingCabinets.length\n    }\n  }\n}\n",null]}