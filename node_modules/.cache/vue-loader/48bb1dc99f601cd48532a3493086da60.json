{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/components/textarea/textarea.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/components/textarea/textarea.vue","mtime":1601345390909},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'StTextarea',\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  bem: {\n    b: 'st-textarea'\n  },\n  props: {\n    value: {\n      type: String\n    },\n    maxlength: {\n      type: [String, Number],\n      default: 500\n    },\n    maxRows: {\n      type: [String, Number],\n      default: 0\n    },\n    autosize: {\n      type: Object,\n      default: () => {\n        return {\n          minRows: 10,\n          maxRow: 20\n        }\n      }\n    },\n    // 文字后缀\n    suffix: {\n      type: [String, Object]\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      content: '',\n      attrs: {\n        autosize: this.autosize,\n        ...this.$attrs\n      },\n      lastContent: ''\n    }\n  },\n  watch: {\n    value() {\n      this.init()\n    }\n  },\n  created() {\n    this.init()\n  },\n  computed: {\n    currentLength() {\n      return this.suffix\n        ? this.content.length + this.suffix.length + 2\n        : this.content.length\n    },\n    currentRows() {\n      return this.calcRowsLength(this.content)\n    },\n    shouldUseRows() {\n      return this.maxRows\n    }\n  },\n  methods: {\n    calcRowsLength(content) {\n      return content\n        .trim()\n        .split('\\n')\n        .filter(item => item !== '').length\n    },\n    init() {\n      this.content = this.value || ''\n    },\n    onChange(e) {\n      if (this.maxRows) {\n        const newRows = this.calcRowsLength(e.target.value)\n        if (newRows > this.maxRows) {\n          // 逐字输入\n          if (newRows - this.calcRowsLength(this.lastContent) <= 1) {\n            this.content = this.lastContent\n          } else {\n            // 复制黏贴截取\n            this.content = e.target.value\n              .trim()\n              .split('\\n')\n              .slice(0, this.maxRows)\n              .join('\\n')\n          }\n        }\n        this.$emit('input', this.content)\n        this.$emit('change', this.content)\n      } else {\n        const { maxlength } = this\n        const content = e.target.value.substr(0, maxlength)\n        this.content = content\n        this.$emit('input', content)\n        this.$emit('change', content)\n      }\n      this.lastContent = this.content\n    }\n  }\n}\n",{"version":3,"sources":["textarea.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAufile":"textarea.vue","sourceRoot":"src/views/components/textarea","sourcesContent":["<template>\n  <div :class=\"b()\">\n    <a-textarea\n      :class=\"b('content')\"\n      v-bind=\"attrs\"\n      :allowClear=\"false\"\n      :disabled=\"disabled\"\n      v-model=\"content\"\n      @change=\"onChange\"\n    ></a-textarea>\n    <label :class=\"b('label')\">\n      <span v-if=\"shouldUseRows\">{{ currentRows }}/{{ maxRows }} 行</span>\n      <span v-else>\n        {{ currentLength }}/{{\n          suffix ? suffix.length + 2 + maxlength : maxlength\n        }}\n        字\n      </span>\n    </label>\n    <label v-if=\"suffix\" :class=\"b('suffix')\">{{ '【' + suffix + '】' }}</label>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'StTextarea',\n  model: {\n    prop: 'value',\n    event: 'change'\n  },\n  bem: {\n    b: 'st-textarea'\n  },\n  props: {\n    value: {\n      type: String\n    },\n    maxlength: {\n      type: [String, Number],\n      default: 500\n    },\n    maxRows: {\n      type: [String, Number],\n      default: 0\n    },\n    autosize: {\n      type: Object,\n      default: () => {\n        return {\n          minRows: 10,\n          maxRow: 20\n        }\n      }\n    },\n    // 文字后缀\n    suffix: {\n      type: [String, Object]\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      content: '',\n      attrs: {\n        autosize: this.autosize,\n        ...this.$attrs\n      },\n      lastContent: ''\n    }\n  },\n  watch: {\n    value() {\n      this.init()\n    }\n  },\n  created() {\n    this.init()\n  },\n  computed: {\n    currentLength() {\n      return this.suffix\n        ? this.content.length + this.suffix.length + 2\n        : this.content.length\n    },\n    currentRows() {\n      return this.calcRowsLength(this.content)\n    },\n    shouldUseRows() {\n      return this.maxRows\n    }\n  },\n  methods: {\n    calcRowsLength(content) {\n      return content\n        .trim()\n        .split('\\n')\n        .filter(item => item !== '').length\n    },\n    init() {\n      this.content = this.value || ''\n    },\n    onChange(e) {\n      if (this.maxRows) {\n        const newRows = this.calcRowsLength(e.target.value)\n        if (newRows > this.maxRows) {\n          // 逐字输入\n          if (newRows - this.calcRowsLength(this.lastContent) <= 1) {\n            this.content = this.lastContent\n          } else {\n            // 复制黏贴截取\n            this.content = e.target.value\n              .trim()\n              .split('\\n')\n              .slice(0, this.maxRows)\n              .join('\\n')\n          }\n        }\n        this.$emit('input', this.content)\n        this.$emit('change', this.content)\n      } else {\n        const { maxlength } = this\n        const content = e.target.value.substr(0, maxlength)\n        this.content = content\n        this.$emit('input', content)\n        this.$emit('change', content)\n      }\n      this.lastContent = this.content\n    }\n  }\n}\n</script>\n"]}]}