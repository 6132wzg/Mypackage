{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/brand/app/pos/wait-pay-result.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/brand/app/pos/wait-pay-result.vue","mtime":1600926555825},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { WaitPayResultService } from './wait-pay-result.service'\nimport { WsNotifyService } from '@/views/layouts/default#/ws-notify.service'\nimport { MessageService } from '@/services/message.service'\nexport default {\n  name: 'waitPayResult',\n  bem: {\n    b: 'brand-app-pos-wait-pay'\n  },\n  modals: {},\n  components: {},\n  serviceInject() {\n    return {\n      waitPayResultService: WaitPayResultService,\n      notifyService: WsNotifyService,\n      messageService: MessageService\n    }\n  },\n  rxState() {\n    return {\n      loading: this.waitPayResultService.loading$,\n      message: this.notifyService.message$\n    }\n  },\n  props: {\n    payInfo: {\n      type: Object,\n      default: () => {}\n    },\n    posInfo: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      show: false,\n      timer: null,\n      time: 0,\n      timeStr: '',\n      currentMsgId: ''\n    }\n  },\n  watch: {\n    message(newV) {\n      this.handlePaySuccess(newV)\n    }\n  },\n  mounted() {\n    this.handleSendPosMessage()\n    this.handleStartCountDown()\n  },\n  methods: {\n    // 开启倒计时\n    handleStartCountDown() {\n      this.time = this.posInfo.expire_time || 0\n      if (this.time) {\n        this.timeStr = moment(this.time).format('mm:ss')\n        this.setTimer()\n      }\n    },\n    // 向后端发送pos机信息\n    handleSendPosMessage() {\n      let msg_id = this.notifyService.creatMsgId()\n      this.currentMsgId = msg_id\n      this.notifyService.send({\n        msg_id,\n        msg_type: 5,\n        payload: {\n          order_id: this.payInfo.order_id,\n          serial_no: this.posInfo.pos_serial_no\n        }\n      })\n    },\n    // 收款成功\n    handlePaySuccess(data) {\n      if (data.msg_type !== 5) return false\n      // 判断当前荷载中order_id是否一致\n      if (data.payload.order_id !== this.payInfo.order_id) return false\n      // 判断消息id是否一致\n      if (data.payload.msg_id !== this.currentMsgId) return false\n      // 此处需要加入定时器,存在弹窗显隐问题,确保弹窗dom生成后,在将弹窗show设置为false\n      if (data.payload.status !== 1) return false\n      if (data.payload.status === 3) {\n        this.messageService.error({ content: '支付失败' })\n      } else if (data.payload.status === 1) {\n        setTimeout(() => {\n          // 支付成功回调\n          this.$emit('success', {\n            type: 'pay'\n          })\n          this.show = false\n        }, 300)\n      }\n    },\n    // 确认支付\n    handlePay() {\n      if (this.loading.payTransaction) return false\n      let params = Object.assign(this.payInfo, {\n        pos_confirm: 1,\n        serial_no: this.posInfo.pos_serial_no\n      })\n      this.waitPayResultService.payTransaction(params).subscribe(res => {\n        // 支付成功回调\n        this.$emit('success', {\n          type: 'pay'\n        })\n        this.show = false\n      })\n    },\n    setTimer() {\n      clearInterval(this.timer)\n      this.timer = setInterval(() => {\n        if (this.time <= 1000) {\n          clearInterval(this.timer)\n          this.show = false\n        }\n        this.time = this.time - 1000\n        this.timeStr = moment(this.time).format('mm:ss')\n      }, 1000)\n    }\n  },\n  destroyed() {\n    clearInterval(this.timer)\n  }\n}\n",{"version":3,"sources":["wait-pay-result.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"wait-pay-result.vue","sourceRoot":"src/views/biz-modals/brand/app/pos","sourcesContent":["<template>\n  <st-modal title=\"\" v-model=\"show\" width=\"500px\" :class=\"b()\">\n    <div :class=\"b('countdown')\">{{ timeStr }}</div>\n    <div :class=\"b('desc')\">已将订单发送至“{{ posInfo.pos_name }}”</div>\n    <div :class=\"b('status')\">等待会员付款…</div>\n    <template slot=\"footer\">\n      <div :class=\"b('tip')\">\n        <div>\n          会员已支付，弹窗无响应？点击这里手动\n          <span @click=\"handlePay\">确认支付</span>\n        </div>\n        <div>关闭弹窗不影响POS机订单收款</div>\n      </div>\n    </template>\n  </st-modal>\n</template>\n<script>\nimport { WaitPayResultService } from './wait-pay-result.service'\nimport { WsNotifyService } from '@/views/layouts/default#/ws-notify.service'\nimport { MessageService } from '@/services/message.service'\nexport default {\n  name: 'waitPayResult',\n  bem: {\n    b: 'brand-app-pos-wait-pay'\n  },\n  modals: {},\n  components: {},\n  serviceInject() {\n    return {\n      waitPayResultService: WaitPayResultService,\n      notifyService: WsNotifyService,\n      messageService: MessageService\n    }\n  },\n  rxState() {\n    return {\n      loading: this.waitPayResultService.loading$,\n      message: this.notifyService.message$\n    }\n  },\n  props: {\n    payInfo: {\n      type: Object,\n      default: () => {}\n    },\n    posInfo: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  data() {\n    return {\n      show: false,\n      timer: null,\n      time: 0,\n      timeStr: '',\n      currentMsgId: ''\n    }\n  },\n  watch: {\n    message(newV) {\n      this.handlePaySuccess(newV)\n    }\n  },\n  mounted() {\n    this.handleSendPosMessage()\n    this.handleStartCountDown()\n  },\n  methods: {\n    // 开启倒计时\n    handleStartCountDown() {\n      this.time = this.posInfo.expire_time || 0\n      if (this.time) {\n        this.timeStr = moment(this.time).format('mm:ss')\n        this.setTimer()\n      }\n    },\n    // 向后端发送pos机信息\n    handleSendPosMessage() {\n      let msg_id = this.notifyService.creatMsgId()\n      this.currentMsgId = msg_id\n      this.notifyService.send({\n        msg_id,\n        msg_type: 5,\n        payload: {\n          order_id: this.payInfo.order_id,\n          serial_no: this.posInfo.pos_serial_no\n        }\n      })\n    },\n    // 收款成功\n    handlePaySuccess(data) {\n      if (data.msg_type !== 5) return false\n      // 判断当前荷载中order_id是否一致\n      if (data.payload.order_id !== this.payInfo.order_id) return false\n      // 判断消息id是否一致\n      if (data.payload.msg_id !== this.currentMsgId) return false\n      // 此处需要加入定时器,存在弹窗显隐问题,确保弹窗dom生成后,在将弹窗show设置为false\n      if (data.payload.status !== 1) return false\n      if (data.payload.status === 3) {\n        this.messageService.error({ content: '支付失败' })\n      } else if (data.payload.status === 1) {\n        setTimeout(() => {\n          // 支付成功回调\n          this.$emit('success', {\n            type: 'pay'\n          })\n          this.show = false\n        }, 300)\n      }\n    },\n    // 确认支付\n    handlePay() {\n      if (this.loading.payTransaction) return false\n      let params = Object.assign(this.payInfo, {\n        pos_confirm: 1,\n        serial_no: this.posInfo.pos_serial_no\n      })\n      this.waitPayResultService.payTransaction(params).subscribe(res => {\n        // 支付成功回调\n        this.$emit('success', {\n          type: 'pay'\n        })\n        this.show = false\n      })\n    },\n    setTimer() {\n      clearInterval(this.timer)\n      this.timer = setInterval(() => {\n        if (this.time <= 1000) {\n          clearInterval(this.timer)\n          this.show = false\n        }\n        this.time = this.time - 1000\n        this.timeStr = moment(this.time).format('mm:ss')\n      }, 1000)\n    }\n  },\n  destroyed() {\n    clearInterval(this.timer)\n  }\n}\n</script>\n"]}]}