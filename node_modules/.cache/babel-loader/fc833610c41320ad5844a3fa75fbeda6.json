{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/staff/department#/tree/tree.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/staff/department#/tree/tree.vue","mtime":1591147717364},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { TreeToMap } from '@/utils/tree-to-map.js';\nimport TreeItem from \"./tree-item.vue\";\nimport { cloneDeep } from 'lodash-es';\nexport default {\n  name: 'StOrganTree',\n  data: function data() {\n    return {\n      treeDataSelf: {},\n      count: 0\n    };\n  },\n  props: {\n    treeData: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    }\n  },\n  components: {\n    TreeItem: TreeItem\n  },\n  methods: {\n    onClickItem: function onClickItem(item) {\n      console.log(item);\n    },\n    makeFolder: function makeFolder(item) {\n      Vue.set(item, 'children', []);\n      this.addItem(item);\n    },\n    getNodeItemDetail: function getNodeItemDetail(item) {\n      console.log('getNodeItemDetail', item);\n      this.$emit('node-click', item.id);\n    },\n    traverseTree: function traverseTree(node, tree, opString) {\n      var _this = this;\n\n      return tree.map(function (item) {\n        item[opString] = item.name === node.name; // item.count && (this.count = this.count + item.count)\n\n        var obj = _defineProperty({}, opString, item.name === node.name);\n\n        return item.children ? _objectSpread({}, obj, {\n          name: item.name,\n          children: _this.traverseTree(node, item.children, opString),\n          id: item.id,\n          count: item.count\n        }) : item;\n      });\n    },\n    addItem: function addItem(item) {\n      this.treeDataSelf = this.traverseTree(item, [cloneDeep(this.treeData)], 'isAdd')[0];\n      this.$emit('add-item', item);\n    },\n    editItem: function editItem(item) {\n      this.treeDataSelf = this.traverseTree(item, [cloneDeep(this.treeData)], 'isEdit')[0];\n      this.$emit('edit-item', item);\n    },\n    deleteItem: function deleteItem(item) {\n      this.$emit('delete', item);\n    },\n    updateData: function updateData() {\n      this.$emit('updateData');\n    }\n  },\n  watch: {\n    treeData: function treeData(o) {\n      this.treeDataSelf = cloneDeep(this.treeData);\n    }\n  },\n  mounted: function mounted() {\n    this.treeDataSelf = cloneDeep(this.treeData);\n  }\n};",null]}