{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/sold/card/info/member/info.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/sold/card/info/member/info.vue","mtime":1597895242240},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { InfoService } from './info.service'\nimport { btnOptions } from './info.config'\nimport moment from 'moment'\nimport SoldCardArea from '@/views/biz-modals/sold/card/area'\nimport SoldCardFreeze from '@/views/biz-modals/sold/card/freeze'\nimport SoldCardRefund from '@/views/biz-modals/sold/card/refund'\nimport SoldCardSetTime from '@/views/biz-modals/sold/card/set-time'\nimport SoldCardTransfer from '@/views/biz-modals/sold/card/transfer'\nimport SoldCardMemberReactive from '@/views/biz-modals/sold/card/member/reactive'\nimport {\n  admissionColumns,\n  courseColumns,\n  enterTimeColumns\n} from '../info.config'\nimport useCardActions from '@/hooks/card-actions.hook'\nimport useInternalNoteActions from '@/hooks/shop/sold-internal-note-actions.hook'\nimport contractActions from '@/hooks/contract.hook'\nimport soldMemberCardActions from '@/hooks/sold/member-card-actions.hook'\nexport default {\n  name: 'PageShopSoldCardMemberInfo',\n  bem: {\n    basic: 'page-shop-sold-info'\n  },\n  modals: {\n    SoldCardArea,\n    SoldCardFreeze,\n    SoldCardRefund,\n    SoldCardSetTime,\n    SoldCardTransfer,\n    SoldCardMemberReactive\n  },\n  serviceInject() {\n    return {\n      infoService: InfoService\n    }\n  },\n  rxState() {\n    return {\n      info: this.infoService.info$,\n      loading: this.infoService.loading$,\n      authTabs: this.infoService.authTabs$,\n      auth: this.infoService.auth$\n    }\n  },\n  beforeCreate() {\n    this.cardActions.$on('refresh', val => {\n      this.$router.reload()\n    })\n  },\n  hooks() {\n    return {\n      cardActions: useCardActions(),\n      internalNoteActions: useInternalNoteActions(),\n      contractActions: contractActions(this),\n      soldMemberCardActions: soldMemberCardActions(this)\n    }\n  },\n  computed: {\n    // 门店范围\n    admissionColumns,\n    // 授课范围\n    courseColumns,\n    enterTimeColumns,\n    btnOptions\n  },\n  methods: {\n    moment,\n    // 跳转合同\n    toContract() {\n      let record = this.info\n      let url = `${window.location.origin}/common/contract-preview?id=${record.order_id}`\n      window.open(url)\n    },\n    // 冻结\n    onFreeze() {\n      this.$modalRouter.push({\n        name: 'sold-card-freeze',\n        props: {\n          id: this.infoService.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 对内备注\n    onInternalNote() {\n      this.internalNoteActions.onOpenModal({ id: this.infoService.id })\n    },\n    // 重新激活\n    onReactive() {\n      this.$modalRouter.push({\n        name: 'sold-card-member-reactive',\n        props: {\n          id: this.infoService.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 取消冻结\n    onUnfreeze(record) {\n      this.$confirm({\n        title: '提示',\n        content: '是否取消冻结？',\n        maskClosable: true,\n        onOk: () => {\n          return this.infoService\n            .unFreeze(this.infoService.id)\n            .toPromise()\n            .then(() => {\n              this.$router.reload()\n            })\n        }\n      })\n    },\n    // 续卡\n    onRenewal() {\n      this.cardActions.onRenewal({\n        id: this.infoService.id\n      })\n    },\n    // 升级\n    onUpgrade() {\n      this.cardActions.upgradeCard({\n        id: this.infoService.id\n      })\n    },\n    // 变更成员\n    onChangeMember() {\n      this.cardActions.onChangeMember({\n        id: this.infoService.id\n      })\n    },\n    // 转让\n    onTransfer() {\n      this.$modalRouter.push({\n        name: 'sold-card-transfer',\n        props: {\n          id: this.infoService.id,\n          type: 'member'\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 退款\n    onRefund() {\n      this.$modalRouter.push({\n        name: 'sold-card-refund',\n        props: {\n          type: 'member',\n          id: this.infoService.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 修改有效时间\n    onSetTime() {\n      this.$modalRouter.push({\n        name: 'sold-card-set-time',\n        props: {\n          id: this.infoService.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 变更vip入场区域\n    onArea() {\n      this.$modalRouter.push({\n        name: 'sold-card-area',\n        props: {\n          id: [this.infoService.id]\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    /**\n     * 修改合同备注\n     */\n    onEditContractDescription() {\n      const { order_id, description } = this.info\n      this.contractActions.editDescription({\n        order_id,\n        description\n      })\n    }\n  }\n}\n",null]}