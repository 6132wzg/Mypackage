{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/staff/role/add.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/staff/role/add.vue","mtime":1591147717369},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { listToTree } from '@/utils/list-to-tree.js'\nimport { RoleService } from '../role.service'\nimport { cloneDeep } from 'lodash-es'\nimport { AddService } from './add.service'\nimport RoleDepartment from '@/views/biz-modals/role/department'\nexport default {\n  name: 'AddRole',\n  modals: {\n    RoleDepartment\n  },\n  serviceInject() {\n    return {\n      roleService: RoleService,\n      addService: AddService\n    }\n  },\n  rxState() {\n    return {\n      brandList: this.addService.brandList$,\n      shopList: this.addService.shopList$,\n      dataGrant: this.addService.dataGrant$\n    }\n  },\n  data() {\n    return {\n      expandedKeys: [],\n      searchValue: '',\n      autoExpandParent: true,\n      expandedKeysShop: [],\n      searchShopValue: '',\n      departmentName: '',\n      autoExpandParentShop: true,\n      form: this.$form.createForm(this),\n      brandIds: [],\n      department_ids: [],\n      shopIds: [],\n      brands: [],\n      shops: []\n    }\n  },\n  methods: {\n    onCancel() {\n      this.$router.go(-1)\n    },\n    onExpand(expandedKeys) {\n      this.expandedKeys = expandedKeys\n      this.autoExpandParent = false\n    },\n    onExpandShop(expandedKeys) {\n      this.expandedKeysShop = expandedKeys\n      this.autoExpandParentShop = false\n    },\n    fileterBrandList(e) {\n      const value = e.target.value\n      const expandedKeys = this.brandList\n        .map(item => {\n          if (item.name.indexOf(value) > -1) {\n            return getParentKey(item.name, cloneDeep(this.brands))\n          }\n          return null\n        })\n        .filter((item, i, self) => item && self.indexOf(item) === i)\n      Object.assign(this, {\n        expandedKeys,\n        searchValue: value,\n        autoExpandParent: true\n      })\n    },\n    fileterShopList(e) {\n      const value = e.target.value\n      const expandedKeysShop = this.shopList\n        .map(item => {\n          if (item.name.indexOf(value) > -1) {\n            return getParentKey(item.name, cloneDeep(this.shops))\n          }\n          return null\n        })\n        .filter((item, i, self) => item && self.indexOf(item) === i)\n      Object.assign(this, {\n        expandedKeysShop,\n        searchShopValue: value,\n        autoExpandParentShop: true\n      })\n    },\n    onChangeDataRegion(val) {\n      const that = this\n      if (val.target.value === 3) {\n        this.$modalRouter.push({\n          name: 'role-department',\n          on: {\n            success(result) {\n              that.departmentName = result.label.join(',')\n              that.department_ids = result.value\n              if (that.department_ids.length === 0) {\n                that.form.setFieldsValue({\n                  data_grant: undefined\n                })\n              }\n            }\n          }\n        })\n      } else {\n        that.departmentName = ''\n        that.department_ids = []\n      }\n    },\n    getSelectIds(selectIds, count) {\n      const roleList = cloneDeep([...this.brandList, ...this.shopList])\n      const tempList = []\n      selectIds.map(id => {\n        roleList.forEach(ele => {\n          if (id === ele.id) {\n            tempList.push(ele.parent_id)\n          }\n        })\n      })\n      const reslutArr = Array.from(new Set([...selectIds, ...tempList]))\n      const length = reslutArr.length\n      return length === count ? reslutArr : this.getSelectIds(reslutArr, length)\n    },\n    onClickSubmit(e) {\n      e.preventDefault()\n      this.form.validateFields((err, values) => {\n        if (!err) {\n          const select_ids = this.getSelectIds(\n            cloneDeep([...this.brandIds, ...this.shopIds])\n          ).filter(item => item !== 'menu:0')\n          const form = {\n            ...values,\n            select_ids,\n            department_ids: this.department_ids\n          }\n          this.roleService.add(form).subscribe()\n          this.$router.push({ name: 'brand-staff-role' })\n        }\n      })\n    }\n  },\n  mounted() {\n    this.brands = listToTree(cloneDeep(this.brandList))\n    this.shops = listToTree(cloneDeep(this.shopList))\n  }\n}\n",null]}