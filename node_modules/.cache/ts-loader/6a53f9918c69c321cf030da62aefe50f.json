{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js??ref--13-2!/Users/wangzhigang/Desktop/styd/web/src/services/pattern.service.ts","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/services/pattern.service.ts","mtime":1600391804126},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js","mtime":1591062571609}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _classCallCheck from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nexport var PatternService = /*#__PURE__*/function () {\n  function PatternService() {\n    _classCallCheck(this, PatternService);\n\n    this.DEFAULT_LEN = '1-20';\n    this.PATTERN_MAP = {\n      /**\n       * 中文\n       */\n      CN: \"^[\\\\u4e00-\\\\u9fa5]{**}$\",\n\n      /**\n       * 英文\n       */\n      EN: '^[A-Za-z]{**}$',\n\n      /**\n       * 大写英文\n       */\n      UC_EN: '^[A-Z]{**}$',\n\n      /**\n       * 小写英文\n       */\n      LC_EN: '^[a-z]{**}$',\n\n      /**\n       * 英文 数字 二者至少有一位\n       * /(?=.*[\\d])(?=.*[a-z])(?=.*[A-Z])^[\\dA-Za-z]{6,15}$/\n       */\n      // @ts-ignore\n      UC_LC_EN: '(?=.*[\\\\d])(?=.*[A-z])^[\\\\dA-Za-z]{**}$',\n\n      /**\n       * 英文、数字 至少有一个 英文不区分大小写\n       */\n      // @ts-ignore\n      UL_EN_NUM: '(?=.*[\\\\d])(?=.*[a-z])(?=.*[A-Z])^[\\\\dA-Za-z]{**}$',\n\n      /**\n       * 数字\n       */\n      NUM: '^\\\\d{**}$',\n\n      /**\n       * 数字可以有小数点\n       */\n      NUM_POINT: '^\\\\d+(.\\\\d+)?$',\n\n      /**\n       * 中文、英文\n       */\n      CN_EN: \"^[A-Za-z\\\\u4e00-\\\\u9fa5]{**}$\",\n\n      /**\n       * 中文、英文、数字，不含标点符号\n       */\n      CN_EN_NUM: \"^[A-Za-z0-9\\\\u4e00-\\\\u9fa5]{**}$\",\n\n      /**\n       * 英文、数字\n       */\n      EN_NUM: '^[A-Za-z0-9]{**}$',\n\n      /**\n       * 中文、英文、数字、空格\n       */\n      CN_EN_NUM_SPACE: \"^[A-Za-z0-9\\\\u4e00-\\\\u9fa5]{1,2}$|^[A-Za-z0-9\\\\u4e00-\\\\u9fa5][A-Za-z0-9\\\\u4e00-\\\\u9fa5\\\\s]{**}[A-Za-z0-9\\\\u4e00-\\\\u9fa5]$\",\n\n      /**\n       * 包含手机号和座机号\n       */\n      TEL: '^(((\\\\+\\\\d{2}-)?0\\\\d{2,3}-\\\\d{7,8})|((\\\\+\\\\d{2}-)?(\\\\d{2,3}-)?([1][0-9]{10})))$',\n\n      /**\n       * 手机号\n       */\n      MOBILE: '^1[0-9]{10}$',\n\n      /**\n       * 电子邮箱\n       */\n      EMAIL: '^(?![\\\\w\\\\.@]{51,}$)(\\\\w)+(\\\\.\\\\w+)*@(\\\\w)+((\\\\.\\\\w+)+)$',\n\n      /**\n       * 身份证号\n       */\n      ID: '(^\\\\d{15}$)|(^\\\\d{18}$)|(^\\\\d{17}(\\\\d|X|x)$)',\n\n      /**\n       * 护照\n       */\n      PASSPORT: '^([a-zA-z]|[0-9]){5,17}$',\n\n      /**\n       * 图片类型\n       */\n      IMG: '^(image\\\\/png|image\\\\/jpg|image\\\\/jpeg)$'\n    };\n  }\n  /**\n   * 校验参数 len\n   */\n\n\n  _createClass(PatternService, [{\n    key: \"checkLen\",\n    value: function checkLen(len) {\n      if (!/^\\d+-\\d+$/.test(len)) {\n        console.error(\"\\u8BF7\\u6307\\u5B9A\\u4F4D\\u6570\\uFF0C\\u4F8B\\u5982'4-20'\");\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"createPattern\",\n    value: function createPattern(patternName, len) {\n      if (!this.checkLen(len)) {\n        return;\n      }\n\n      var lens = len.split('-');\n      return new RegExp(this.PATTERN_MAP[patternName].replace('**', \"\".concat(lens[0], \",\").concat(lens[1])));\n    }\n    /**\n     * 中文\n     * @param len\n     */\n\n  }, {\n    key: \"CN\",\n    value: function CN() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('CN', len);\n    }\n    /**\n     * 英文\n     * @param len\n     */\n\n  }, {\n    key: \"EN\",\n    value: function EN() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('EN', len);\n    }\n    /**\n     * 纯大写英文\n     * @param len\n     */\n\n  }, {\n    key: \"UC_EN\",\n    value: function UC_EN() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('UC_EN', len);\n    }\n    /**\n     * 纯小写英文\n     * @param len\n     */\n\n  }, {\n    key: \"LC_EN\",\n    value: function LC_EN() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('LC_EN', len);\n    }\n    /**\n     * 大小写至少包含一个的英文 + 数字\n     * @param len\n     */\n\n  }, {\n    key: \"UC_LC_EN\",\n    value: function UC_LC_EN() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('UC_LC_EN', len);\n    }\n    /**\n     * 英文大小写，数字每样至少有一个\n     * @param len\n     */\n\n  }, {\n    key: \"UL_EN_NUM\",\n    value: function UL_EN_NUM() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('UL_EN_NUM', len);\n    }\n    /**\n     * 中文、英文\n     * @param len\n     */\n\n  }, {\n    key: \"CN_EN\",\n    value: function CN_EN() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('CN_EN', len);\n    }\n    /**\n     * 数字（整数）\n     * @param len\n     */\n\n  }, {\n    key: \"NUM\",\n    value: function NUM() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('NUM', len);\n    }\n    /**\n     * 数字（小数）\n     * @param len\n     */\n\n  }, {\n    key: \"NUM_POINT\",\n    value: function NUM_POINT() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('NUM_POINT', len);\n    }\n    /**\n     * 浮点数，最多支持 decimal 位小数\n     * @param decimal\n     */\n\n  }, {\n    key: \"NUM_FLOAT\",\n    value: function NUM_FLOAT() {\n      var decimal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return new RegExp(\"^\\\\d+(.\\\\d{1,\".concat(decimal, \"})?$\"));\n    }\n    /**\n     * 中文、英文、数字，不含标点符号\n     * @param len\n     */\n\n  }, {\n    key: \"CN_EN_NUM\",\n    value: function CN_EN_NUM() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('CN_EN_NUM', len);\n    }\n    /**\n     * 英文、数字\n     * @param len\n     */\n\n  }, {\n    key: \"EN_NUM\",\n    value: function EN_NUM() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      return this.createPattern('EN_NUM', len);\n    }\n    /**\n     * 中文、英文、数字、空格（中间，非开头与结尾）\n     */\n\n  }, {\n    key: \"CN_EN_NUM_SPACE\",\n    value: function CN_EN_NUM_SPACE() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.DEFAULT_LEN;\n      var lens = len.split('-');\n\n      if (+lens[1] <= 2) {\n        return this.createPattern('CN_EN_NUM', len);\n      }\n\n      return this.createPattern('CN_EN_NUM_SPACE', \"\".concat(+lens[0] - 2 >= 0 ? +lens[0] - 2 : 0, \"-\").concat(+lens[1] - 2));\n    }\n    /**\n     * 手机号与座机号\n     */\n\n  }, {\n    key: \"TEL\",\n    get: function get() {\n      return new RegExp(this.PATTERN_MAP['TEL']);\n    }\n    /**\n     * 手机号\n     */\n\n  }, {\n    key: \"MOBILE\",\n    get: function get() {\n      return new RegExp(this.PATTERN_MAP['MOBILE']);\n    }\n  }, {\n    key: \"EMAIL\",\n    get: function get() {\n      return new RegExp(this.PATTERN_MAP['EMAIL']);\n    }\n  }, {\n    key: \"ID\",\n    get: function get() {\n      return new RegExp(this.PATTERN_MAP['ID']);\n    }\n  }, {\n    key: \"PASSPORT\",\n    get: function get() {\n      return new RegExp(this.PATTERN_MAP['PASSPORT']);\n    }\n  }, {\n    key: \"IMG\",\n    get: function get() {\n      return new RegExp(this.PATTERN_MAP['IMG']);\n    }\n  }]);\n\n  return PatternService;\n}();",{"version":3,"sources":["/Users/wangzhigang/Desktop/styd/web/src/services/pattern.service.ts"],"names":[],"mappings":"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","sourcesContent":["export class PatternService {\n  private DEFAULT_LEN: string = '1-20'\n  private PATTERN_MAP: PatternMap = {\n    /**\n     * 中文\n     */\n    CN: '^[\\\\u4e00-\\\\u9fa5]{**}$',\n    /**\n     * 英文\n     */\n    EN: '^[A-Za-z]{**}$',\n    /**\n     * 大写英文\n     */\n    UC_EN: '^[A-Z]{**}$',\n    /**\n     * 小写英文\n     */\n    LC_EN: '^[a-z]{**}$',\n    /**\n     * 英文 数字 二者至少有一位\n     * /(?=.*[\\d])(?=.*[a-z])(?=.*[A-Z])^[\\dA-Za-z]{6,15}$/\n     */\n    // @ts-ignore\n    UC_LC_EN: '(?=.*[\\\\d])(?=.*[A-z])^[\\\\dA-Za-z]{**}$',\n    /**\n     * 英文、数字 至少有一个 英文不区分大小写\n     */\n    // @ts-ignore\n    UL_EN_NUM: '(?=.*[\\\\d])(?=.*[a-z])(?=.*[A-Z])^[\\\\dA-Za-z]{**}$',\n    /**\n     * 数字\n     */\n    NUM: '^\\\\d{**}$',\n    /**\n     * 数字可以有小数点\n     */\n    NUM_POINT: '^\\\\d+(.\\\\d+)?$',\n    /**\n     * 中文、英文\n     */\n    CN_EN: '^[A-Za-z\\\\u4e00-\\\\u9fa5]{**}$',\n    /**\n     * 中文、英文、数字，不含标点符号\n     */\n    CN_EN_NUM: '^[A-Za-z0-9\\\\u4e00-\\\\u9fa5]{**}$',\n    /**\n     * 英文、数字\n     */\n    EN_NUM: '^[A-Za-z0-9]{**}$',\n\n    /**\n     * 中文、英文、数字、空格\n     */\n    CN_EN_NUM_SPACE:\n      '^[A-Za-z0-9\\\\u4e00-\\\\u9fa5]{1,2}$|^[A-Za-z0-9\\\\u4e00-\\\\u9fa5][A-Za-z0-9\\\\u4e00-\\\\u9fa5\\\\s]{**}[A-Za-z0-9\\\\u4e00-\\\\u9fa5]$',\n    /**\n     * 包含手机号和座机号\n     */\n    TEL:\n      '^(((\\\\+\\\\d{2}-)?0\\\\d{2,3}-\\\\d{7,8})|((\\\\+\\\\d{2}-)?(\\\\d{2,3}-)?([1][0-9]{10})))$',\n    /**\n     * 手机号\n     */\n    MOBILE: '^1[0-9]{10}$',\n    /**\n     * 电子邮箱\n     */\n    EMAIL: '^(?![\\\\w\\\\.@]{51,}$)(\\\\w)+(\\\\.\\\\w+)*@(\\\\w)+((\\\\.\\\\w+)+)$',\n    /**\n     * 身份证号\n     */\n    ID: '(^\\\\d{15}$)|(^\\\\d{18}$)|(^\\\\d{17}(\\\\d|X|x)$)',\n    /**\n     * 护照\n     */\n    PASSPORT: '^([a-zA-z]|[0-9]){5,17}$',\n    /**\n     * 图片类型\n     */\n    IMG: '^(image\\\\/png|image\\\\/jpg|image\\\\/jpeg)$'\n  }\n  /**\n   * 校验参数 len\n   */\n  private checkLen(len: string): boolean {\n    if (!/^\\d+-\\d+$/.test(len)) {\n      console.error(`请指定位数，例如'4-20'`)\n      return false\n    }\n    return true\n  }\n  private createPattern(patternName: string, len: string) {\n    if (!this.checkLen(len)) {\n      return\n    }\n    const lens = len.split('-')\n    return new RegExp(\n      this.PATTERN_MAP[patternName].replace('**', `${lens[0]},${lens[1]}`)\n    )\n  }\n  /**\n   * 中文\n   * @param len\n   */\n  CN(len: string = this.DEFAULT_LEN) {\n    return this.createPattern('CN', len)\n  }\n  /**\n   * 英文\n   * @param len\n   */\n  EN(len: string = this.DEFAULT_LEN) {\n    return this.createPattern('EN', len)\n  }\n  /**\n   * 纯大写英文\n   * @param len\n   */\n  UC_EN(len: string = this.DEFAULT_LEN) {\n    return this.createPattern('UC_EN', len)\n  }\n  /**\n   * 纯小写英文\n   * @param len\n   */\n  LC_EN(len: string = this.DEFAULT_LEN) {\n    return this.createPattern('LC_EN', len)\n  }\n  /**\n   * 大小写至少包含一个的英文 + 数字\n   * @param len\n   */\n  UC_LC_EN(len: string = this.DEFAULT_LEN) {\n    return this.createPattern('UC_LC_EN', len)\n  }\n  /**\n   * 英文大小写，数字每样至少有一个\n   * @param len\n   */\n  UL_EN_NUM(len: string = this.DEFAULT_LEN) {\n    return this.createPattern('UL_EN_NUM', len)\n  }\n  /**\n   * 中文、英文\n   * @param len\n   */\n  CN_EN(len: string = this.DEFAULT_LEN) {\n    return this.createPattern('CN_EN', len)\n  }\n  /**\n   * 数字（整数）\n   * @param len\n   */\n  NUM(len: string = this.DEFAULT_LEN) {\n    return this.createPattern('NUM', len)\n  }\n  /**\n   * 数字（小数）\n   * @param len\n   */\n  NUM_POINT(len: string = this.DEFAULT_LEN) {\n    return this.createPattern('NUM_POINT', len)\n  }\n  /**\n   * 浮点数，最多支持 decimal 位小数\n   * @param decimal\n   */\n  NUM_FLOAT(decimal: number = 1) {\n    return new RegExp(`^\\\\d+(\\.\\\\d{1,${decimal}})?$`)\n  }\n  /**\n   * 中文、英文、数字，不含标点符号\n   * @param len\n   */\n  CN_EN_NUM(len: string = this.DEFAULT_LEN) {\n    return this.createPattern('CN_EN_NUM', len)\n  }\n  /**\n   * 英文、数字\n   * @param len\n   */\n  EN_NUM(len: string = this.DEFAULT_LEN) {\n    return this.createPattern('EN_NUM', len)\n  }\n  /**\n   * 中文、英文、数字、空格（中间，非开头与结尾）\n   */\n  CN_EN_NUM_SPACE(len: string = this.DEFAULT_LEN) {\n    const lens = len.split('-')\n    if (+lens[1] <= 2) {\n      return this.createPattern('CN_EN_NUM', len)\n    }\n    return this.createPattern(\n      'CN_EN_NUM_SPACE',\n      `${+lens[0] - 2 >= 0 ? +lens[0] - 2 : 0}-${+lens[1] - 2}`\n    )\n  }\n  /**\n   * 手机号与座机号\n   */\n  get TEL() {\n    return new RegExp(this.PATTERN_MAP['TEL'])\n  }\n  /**\n   * 手机号\n   */\n  get MOBILE() {\n    return new RegExp(this.PATTERN_MAP['MOBILE'])\n  }\n  get EMAIL() {\n    return new RegExp(this.PATTERN_MAP['EMAIL'])\n  }\n  get ID() {\n    return new RegExp(this.PATTERN_MAP['ID'])\n  }\n  get PASSPORT() {\n    return new RegExp(this.PATTERN_MAP['PASSPORT'])\n  }\n  get IMG() {\n    return new RegExp(this.PATTERN_MAP['IMG'])\n  }\n}\n\nexport interface PatternMap {\n  [key: string]: string\n}\n"],"sourceRoot":""}]}