{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/schedule/personal/add-reserve.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/schedule/personal/add-reserve.vue","mtime":1597396799938},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { PersonalScheduleCommonService as CommonService } from '@/views/pages/shop/product/course/schedule/personal/service#/common.service'\nimport { difference, cloneDeep } from 'lodash-es'\nimport { PersonalScheduleReserveService as ReserveService } from '@/views/pages/shop/product/course/schedule/personal/service#/reserve.service'\nimport { ruleOptions } from './add-reserve.config'\nexport default {\n  name: 'AddReserve',\n  serviceInject() {\n    return {\n      commonService: CommonService,\n      reserveService: ReserveService\n    }\n  },\n  rxState() {\n    const cs = this.commonService\n    return {\n      loading: this.reserveService.loading$,\n      courseCoachOptions: cs.courseCoachOptions$,\n      consumeOptions: cs.consumeOptions$,\n      memberOptions: cs.memberOptions$,\n      courseOptions: cs.courseOptions$,\n      dateOptions: cs.dateOptions$,\n      timeOptions: cs.timeOptions$\n    }\n  },\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      memberName: '',\n      consumeName: '',\n      form,\n      decorators,\n      member_id: '',\n      show: false,\n      effectiveState: 1,\n      keyword: '',\n      value: '',\n      fetching: false,\n      formKeyFlag: [\n        'consume_type',\n        'course_id',\n        'coach_id',\n        'scheduling_id',\n        'reserve_start_time'\n      ],\n      reserveDate: ''\n    }\n  },\n  methods: {\n    keywordFilter(str) {\n      if (!this.keyword) return str\n      str = str.replace(\n        new RegExp(this.keyword),\n        `<span class=\"color-primary\">${this.keyword}</span>`\n      )\n      return str\n    },\n    // 获取消费方式 权重2\n    onChangeConsume(val) {\n      if (!val) return\n      const v = JSON.parse(val)\n      //  因为会员卡，私教课，储值卡，课程包只有课程包有这个字段 没这个字段也是生效 undefined也为1\n      this.effectiveState = v.effective_state === 0 ? 0 : 1\n      this.consumeName = v.name\n      this.form.setFieldsValue({\n        course_id: '',\n        coach_id: '',\n        scheduling_id: undefined,\n        'reserve_start_time:': undefined\n      })\n      this.commonService\n        .getCourseList({ id: +v.id, consume_type: +v.consume_type })\n        .subscribe()\n    },\n    // 获取会员 权重1\n    onSearchMember(val) {\n      this.fetching = true\n      this.keyword = val\n      this.commonService.getOptions('getMemberList', { member: val }, () => {\n        this.fetching = false\n      })\n    },\n    // 获取上课课程 权重4\n    onChangeCourse(val) {\n      this.form.setFieldsValue({\n        coach_id: '',\n        scheduling_id: undefined,\n        reserve_start_time: undefined\n      })\n      this.getCoachList(val)\n    },\n    getCoachList(id) {\n      const consume = JSON.parse(this.form.getFieldValue('consume_type'))\n      const { id: consume_id, consume_type } = consume\n      const query = {\n        consume_id,\n        consume_type\n      }\n      this.commonService.getCourseCoachList(id, query).subscribe()\n    },\n    // 获取时期\n    onChangeDatePick(val) {\n      const course_id = this.form.getFieldValue('course_id')\n      let reserveDate = {\n        id: '',\n        course_id\n      }\n      this.form.setFieldsValue({ reserve_start_time: undefined })\n      this.dateOptions.forEach(item => {\n        val.format('YYYY-MM-DD') === item.schedule_date &&\n          (reserveDate.id = item.id)\n      })\n      const query = { ...reserveDate, member_id: this.member_id }\n      this.commonService.getOptions('getTimeList', query, () => {})\n    },\n    onChangeCourseCoach(val) {\n      this.form.setFieldsValue({\n        scheduling_id: undefined,\n        reserve_start_time: undefined\n      })\n      this.commonService.getOptions(\n        'getDateList',\n        { id: val, member_id: this.member_id },\n        () => {}\n      )\n    },\n    range(start, end) {\n      const result = []\n      for (let i = start; i <= end; i++) {\n        result.push(i)\n      }\n      return result\n    },\n    disabledDate(current) {\n      return (\n        current &&\n        !this.dateOptions\n          .map(item => {\n            return item.schedule_date\n          })\n          .includes(current.format('YYYY-MM-DD').valueOf())\n      )\n    },\n    disabledMinutes(selectedHour) {\n      if (!this.timeOptions.timing) return\n      let disabledMinutes = []\n      const allTime = this.range(0, 60)\n      for (let i = 0; i < this.timeOptions.timing.length; i++) {\n        const startHour = +moment(\n          `${this.timeOptions.schedule_date} ${this.timeOptions.timing[i].start_time}`\n        )\n          .format('H')\n          .valueOf()\n        const endHour = +moment(\n          `${this.timeOptions.schedule_date} ${this.timeOptions.timing[i].end_time}`\n        )\n          .format('H')\n          .valueOf()\n        const start = +moment(\n          `${this.timeOptions.schedule_date} ${this.timeOptions.timing[i].start_time}`\n        )\n          .format('mm')\n          .valueOf()\n        const end = +moment(\n          `${this.timeOptions.schedule_date} ${this.timeOptions.timing[i].end_time}`\n        )\n          .format('mm')\n          .valueOf()\n        if (+selectedHour === startHour && +selectedHour === endHour) {\n          disabledMinutes = [...disabledMinutes, ...this.range(start, end)]\n        } else {\n          if (+selectedHour === startHour) {\n            disabledMinutes = [...disabledMinutes, ...this.range(start, 60)]\n          } else if (+selectedHour === endHour) {\n            disabledMinutes = [...disabledMinutes, ...this.range(0, end)]\n          } else if (+selectedHour > startHour && endHour > +selectedHour) {\n            disabledMinutes = [...disabledMinutes, ...this.range(0, 60)]\n          }\n        }\n      }\n      return difference(allTime, disabledMinutes)\n    },\n    disabledHours() {\n      if (!this.timeOptions.timing) return\n      let disabledHours = []\n      const allTime = this.range(0, 24)\n      for (let i = 0; i < this.timeOptions.timing.length; i++) {\n        const start = +moment(\n          `${this.timeOptions.schedule_date} ${this.timeOptions.timing[i].start_time}`\n        )\n          .format('H')\n          .valueOf()\n        let end = +moment(\n          `${this.timeOptions.schedule_date} ${this.timeOptions.timing[i].end_time}`\n        )\n          .format('H')\n          .valueOf()\n        if (!end && this.timeOptions.timing[i].end_time.includes('24')) {\n          end = 24\n        }\n        disabledHours = [...disabledHours, ...this.range(start, end)]\n      }\n      return difference(allTime, disabledHours) || null\n    },\n    add() {\n      this.form.validate().then(values => {\n        const consume = JSON.parse(values.consume_type)\n        let form = cloneDeep(values)\n        form.member_id = values.member_id\n        form.consume_type = consume.consume_type\n        form.consume_id = consume.id\n        form.reserve_start_time = values.reserve_start_time\n          .format('HH:mm')\n          .valueOf()\n        this.dateOptions.forEach(item => {\n          if (\n            item.schedule_date ===\n            values.scheduling_id.format('YYYY-MM-DD').valueOf()\n          ) {\n            form.scheduling_id = item.id\n          }\n        })\n        this.reserveService.add(form).subscribe(res => {\n          this.show = false\n          this.$router.reload()\n        })\n      })\n    },\n    save() {\n      if (this.effectiveState) {\n        this.add()\n        return\n      }\n      this.$confirm({\n        title: '',\n        content: `新增预约后, ${this.memberName}的课程包${\n          this.consumeName.split('(')[0]\n        }会立即生效，确认新增?`,\n        onOk: () => {\n          this.add()\n          this.effectiveState = 1\n        },\n        onCancel() {\n          console.log('Cancel')\n        }\n      })\n    },\n    getMemberName(id) {\n      let memberName = ''\n      this.memberOptions.forEach(item => {\n        if (item.member_id === id) {\n          memberName = item.member_name\n        }\n      })\n      return memberName\n    },\n    onChangeMember(val) {\n      this.form.resetFields()\n      this.member_id = val\n      this.memberName = this.getMemberName(val)\n      this.commonService.getOptions('getConsumeList', val, () => {})\n    }\n  }\n}\n",null]}