{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/member/list/studio.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/member/list/studio.vue","mtime":1598250255891},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { cloneDeep, filter, last } from 'lodash-es'\nimport { UserService } from '@/services/user.service'\nimport { StudioService } from './studio.service'\nimport tableMixin from '@/mixins/table.mixin'\nimport { columns } from './studio.config'\nimport ShopAddLable from '@/views/biz-modals/shop/add-lable'\nimport ShopBindingEntityCard from '@/views/biz-modals/shop/binding-entity-card'\nimport ShopDistributionCoach from '@/views/biz-modals/shop/distribution-coach'\nimport ShopDistributionSale from '@/views/biz-modals/shop/distribution-sale'\nimport ShopChangeUserType from '@/views/biz-modals/shop/change-user-type'\nimport ShopFrozen from '@/views/biz-modals/shop/frozen'\nimport ShopMissingCard from '@/views/biz-modals/shop/missing-card'\nimport { SEX } from '@/constants/member/info'\nimport { findPathWithTree } from '@/utils/find-path-with-tree'\nexport default {\n  name: 'ShopMemberListStudio',\n  mixins: [tableMixin],\n  modals: {\n    ShopAddLable,\n    ShopBindingEntityCard,\n    ShopDistributionCoach,\n    ShopDistributionSale,\n    ShopFrozen,\n    ShopMissingCard,\n    ShopChangeUserType\n  },\n  serviceInject() {\n    return {\n      studioService: StudioService,\n      userService: UserService\n    }\n  },\n  rxState() {\n    return {\n      loading: this.studioService.loading$,\n      auth: this.studioService.auth$,\n      list: this.studioService.list$,\n      page: this.studioService.page$,\n      memberLevel: this.studioService.memberLevel$,\n      buyPersonalCourseList: this.studioService.buyPersonalCourse$,\n      saleList: this.studioService.saleList$,\n      coachList: this.studioService.coachList$,\n      labelList: this.studioService.labelLsit$\n    }\n  },\n  data() {\n    return {\n      expand: false,\n      sourceRegisterList: [],\n      consumption: [],\n      selectDataList: [],\n      selectedRowKeys: [],\n      selectedRows: [],\n      SEX,\n      memberLevelOptions: [],\n      member_level: []\n    }\n  },\n  computed: {\n    columns,\n    conditions() {\n      let conditions = {\n        ...this.$searchQuery,\n        search: this.$searchQuery.keyword\n      }\n      return conditions\n    }\n  },\n  mounted() {\n    this.sourceRegisters()\n    this.memberLevel.forEach(level => {\n      let obj = {\n        id: level.level_type,\n        name: level.level_name\n      }\n      if (!!level.level_condition.length) {\n        obj['children'] = []\n        level.level_condition.forEach(item => {\n          obj.children.push({\n            id: item.id,\n            name: item.condition_name\n          })\n        })\n      }\n      this.memberLevelOptions.push(obj)\n    })\n    this.setSearchData()\n  },\n  watch: {\n    $searchQuery(newVal) {\n      this.setSearchData()\n    }\n  },\n\n  methods: {\n    refeshPage() {\n      this.selectedRowKeys = []\n      this.$router.reload()\n    },\n    sourceRegisters() {\n      this.studioService.getMemberSourceRegisters().subscribe(status => {\n        this.sourceRegisterList = status\n      })\n    },\n    setSearchData() {\n      let memberLevel = []\n      if (this.$searchQuery.member_level) {\n        memberLevel.push(this.$searchQuery.member_level)\n        if (this.$searchQuery.member_level_condition) {\n          memberLevel.push(this.$searchQuery.member_level_condition)\n        }\n      }\n      this.member_level = memberLevel\n    },\n    // 分配教练\n    onDistributionCoach(record) {\n      this.$modalRouter.push({\n        name: 'shop-distribution-coach',\n        props: {\n          memberIds: [record.member_id],\n          coachId: record.follow_coach_id\n        },\n        on: {\n          success: () => {\n            this.refeshPage()\n          }\n        }\n      })\n    },\n    // 分配销售\n    onDistributionSale(record) {\n      this.$modalRouter.push({\n        name: 'shop-distribution-sale',\n        props: {\n          memberIds: [record.member_id],\n          saleId: record.follow_salesman_id\n        },\n        on: {\n          success: () => {\n            this.refeshPage()\n          }\n        }\n      })\n    },\n    onRemoveBind(record) {\n      this.$confirm({\n        title: '提示信息',\n        content: `确认解绑 ${record.member_name} 会员的微信绑定关系？`,\n        onOk: () => {\n          this.studioService\n            .removeWechatBind(record.member_id)\n            .subscribe(() => {\n              this.refeshPage()\n            })\n        },\n        onCancel() {}\n      })\n    },\n    onChangeUserType(record) {\n      this.$modalRouter.push({\n        name: 'shop-change-user-type',\n        props: {\n          info: record\n        },\n        on: {\n          success: () => {\n            this.refeshPage()\n          }\n        }\n      })\n    },\n    // 清空指纹信息\n    onClearFingerprintInfo(record) {\n      this.$confirm({\n        title: '提示信息',\n        content: '确认清空指纹信息？',\n        onOk: () => {\n          this.studioService.deleteMemberFinger(record.member_id).subscribe()\n        }\n      })\n    },\n    // 清空硬件密码\n    onClearHardwarePassword(record) {\n      this.$confirm({\n        title: '提示信息',\n        content: '确认清空硬件密码吗？',\n        onOk: () => {\n          this.studioService\n            .deleteMemberCabinetPassword(record.member_id)\n            .subscribe()\n        }\n      })\n    },\n    changeLevel(ids) {\n      ;(this.$searchQuery.member_level = ids[0]),\n        (this.$searchQuery.member_level_condition = ids[1])\n    },\n    edit(record) {\n      this.$router.push({\n        name: 'shop-member-edit',\n        query: { id: record.member_id }\n      })\n    },\n    addUser() {\n      this.$router.push({ name: 'shop-member-add' })\n    },\n    infoFunc(record) {\n      this.$router.push({\n        name: 'shop-member-info-basic',\n        query: { id: record.member_id }\n      })\n    },\n    moment,\n    handleReset() {\n      let self = this\n      for (let prop in self.form) {\n        self.form[prop] = ''\n      }\n      this.$refs.stSeleter.handleResetItem()\n      this.consumption = []\n      this.$router.push({ query: {} })\n    },\n    toggle() {\n      this.expand = !this.expand\n    },\n    onSelectionReset() {\n      this.selectedRowKeys = []\n      this.selectedRows = []\n    },\n    onSelectionChange(keys, selectedRows) {\n      this.selectedRowKeys = keys\n      this.selectedRows = selectedRows\n      this.selectDataList = selectedRows.map(item => {\n        return item.id\n      })\n    },\n    $searchQueryFunc() {\n      this.$router.push({ query: this.form })\n    },\n    toCrowd() {\n      this.$router.push({\n        name: 'shop-member-crowd-index'\n      })\n    }\n  }\n}\n",null]}