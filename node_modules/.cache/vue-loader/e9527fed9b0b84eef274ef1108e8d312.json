{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/reception/components#/member-online.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/reception/components#/member-online.vue","mtime":1598250255893},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { MemberOnlineService } from './member-online.service'\nimport tableMixin from '@/mixins/table.mixin'\nimport { columns } from './member-online.config.ts'\nimport infiniteScroll from 'vue-infinite-scroll'\nimport { debounce } from 'lodash-es'\nimport ShopReceptionEntrance from '@/views/biz-modals/shop/reception/entrance'\n\nexport default {\n  mixins: [tableMixin],\n\n  directives: { infiniteScroll },\n\n  name: 'shop-reception-member-online',\n\n  bem: {\n    b: 'shop-reception-member-online'\n  },\n\n  modals: { ShopReceptionEntrance },\n\n  serviceInject() {\n    return {\n      memberOnlineService: MemberOnlineService\n    }\n  },\n\n  rxState() {\n    return {\n      auth: this.memberOnlineService.auth$,\n      list: this.memberOnlineService.list$,\n      page: this.memberOnlineService.page$,\n      loading: this.memberOnlineService.loading$,\n      finished: this.memberOnlineService.finished$\n    }\n  },\n\n  components: {},\n\n  props: {},\n\n  data() {\n    return {\n      isEdit: false,\n      entranceKeys: [], // 入场会员key值组合\n      checkAll: false, // 是否全选\n      indeterminate: false\n    }\n  },\n\n  computed: {\n    columns,\n    hasNoMember() {\n      return this.page.total_counts\n    }\n  },\n\n  async: {},\n\n  mounted() {},\n\n  methods: {\n    handleOpenEntrance(record) {\n      if (this.isEdit) return false\n      this.$modalRouter.push({\n        name: 'shop-reception-entrance',\n        props: {\n          member_id: record.member_id\n        },\n        on: {\n          done: () => {\n            // this.$router.reload()\n            this.$emit('refresh')\n          }\n        }\n      })\n    },\n    onCheckAllChange(e) {\n      let entranceKeys = this.list.map(item => item.member_id)\n      this.entranceKeys = e.target.checked ? entranceKeys : []\n      this.indeterminate = false\n      this.checkAll = e.target.checked\n    },\n    onChange(checkedList) {\n      let listLen = this.list.length\n      let checkLen = checkedList.length\n      this.indeterminate = !!checkLen && checkLen < listLen\n      this.checkAll = checkLen === listLen\n    },\n    handleInfiniteOnLoad: debounce(function(e) {\n      if (!this.finished) {\n        this.memberOnlineService\n          .getList({\n            current_page: ++this.page.current_page,\n            size: 20\n          })\n          .subscribe()\n      }\n    }, 400),\n    // 离场之前的确认\n    onLeaveConfirm(record) {\n      this.memberOnlineService\n        .getCabinetInfo(record.member_id)\n        .subscribe(res => {\n          if (res.info.is_smart) {\n            this.$error({\n              title: `当前会员有储物柜「${res.info.cabinet_area_name}」「${res.info.serial_num}」尚未归还，请先归还！`,\n              okText: '知道了'\n            })\n          } else {\n            this.onLeave(record)\n          }\n        })\n    },\n    onLeaveBatch() {\n      this.$confirm({\n        title: '批量离场',\n        content: `确定离场吗？`,\n        onOk: () => {\n          return this.memberOnlineService\n            .setEntranceLeaveBatch({\n              ids: this.entranceKeys\n            })\n            .toPromise()\n            .then(() => {\n              this.handleEditLeaveStatus(false)\n              this.$emit('refresh')\n            })\n        }\n      })\n    },\n    handleEditLeaveStatus(status) {\n      this.checkAll = false\n      this.isEdit = status\n      this.entranceKeys = []\n    }\n  },\n\n  beforeRouteUpdate(to, from, next) {\n    console.log('member-online')\n    next()\n  }\n}\n",null]}