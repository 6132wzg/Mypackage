{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/components/select/select-scroll.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/components/select/select-scroll.vue","mtime":1598250255816},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { debounce, isEqual } from 'lodash-es';\nexport default {\n  name: 'StSelectScroll',\n  bem: {\n    b: 'st-select-scroll'\n  },\n  model: {\n    props: 'selected',\n    event: 'change'\n  },\n  props: {\n    value: {\n      type: [String, Number, Number],\n      default: undefined\n    },\n    list: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    labelHtml: {\n      type: Function,\n      default: function _default(label, keyword) {\n        return label.replace(new RegExp(keyword, 'g'), \"<span class='global-highlight-color'>\".concat(keyword, \"</span>\"));\n      }\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    isSrcoll: {\n      type: Boolean,\n      default: false\n    },\n    isEnd: {\n      type: Boolean,\n      default: false\n    },\n    showSearch: {\n      type: Boolean,\n      default: true\n    },\n    showArrow: {\n      type: Boolean,\n      default: false\n    },\n    allowClear: {\n      type: Boolean,\n      default: false\n    },\n    _label: {\n      type: String,\n      default: 'label'\n    },\n    _value: {\n      type: String,\n      default: 'value'\n    },\n    // 搜索关键词字段名定义， 默认为 keyword， search refresh scroll 三个事件输出的参数为 {keyword: ''}\n    _keyword: {\n      type: String,\n      default: 'keyword'\n    },\n    placeholder: String,\n    // 联动条件\n    query: {\n      type: Object,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      // 搜索关键字\n      keyword: '',\n      selected: undefined\n    };\n  },\n  computed: {\n    lists: function lists() {\n      var _this = this;\n\n      return this.list.map(function (item) {\n        return {\n          label: item[_this._label],\n          value: item[_this._value]\n        };\n      });\n    },\n    _allowClear: function _allowClear() {\n      return this.showSearch ? true : this.allowClear;\n    },\n    isSearchNone: function isSearchNone() {\n      return this.keyword !== '' && !this.list.length;\n    }\n  },\n  watch: {\n    value: {\n      handler: function handler(v) {\n        this.selected = v;\n      },\n      immediate: true\n    },\n    lists: {\n      deep: true,\n      handler: function handler(newValue, oldValue) {\n        if (isEqual(newValue, oldValue) || !newValue.length) return; // 默认选中第一项 blur时起作用\n\n        this.selected = newValue[0].value;\n      }\n    },\n    // 联动条件刷新监听\n    query: {\n      deep: true,\n      handler: function handler(newValue, oldValue) {\n        if (isEqual(newValue, oldValue)) return;\n        this.keyword = '';\n        this.$emit('refresh', _objectSpread({}, newValue, _defineProperty({}, this._keyword, '')));\n      }\n    }\n  },\n  components: {},\n  created: function created() {\n    this.selected = this.value;\n  },\n  methods: {\n    // 搜索事件触发\n    onSearch: debounce(function (val) {\n      console.log(val);\n      var str = val.trim();\n      if (this.keyword === str) return;\n      this.keyword = str;\n\n      if (str !== '') {\n        this.$emit('search', _defineProperty({}, this._keyword, str));\n      }\n    }, 200),\n    // 检测清空选中\n    onChange: function onChange(val) {\n      !val && this.$emit('change', val);\n    },\n    // 选择发生变化\n    onSelect: function onSelect(val) {\n      this.$emit('change', val);\n    },\n    // 搜索框失焦事件\n    onBlur: function onBlur() {\n      this.$emit('blur', this.selected);\n    },\n    // 聚焦时先清空历史搜索\n    onFocus: function onFocus() {\n      this.keyword = '';\n    },\n    // 滚动到底部时触发事件\n    scroll: debounce(function (e) {\n      var target = e.target;\n\n      if (Math.floor(target.scrollTop) + target.clientHeight > target.scrollHeight - 20 && this.isSrcoll) {\n        if (!this.loading && !this.isEnd) {\n          this.$emit('scroll', _defineProperty({}, this._keyword, this.keyword));\n        }\n      }\n    }, 200)\n  }\n};",null]}