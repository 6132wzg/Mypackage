{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/components/input-number/input-number.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/components/input-number/input-number.vue","mtime":1600926556046},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { isNumber } from 'lodash-es';\nexport default {\n  name: 'StInputNumber',\n  bem: {\n    input: 'st-input-number'\n  },\n  props: {\n    /**\n     * 定义输出值的类型， text 字符串， number 数字\n     */\n    type: {\n      type: String,\n      default: 'text'\n    },\n    placeholder: {\n      type: String,\n      default: function _default() {\n        return '';\n      }\n    },\n    min: {\n      type: Number,\n      default: function _default() {\n        return 0;\n      }\n    },\n    max: {\n      type: [String, Number],\n      default: function _default() {\n        return 999999999999;\n      }\n    },\n    value: {\n      type: [String, Number]\n    },\n    disabled: {\n      type: Boolean,\n      default: function _default() {\n        return false;\n      }\n    },\n\n    /**\n     * input-number是否允许有小数。允许一位小数\n     */\n    float: {\n      type: [Boolean, Number],\n      default: function _default() {\n        return false;\n      }\n    },\n    useType: {\n      type: String,\n      default: 'default'\n    }\n  },\n  watch: {\n    value: {\n      deep: true,\n      handler: function handler(newVal, oldVal) {\n        this.init(newVal);\n      }\n    }\n  },\n  created: function created() {\n    this.init(this.value);\n  },\n  data: function data() {\n    return {\n      number: ''\n    };\n  },\n  methods: {\n    init: function init(data) {\n      this.number = data;\n    },\n    numberBlur: function numberBlur(e) {\n      switch (e.target.value) {\n        case null:\n        case undefined:\n        case '':\n        case '.':\n          this.number = '';\n          this.triggerChange();\n          this.$emit('blur', this.type === 'text' ? \"\".concat(this.number) : Number(this.number));\n          break;\n\n        default:\n          if (!this.float) {\n            this.number = parseInt(+e.target.value, 10);\n            this.number = this.min > this.number ? this.min : this.number;\n            this.number = this.max < this.number ? this.max : this.number;\n          } else {\n            this.number = parseInt(+e.target.value * 10, 10) / 10;\n            this.number = this.min > this.number ? this.min : this.number;\n            this.number = this.max < this.number ? this.max : this.number;\n          }\n\n          this.number += '';\n          this.triggerChange();\n          this.$emit('blur', this.type === 'text' ? \"\".concat(this.number) : Number(this.number));\n      }\n    },\n    numberFocus: function numberFocus(e) {\n      this.$emit('focus');\n    },\n    numberChange: function numberChange(e) {\n      // 控制不能输入非数字\n      var PATTERN_NUMBER = /^(\\d+(\\.\\d?)?|\\.\\d?)$/; // 包含小数的数字  匹配 1.1 / 1. / .1 三种形式\n\n      if (!PATTERN_NUMBER.test(e.target.value) && e.target.value !== '' && e.target.value !== '.') {\n        console.log('到这里来了', e);\n        return;\n      }\n\n      this.number = \"\".concat(e.target.value);\n      this.triggerChange();\n    },\n    triggerChange: function triggerChange() {\n      this.$emit('change', this.type === 'text' ? \"\".concat(this.number) : Number(this.number));\n      this.$emit('input', this.type === 'text' ? \"\".concat(this.number) : Number(this.number));\n    }\n  }\n};",{"version":3,"sources":["input-number.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <a-input\n    :placeholder=\"placeholder\"\n    type=\"text\"\n    :value=\"number\"\n    @change=\"numberChange\"\n    @blur=\"numberBlur\"\n    @focus=\"numberFocus\"\n    :disabled=\"disabled\"\n    maxlength=\"12\"\n    :class=\"'st-input-number__' + useType\"\n  >\n    <template slot=\"addonBefore\">\n      <slot name=\"addonBefore\"></slot>\n    </template>\n    <template slot=\"addonAfter\">\n      <slot name=\"addonAfter\"></slot>\n    </template>\n  </a-input>\n</template>\n<script>\nimport { isNumber } from 'lodash-es'\nexport default {\n  name: 'StInputNumber',\n  bem: {\n    input: 'st-input-number'\n  },\n  props: {\n    /**\n     * 定义输出值的类型， text 字符串， number 数字\n     */\n    type: {\n      type: String,\n      default: 'text'\n    },\n    placeholder: {\n      type: String,\n      default() {\n        return ''\n      }\n    },\n    min: {\n      type: Number,\n      default() {\n        return 0\n      }\n    },\n    max: {\n      type: [String, Number],\n      default() {\n        return 999999999999\n      }\n    },\n    value: {\n      type: [String, Number]\n    },\n    disabled: {\n      type: Boolean,\n      default() {\n        return false\n      }\n    },\n    /**\n     * input-number是否允许有小数。允许一位小数\n     */\n    float: {\n      type: [Boolean, Number],\n      default() {\n        return false\n      }\n    },\n    useType: {\n      type: String,\n      default: 'default'\n    }\n  },\n  watch: {\n    value: {\n      deep: true,\n      handler(newVal, oldVal) {\n        this.init(newVal)\n      }\n    }\n  },\n  created() {\n    this.init(this.value)\n  },\n  data() {\n    return {\n      number: ''\n    }\n  },\n  methods: {\n    init(data) {\n      this.number = data\n    },\n    numberBlur(e) {\n      switch (e.target.value) {\n        case null:\n        case undefined:\n        case '':\n        case '.':\n          this.number = ''\n          this.triggerChange()\n          this.$emit(\n            'blur',\n            this.type === 'text' ? `${this.number}` : Number(this.number)\n          )\n          break\n        default:\n          if (!this.float) {\n            this.number = parseInt(+e.target.value, 10)\n            this.number = this.min > this.number ? this.min : this.number\n            this.number = this.max < this.number ? this.max : this.number\n          } else {\n            this.number = parseInt(+e.target.value * 10, 10) / 10\n            this.number = this.min > this.number ? this.min : this.number\n            this.number = this.max < this.number ? this.max : this.number\n          }\n          this.number += ''\n          this.triggerChange()\n          this.$emit(\n            'blur',\n            this.type === 'text' ? `${this.number}` : Number(this.number)\n          )\n      }\n    },\n    numberFocus(e) {\n      this.$emit('focus')\n    },\n    numberChange(e) {\n      // 控制不能输入非数字\n      const PATTERN_NUMBER = /^(\\d+(\\.\\d?)?|\\.\\d?)$/ // 包含小数的数字  匹配 1.1 / 1. / .1 三种形式\n      if (\n        !PATTERN_NUMBER.test(e.target.value) &&\n        e.target.value !== '' &&\n        e.target.value !== '.'\n      ) {\n        console.log('到这里来了', e)\n        return\n      }\n      this.number = `${e.target.value}`\n      this.triggerChange()\n    },\n    triggerChange() {\n      this.$emit(\n        'change',\n        this.type === 'text' ? `${this.number}` : Number(this.number)\n      )\n      this.$emit(\n        'input',\n        this.type === 'text' ? `${this.number}` : Number(this.number)\n      )\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views/components/input-number"}]}