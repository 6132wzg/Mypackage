{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js??ref--13-2!/Users/wangzhigang/Desktop/styd/web/src/utils/list-to-tree.ts","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/utils/list-to-tree.ts","mtime":1591147717093},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js","mtime":1591062571609}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport { forEach } from 'lodash-es';\n/**\n * 将数组列表转换为树列表\n * @param { Array<Object> } list\n * @param { stirng } keyField 指定键名字段\n * @param { stirng } parentField 指定父级字段\n * @param { stirng } childrenField 指定孩子节点字段\n * @return {Array}\n * @example\n *\n * const arr = [{id:1,name:'a', parent_id:'0'},{id:2,name:'b',parent_id:1},{id:3,name:'c,parent_id:2}]\n * listToTree(arr) =>\n * [{\n *    id:1,\n *    name:'a',\n *    children:[\n *      {\n *          id:2,\n *          name:'b',\n *          children:[{id:3,name:\"c\"}]\n *      }\n *    ]\n * }]\n *\n */\n\nexport var listToTree = function listToTree(list) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$keyField = _ref.keyField,\n      keyField = _ref$keyField === void 0 ? 'id' : _ref$keyField,\n      _ref$parentField = _ref.parentField,\n      parentField = _ref$parentField === void 0 ? 'parent_id' : _ref$parentField,\n      _ref$childrenField = _ref.childrenField,\n      childrenField = _ref$childrenField === void 0 ? 'children' : _ref$childrenField,\n      _ref$isLeafField = _ref.isLeafField,\n      isLeafField = _ref$isLeafField === void 0 ? 'isLeaf' : _ref$isLeafField,\n      _ref$isParentField = _ref.isParentField,\n      isParentField = _ref$isParentField === void 0 ? 'isParent' : _ref$isParentField;\n\n  var map = listToMap(list, {\n    keyField: keyField\n  });\n  var tree = [];\n  forEach(list, function (item) {\n    // parentId\n    var parentId = item[parentField];\n    item[isLeafField] = true;\n    item.key = item.id;\n    item.title = item.name;\n    item.scopedSlots = {\n      title: 'title'\n    }; // 自己是子节点时\n\n    if (parentId && map[parentId]) {\n      var parent = map[parentId];\n      parent[childrenField] = parent[childrenField] || []; // 当父级不存在该子节点时\n\n      if (parent[childrenField].indexOf(item) === -1) {\n        parent[childrenField].push(item);\n        parent[isLeafField] = false;\n        parent[isParentField] = true;\n      } // 自己是根节点时\n\n    } else {\n      tree.push(item);\n    }\n  });\n  return tree;\n};\nexport var listToMap = function listToMap() {\n  var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$keyField = _ref2.keyField,\n      keyField = _ref2$keyField === void 0 ? 'id' : _ref2$keyField;\n\n  var map = {};\n  forEach(list, function (item) {\n    map[item[keyField]] = item;\n  });\n  return map;\n};",{"version":3,"sources":["/Users/wangzhigang/Desktop/styd/web/src/utils/list-to-tree.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,QAAwB,WAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,IAAM,UAAU,GAAG,SAAb,UAAa,CACxB,IADwB,EAStB;AAAA,iFADE,EACF;AAAA,2BANA,QAMA;AAAA,MANA,QAMA,8BANW,IAMX;AAAA,8BALA,WAKA;AAAA,MALA,WAKA,iCALc,WAKd;AAAA,gCAJA,aAIA;AAAA,MAJA,aAIA,mCAJgB,UAIhB;AAAA,8BAHA,WAGA;AAAA,MAHA,WAGA,iCAHc,QAGd;AAAA,gCAFA,aAEA;AAAA,MAFA,aAEA,mCAFgB,UAEhB;;AACF,MAAM,GAAG,GAAQ,SAAS,CAAC,IAAD,EAAO;AAAE,IAAA,QAAQ,EAAR;AAAF,GAAP,CAA1B;AACA,MAAM,IAAI,GAAQ,EAAlB;AACA,EAAA,OAAO,CAAC,IAAD,EAAO,UAAA,IAAI,EAAG;AACnB;AACA,QAAM,QAAQ,GAAG,IAAI,CAAC,WAAD,CAArB;AACA,IAAA,IAAI,CAAC,WAAD,CAAJ,GAAoB,IAApB;AACA,IAAA,IAAI,CAAC,GAAL,GAAW,IAAI,CAAC,EAAhB;AACA,IAAA,IAAI,CAAC,KAAL,GAAa,IAAI,CAAC,IAAlB;AACA,IAAA,IAAI,CAAC,WAAL,GAAmB;AAAE,MAAA,KAAK,EAAE;AAAT,KAAnB,CANmB,CAOnB;;AACA,QAAI,QAAQ,IAAI,GAAG,CAAC,QAAD,CAAnB,EAA+B;AAC7B,UAAM,MAAM,GAAG,GAAG,CAAC,QAAD,CAAlB;AACA,MAAA,MAAM,CAAC,aAAD,CAAN,GAAwB,MAAM,CAAC,aAAD,CAAN,IAAyB,EAAjD,CAF6B,CAG7B;;AACA,UAAI,MAAM,CAAC,aAAD,CAAN,CAAsB,OAAtB,CAA8B,IAA9B,MAAwC,CAAC,CAA7C,EAAgD;AAC9C,QAAA,MAAM,CAAC,aAAD,CAAN,CAAsB,IAAtB,CAA2B,IAA3B;AACA,QAAA,MAAM,CAAC,WAAD,CAAN,GAAsB,KAAtB;AACA,QAAA,MAAM,CAAC,aAAD,CAAN,GAAwB,IAAxB;AACD,OAR4B,CAS7B;;AACD,KAVD,MAUO;AACL,MAAA,IAAI,CAAC,IAAL,CAAU,IAAV;AACD;AACF,GArBM,CAAP;AAsBA,SAAO,IAAP;AACD,CAnCM;AAqCP,OAAO,IAAM,SAAS,GAAG,SAAZ,SAAY,GAAwC;AAAA,MAAvC,IAAuC,uEAAhC,EAAgC;;AAAA,kFAAN,EAAM;AAAA,6BAA1B,QAA0B;AAAA,MAA1B,QAA0B,+BAAf,IAAe;;AAC/D,MAAM,GAAG,GAAG,EAAZ;AACA,EAAA,OAAO,CAAC,IAAD,EAAO,UAAA,IAAI,EAAG;AACnB,IAAA,GAAG,CAAC,IAAI,CAAC,QAAD,CAAL,CAAH,GAAsB,IAAtB;AACD,GAFM,CAAP;AAGA,SAAO,GAAP;AACD,CANM","sourcesContent":["import { forEach } from 'lodash-es'\n\n/**\n * 将数组列表转换为树列表\n * @param { Array<Object> } list\n * @param { stirng } keyField 指定键名字段\n * @param { stirng } parentField 指定父级字段\n * @param { stirng } childrenField 指定孩子节点字段\n * @return {Array}\n * @example\n *\n * const arr = [{id:1,name:'a', parent_id:'0'},{id:2,name:'b',parent_id:1},{id:3,name:'c,parent_id:2}]\n * listToTree(arr) =>\n * [{\n *    id:1,\n *    name:'a',\n *    children:[\n *      {\n *          id:2,\n *          name:'b',\n *          children:[{id:3,name:\"c\"}]\n *      }\n *    ]\n * }]\n *\n */\n\nexport const listToTree = (\n  list: any,\n  {\n    keyField = 'id',\n    parentField = 'parent_id',\n    childrenField = 'children',\n    isLeafField = 'isLeaf',\n    isParentField = 'isParent'\n  } = {}\n) => {\n  const map: any = listToMap(list, { keyField })\n  const tree: any = []\n  forEach(list, item => {\n    // parentId\n    const parentId = item[parentField]\n    item[isLeafField] = true\n    item.key = item.id\n    item.title = item.name\n    item.scopedSlots = { title: 'title' }\n    // 自己是子节点时\n    if (parentId && map[parentId]) {\n      const parent = map[parentId]\n      parent[childrenField] = parent[childrenField] || []\n      // 当父级不存在该子节点时\n      if (parent[childrenField].indexOf(item) === -1) {\n        parent[childrenField].push(item)\n        parent[isLeafField] = false\n        parent[isParentField] = true\n      }\n      // 自己是根节点时\n    } else {\n      tree.push(item)\n    }\n  })\n  return tree\n}\n\nexport const listToMap = (list = [], { keyField = 'id' } = {}) => {\n  const map = {}\n  forEach(list, item => {\n    map[item[keyField]] = item\n  })\n  return map\n}\n"],"sourceRoot":""}]}