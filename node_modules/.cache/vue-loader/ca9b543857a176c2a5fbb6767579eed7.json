{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/shop/finance/refund.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/shop/finance/refund.vue","mtime":1598250255729},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { RefundService } from './refund.service'\nimport { ruleOptions } from './refund.config'\nimport { ORDER_PRODUCT_TYPE } from '@/constants/finance/order'\nexport default {\n  name: 'ModalShopFinanceOrderRefund',\n  bem: {\n    refund: 'modal-shop-finance-order-refund'\n  },\n  serviceInject() {\n    return {\n      refundService: RefundService\n    }\n  },\n  rxState() {\n    return {\n      info: this.refundService.info$,\n      refundChannels: this.refundService.refundChannels$,\n      refundReasons: this.refundService.refundReasons$,\n      refundReasonsSmallCourse: this.refundService.refundReasonsSmallCourse$,\n      loading: this.refundService.loading$\n    }\n  },\n  props: {\n    id: {\n      type: Number\n    },\n    isParent: {\n      type: Boolean,\n      default: true\n    },\n    product_type: [Number, String]\n  },\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      ORDER_PRODUCT_TYPE,\n      form,\n      decorators,\n      show: false,\n      description: '',\n      frozenPayType: 2,\n      refundReason: 1,\n      updateReasonFlag: false\n    }\n  },\n  computed: {\n    isVenues() {\n      return this.product_type === this.ORDER_PRODUCT_TYPE.VENUES\n    },\n    refundReasonsChange() {\n      let arr = this.refundReasons\n      console.log('arr', arr)\n      // 小班课的退款原因\n      if (this.product_type === this.ORDER_PRODUCT_TYPE.SMALL_COURSE_TYPE) {\n        arr = this.refundReasonsSmallCourse\n      }\n      // 定金去掉第一个退款原因\n      if (this.product_type === this.ORDER_PRODUCT_TYPE.EARNEST) {\n        arr = arr.slice(1)\n      }\n      // 场地预约退款原因过滤\n      const reason = this.info.refund_reason\n      if (this.isVenues && reason) {\n        arr = arr.filter(item => reason.indexOf(item.value) > -1)\n      }\n      return arr\n    },\n    getRefundReason: {\n      get: function() {\n        if (!this.updateReasonFlag && !this.isVenues) {\n          // 客户要求退款退货（此商品变为无效）\n          return 2\n        }\n        return this.refundReason\n      },\n      set: function(value) {\n        this.updateReasonFlag = true\n        this.refundReason = value\n      }\n    }\n  },\n  created() {\n    console.log('refundReasons', this.refundReasons)\n    if (this.isParent) {\n      this.refundService.getDetail(this.id).subscribe()\n    } else {\n      this.refundService.getChildInfo(this.id).subscribe()\n    }\n  },\n  methods: {\n    moment,\n    onSubmit() {\n      this.form.validate().then(values => {\n        let parmas = {\n          order_id: this.info.order_id || this.info.id,\n          refund_money: +values.refundPrice,\n          reason: this.getRefundReason,\n          pay_channel: +this.frozenPayType,\n          description: this.description\n        }\n        if (this.info.is_sub) {\n          let childParmas = { ...parmas, order_sub_id: this.info.id }\n\n          this.refundService\n            .orderChildRefund(childParmas, this.id, this.type)\n            .subscribe(res => {\n              this.$emit('success')\n              this.show = false\n            })\n        } else {\n          this.refundService\n            .orderRefund(parmas, this.id, this.type)\n            .subscribe(res => {\n              this.$emit('success')\n              this.show = false\n            })\n        }\n      })\n    }\n  }\n}\n",null]}