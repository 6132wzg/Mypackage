{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/vue-service-app/src/vue-plugin.js","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/vue-service-app/src/vue-plugin.js","mtime":1591147717499},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _typeof from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport ServiceRouter from \"./router\";\nimport { isFn, isObject } from \"./utils\";\nexport default {\n  install: function install(Vue, rootContainer) {\n    Vue.use(ServiceRouter);\n    Vue.mixin({\n      computed: {\n        $skeletonLoading: function $skeletonLoading() {\n          return this.$root._skeletonLoading;\n        }\n      },\n      beforeCreate: function beforeCreate() {\n        if (this.$root === this) {\n          Vue.util.defineReactive(this, '_skeletonLoading', false);\n        }\n\n        var _this$$options = this.$options,\n            serviceInject = _this$$options.serviceInject,\n            serviceProviders = _this$$options.serviceProviders;\n\n        if (serviceProviders) {\n          if (!isFn(serviceProviders)) {\n            throw new Error(\"[vue-service-app] serviceProviders should be function but got \".concat(_typeof(serviceProviders)));\n          }\n\n          var providers = serviceProviders.call(this);\n\n          if (!Array.isArray(providers)) {\n            throw new Error(\"[vue-service-app] serviceProviders should be function return an array but got \".concat(_typeof(providers)));\n          }\n\n          providers.forEach(function (p) {\n            if (p === undefined) {\n              throw new Error(\"[vue-service-app] serviceProviders you just provide undefined\");\n            }\n          });\n          this._componentSerivceProviders = providers;\n        }\n\n        if (serviceInject) {\n          if (!isFn(serviceInject)) {\n            throw new Error(\"[vue-service-app] serviceInject should be function but got \".concat(_typeof(serviceInject)));\n          }\n\n          var injects = serviceInject.call(this);\n\n          if (!isObject(injects)) {\n            throw new Error(\"[vue-service-app] serviceInject should be function return an object but got \".concat(_typeof(injects)));\n          }\n\n          this._serviceInjectNames = [];\n\n          for (var name in injects) {\n            if (injects[name] === undefined) {\n              throw new Error(\"[vue-service-app] serviceInject you just inject undefined in [\".concat(name, \"]\"));\n            }\n\n            this._serviceInjectNames.push(name);\n\n            this[name] = rootContainer.get(injects[name]);\n          }\n        }\n      },\n      // 组件销毁时 销毁根容器的provider实例\n      beforeDestroy: function beforeDestroy() {\n        var _this = this;\n\n        var serviceProviders = this.$options.serviceProviders;\n\n        if (serviceProviders) {\n          // todo 销毁 services\n          this._componentSerivceProviders.forEach(function (p) {\n            rootContainer.destroy(p);\n          });\n        }\n\n        if (this._serviceInjectNames) {\n          this._serviceInjectNames.forEach(function (name) {\n            _this[name] = null;\n          });\n        }\n      }\n    });\n  }\n};",{"version":3,"sources":["/Users/wangzhigang/Desktop/styd/web/vue-service-app/src/vue-plugin.js"],"names":["ServiceRouter","isFn","isObject","install","Vue","rootContainer","use","mixin","computed","$skeletonLoading","$root","_skeletonLoading","beforeCreate","util","defineReactive","$options","serviceInject","serviceProviders","Error","providers","call","Array","isArray","forEach","p","undefined","_componentSerivceProviders","injects","_serviceInjectNames","name","push","get","beforeDestroy","destroy"],"mappings":";;;AAAA,OAAOA,aAAP;AACA,SAASC,IAAT,EAAeC,QAAf;AAEA,eAAe;AACbC,EAAAA,OADa,mBACLC,GADK,EACAC,aADA,EACe;AAC1BD,IAAAA,GAAG,CAACE,GAAJ,CAAQN,aAAR;AACAI,IAAAA,GAAG,CAACG,KAAJ,CAAU;AACRC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,gBADQ,8BACW;AACjB,iBAAO,KAAKC,KAAL,CAAWC,gBAAlB;AACD;AAHO,OADF;AAMRC,MAAAA,YANQ,0BAMO;AACb,YAAI,KAAKF,KAAL,KAAe,IAAnB,EAAyB;AACvBN,UAAAA,GAAG,CAACS,IAAJ,CAASC,cAAT,CAAwB,IAAxB,EAA8B,kBAA9B,EAAkD,KAAlD;AACD;;AAHY,6BAI+B,KAAKC,QAJpC;AAAA,YAILC,aAJK,kBAILA,aAJK;AAAA,YAIUC,gBAJV,kBAIUA,gBAJV;;AAMb,YAAIA,gBAAJ,EAAsB;AACpB,cAAI,CAAChB,IAAI,CAACgB,gBAAD,CAAT,EAA6B;AAC3B,kBAAM,IAAIC,KAAJ,iFACoED,gBADpE,GAAN;AAGD;;AACD,cAAME,SAAS,GAAGF,gBAAgB,CAACG,IAAjB,CAAsB,IAAtB,CAAlB;;AACA,cAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,SAAd,CAAL,EAA+B;AAC7B,kBAAM,IAAID,KAAJ,iGACoFC,SADpF,GAAN;AAGD;;AAEDA,UAAAA,SAAS,CAACI,OAAV,CAAkB,UAAAC,CAAC,EAAI;AACrB,gBAAIA,CAAC,KAAKC,SAAV,EAAqB;AACnB,oBAAM,IAAIP,KAAJ,iEAAN;AAGD;AACF,WAND;AAOA,eAAKQ,0BAAL,GAAkCP,SAAlC;AACD;;AACD,YAAIH,aAAJ,EAAmB;AACjB,cAAI,CAACf,IAAI,CAACe,aAAD,CAAT,EAA0B;AACxB,kBAAM,IAAIE,KAAJ,8EACiEF,aADjE,GAAN;AAGD;;AACD,cAAMW,OAAO,GAAGX,aAAa,CAACI,IAAd,CAAmB,IAAnB,CAAhB;;AACA,cAAI,CAAClB,QAAQ,CAACyB,OAAD,CAAb,EAAwB;AACtB,kBAAM,IAAIT,KAAJ,+FACkFS,OADlF,GAAN;AAGD;;AACD,eAAKC,mBAAL,GAA2B,EAA3B;;AACA,eAAK,IAAIC,IAAT,IAAiBF,OAAjB,EAA0B;AACxB,gBAAIA,OAAO,CAACE,IAAD,CAAP,KAAkBJ,SAAtB,EAAiC;AAC/B,oBAAM,IAAIP,KAAJ,yEAC6DW,IAD7D,OAAN;AAGD;;AACD,iBAAKD,mBAAL,CAAyBE,IAAzB,CAA8BD,IAA9B;;AACA,iBAAKA,IAAL,IAAaxB,aAAa,CAAC0B,GAAd,CAAkBJ,OAAO,CAACE,IAAD,CAAzB,CAAb;AACD;AACF;AACF,OAzDO;AA0DR;AACAG,MAAAA,aA3DQ,2BA2DQ;AAAA;;AAAA,YACNf,gBADM,GACe,KAAKF,QADpB,CACNE,gBADM;;AAEd,YAAIA,gBAAJ,EAAsB;AACpB;AACA,eAAKS,0BAAL,CAAgCH,OAAhC,CAAwC,UAAAC,CAAC,EAAI;AAC3CnB,YAAAA,aAAa,CAAC4B,OAAd,CAAsBT,CAAtB;AACD,WAFD;AAGD;;AACD,YAAI,KAAKI,mBAAT,EAA8B;AAC5B,eAAKA,mBAAL,CAAyBL,OAAzB,CAAiC,UAAAM,IAAI,EAAI;AACvC,YAAA,KAAI,CAACA,IAAD,CAAJ,GAAa,IAAb;AACD,WAFD;AAGD;AACF;AAxEO,KAAV;AA0ED;AA7EY,CAAf","sourcesContent":["import ServiceRouter from './router'\nimport { isFn, isObject } from './utils'\n\nexport default {\n  install(Vue, rootContainer) {\n    Vue.use(ServiceRouter)\n    Vue.mixin({\n      computed: {\n        $skeletonLoading() {\n          return this.$root._skeletonLoading\n        }\n      },\n      beforeCreate() {\n        if (this.$root === this) {\n          Vue.util.defineReactive(this, '_skeletonLoading', false)\n        }\n        const { serviceInject, serviceProviders } = this.$options\n\n        if (serviceProviders) {\n          if (!isFn(serviceProviders)) {\n            throw new Error(\n              `[vue-service-app] serviceProviders should be function but got ${typeof serviceProviders}`\n            )\n          }\n          const providers = serviceProviders.call(this)\n          if (!Array.isArray(providers)) {\n            throw new Error(\n              `[vue-service-app] serviceProviders should be function return an array but got ${typeof providers}`\n            )\n          }\n\n          providers.forEach(p => {\n            if (p === undefined) {\n              throw new Error(\n                `[vue-service-app] serviceProviders you just provide undefined`\n              )\n            }\n          })\n          this._componentSerivceProviders = providers\n        }\n        if (serviceInject) {\n          if (!isFn(serviceInject)) {\n            throw new Error(\n              `[vue-service-app] serviceInject should be function but got ${typeof serviceInject}`\n            )\n          }\n          const injects = serviceInject.call(this)\n          if (!isObject(injects)) {\n            throw new Error(\n              `[vue-service-app] serviceInject should be function return an object but got ${typeof injects}`\n            )\n          }\n          this._serviceInjectNames = []\n          for (let name in injects) {\n            if (injects[name] === undefined) {\n              throw new Error(\n                `[vue-service-app] serviceInject you just inject undefined in [${name}]`\n              )\n            }\n            this._serviceInjectNames.push(name)\n            this[name] = rootContainer.get(injects[name])\n          }\n        }\n      },\n      // 组件销毁时 销毁根容器的provider实例\n      beforeDestroy() {\n        const { serviceProviders } = this.$options\n        if (serviceProviders) {\n          // todo 销毁 services\n          this._componentSerivceProviders.forEach(p => {\n            rootContainer.destroy(p)\n          })\n        }\n        if (this._serviceInjectNames) {\n          this._serviceInjectNames.forEach(name => {\n            this[name] = null\n          })\n        }\n      }\n    })\n  }\n}\n"]}]}