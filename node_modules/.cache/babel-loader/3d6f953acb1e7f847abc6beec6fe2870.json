{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/member/info/user-experience.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/member/info/user-experience.vue","mtime":1597396799984},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport G2 from '@antv/g2';\nimport { UserExperienceService } from \"./user-experience.service\";\nimport ShopAddLateralRecording from '@/views/biz-modals/shop/add-lateral-recording';\nvar defaultOptions = {\n  /**\n   * 指定图表的高度，单位为 'px\n   */\n  height: 300,\n\n  /**\n   * 设置图表的内边距\n   */\n  padding: 'auto',\n  fieldNames: {\n    x: 'test_time',\n    y: 'value'\n  },\n  lineColor: '#258EF9',\n  lineWidth: 2,\n\n  /**\n   * 使用渐变色，l 后面传入角度，0 代表起始颜色，1 代表结束颜色\n   */\n  areaColor: 'l(90) 0:rgba(63, 102, 246, .2) 1:rgba(0, 202, 255, 0)'\n};\nexport default {\n  modals: {\n    ShopAddLateralRecording: ShopAddLateralRecording\n  },\n  serviceInject: function serviceInject() {\n    return {\n      aService: UserExperienceService\n    };\n  },\n  rxState: function rxState() {\n    return {\n      physicalListInfo: this.aService.physicalListInfo$,\n      followInfo: this.aService.followInfo$,\n      auth: this.aService.auth$\n    };\n  },\n  data: function data() {\n    return {\n      tcData: 'weight',\n      pageData: {\n        pageSizeOptions: ['10', '20', '30', '40', '50'],\n        current: 1,\n        pageSize: 20,\n        total: 0\n      },\n      tableTitle: [{\n        title: '体测时间',\n        width: '13%'\n      }, {\n        title: '身高',\n        width: '10%'\n      }, {\n        title: '体重',\n        width: '10%'\n      }, {\n        title: '体脂率',\n        width: '10%'\n      }, {\n        title: '基础代谢值',\n        width: '10%'\n      }, {\n        title: '脂肪含量',\n        width: '10%'\n      }, {\n        title: '骨骼肌含量',\n        width: '10%'\n      }, {\n        title: '胸围',\n        width: '10%'\n      }, {\n        title: '腰围',\n        width: '10%'\n      }, {\n        title: '臀围',\n        width: '10%'\n      }],\n      g2: [],\n      options: {}\n    };\n  },\n  created: function created() {\n    this.g2 = this.followInfo.weight;\n    this.pageData.current = this.physicalListInfo.page.current_page;\n    this.pageData.pageSize = this.physicalListInfo.page.size;\n    this.pageData.total = this.physicalListInfo.page.total_counts;\n  },\n  mounted: function mounted() {},\n  methods: {\n    tcDataFunc: function tcDataFunc(value) {\n      this.g2 = this.followInfo[value];\n    },\n    onPageChange: function onPageChange(value) {\n      console.log(value);\n      var self = this;\n      this.pageData.current = value.current;\n      this.pageData.pageSize = value.pageSize;\n      this.aService.getMemberSideRecord(self.$searchQuery.id, {\n        size: this.pageData.pageSize,\n        page: this.pageData.current\n      }).subscribe();\n    },\n    onModalTest: function onModalTest() {\n      var self = this;\n      this.aService.getMemberSideRecord(self.$searchQuery.id, {\n        size: this.pageData.pageSize,\n        page: this.pageData.current\n      }).subscribe();\n    },\n    echarts: function echarts(data) {\n      var opts = Object.assign(defaultOptions, this.options);\n      var _opts$fieldNames = opts.fieldNames,\n          x = _opts$fieldNames.x,\n          y = _opts$fieldNames.y;\n      G2.track(false); // 关闭打点监控\n\n      var chart = new G2.Chart(_objectSpread({\n        container: 'mountNode',\n        forceFit: true\n      }, opts));\n      chart.source(data);\n      chart.scale(_defineProperty({}, x, {\n        range: [0, 1]\n      }));\n      chart.axis(x, {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          },\n          tickLine: null\n        },\n        tickLine: {\n          alignWithLabel: false,\n          length: 0\n        }\n      });\n      chart.axis(y, {\n        label: {\n          formatter: function formatter(val) {\n            return (val / 10000).toFixed(1) + 'kg';\n          },\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        grid: {\n          type: 'line',\n          lineStyle: {\n            stroke: '#E6E9EF',\n            // 网格线的颜色\n            lineWidth: 1,\n            // 网格线的粗细\n            lineDash: [0, 0] // 网格线的虚线配置，第一个参数描述虚线的实部占多少像素，第二个参数描述虚线的虚部占多少像素\n\n          }\n        }\n      });\n      chart.tooltip({\n        crosshairs: {\n          type: 'line'\n        },\n        showTitle: false,\n        useHtml: true,\n        htmlContent: function htmlContent(title, items) {\n          console.log(items);\n          return \"<div class=\\\"custom-tooltip\\\">\".concat((items[0].value / 10000).toFixed(1), \"kg</div>\");\n        }\n      });\n      chart.area().position([x, y]).color(opts.areaColor).shape('smooth');\n      chart.line().position([x, y]).color(opts.lineColor).size(opts.lineWidth).shape('smooth');\n      chart.render();\n      chart.clear();\n      chart.source(data);\n      chart.area().position([x, y]).color(opts.areaColor).shape('smooth');\n      chart.line().position([x, y]).color(opts.lineColor).size(opts.lineWidth).shape('smooth');\n      chart.render();\n    }\n  }\n};",null]}