{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/sold/deal/gathering.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/sold/deal/gathering.vue","mtime":1598250255757},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { GatheringService } from './gathering.service'\nimport { ruleOptions } from './gathering.config'\nimport { PAYMENT_TYPES } from '@/constants/pay'\nexport default {\n  name: 'ModalSoldDealGathering',\n  bem: {\n    gathering: 'modal-sold-deal-gathering'\n  },\n  serviceProviders() {\n    return [GatheringService]\n  },\n  serviceInject() {\n    return {\n      gatheringService: GatheringService\n    }\n  },\n  rxState() {\n    return {\n      info: this.gatheringService.info$,\n      loading: this.gatheringService.loading$,\n      paymentMethodList: this.gatheringService.paymentMethodList$\n    }\n  },\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      form,\n      decorators,\n      show: false,\n      currentPaymentType: -1,\n      description: ''\n    }\n  },\n  // 订单id，签单类型\n  props: ['order_id', 'type'],\n  computed: {\n    isShowDeposit() {\n      return this.currentPaymentType === PAYMENT_TYPES.DEPOSIT\n    },\n    depositList() {\n      return (\n        (\n          this.paymentMethodList.filter(paymentMethod => {\n            return paymentMethod.payment_type === PAYMENT_TYPES.DEPOSIT\n          })[0] || {}\n        ).deposit || []\n      )\n    }\n  },\n  created() {\n    this.gatheringService\n      .getPaymentInfo(this.order_id, this.type)\n      .subscribe(res => {\n        this.form.setFieldsValue({\n          price: parseFloat(res.info.remain_amount)\n        })\n        this.gatheringService\n          .getPaymentMethodList(this.order_id)\n          .subscribe(res => {\n            const paymentType = res.list[0] && res.list[0].payment_type\n            this.form.setFieldsValue({\n              payment_type: paymentType\n            })\n            this.currentPaymentType = paymentType\n          })\n      })\n  },\n  filters: {\n    dealMaxNumber: value => {\n      if (!value) return\n      return Number(value.substr(0, value.length - 1))\n    }\n  },\n  methods: {\n    // 关闭modal\n    onCancel() {\n      this.show = false\n      this.$emit('cancel')\n    },\n    onPaymentTypeChange(e) {\n      this.currentPaymentType = e.target.value\n    },\n    onSubmit(e) {\n      e.preventDefault()\n      this.form.validate().then(values => {\n        values.order_id = this.order_id\n        values.description = this.description || undefined\n        if (this.type === 'venues') {\n          values.price = this.info.order_price\n        }\n        this.gatheringService.payTransaction(values).subscribe(result => {\n          this.$emit('success', {\n            type: 'pay'\n          })\n          this.show = false\n        })\n      })\n    }\n  }\n}\n",null]}