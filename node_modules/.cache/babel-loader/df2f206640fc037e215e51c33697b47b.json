{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/components/overflow-text/overflow-text.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/components/overflow-text/overflow-text.vue","mtime":1600926556054},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.replace\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'StOverflowText',\n  props: {\n    title: {\n      type: String\n    },\n    value: {\n      type: [Array, String]\n    },\n    maxWidth: {\n      type: String,\n      default: '1000px'\n    },\n    needOverflowTextContainer: {\n      type: Boolean,\n      default: false\n    },\n    needMaxContainerWidth: {\n      type: Boolean,\n      default: false\n    },\n    placement: {\n      type: String,\n      default: 'topLeft'\n    },\n    defaultNoValueContent: {\n      type: String,\n      default: '--'\n    }\n  },\n  computed: {\n    overlayClassName: function overlayClassName() {\n      return this.needMaxContainerWidth ? 'st-overflow-text__max' : 'st-overflow-text__overlay';\n    },\n    getPopupContainer: function getPopupContainer() {\n      var _this = this;\n\n      return function () {\n        return _this.needOverflowTextContainer ? _this.$refs.StOverflowText : document.body;\n      };\n    },\n    isArray: function isArray() {\n      return Array.isArray(this.value);\n    },\n    isPopover: function isPopover() {\n      var width = 0;\n      var html = document.createElement('span');\n      html.innerText = this.value;\n      html.className = 'getTextWidth';\n      document.querySelector('body').appendChild(html);\n      width = document.querySelector('.getTextWidth').offsetWidth;\n      document.querySelector('.getTextWidth').remove();\n      return width > +this.maxWidth.replace('px', '');\n    },\n    showValue: function showValue() {\n      return this.value && this.value.toString() ? this.value.toString() : this.defaultNoValueContent;\n    }\n  }\n};",{"version":3,"sources":["overflow-text.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,eAAA;AACA,EAAA,IAAA,EAAA,gBADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA;AADA,KADA;AAIA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,CAAA,KAAA,EAAA,MAAA;AADA,KAJA;AAOA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAPA;AAWA,IAAA,yBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAXA;AAeA,IAAA,qBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAfA;AAmBA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAnBA;AAuBA,IAAA,qBAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAvBA,GAFA;AA8BA,EAAA,QAAA,EAAA;AACA,IAAA,gBADA,8BACA;AACA,aAAA,KAAA,qBAAA,GACA,uBADA,GAEA,2BAFA;AAGA,KALA;AAMA,IAAA,iBANA,+BAMA;AAAA;;AACA,aAAA;AAAA,eACA,KAAA,CAAA,yBAAA,GACA,KAAA,CAAA,KAAA,CAAA,cADA,GAEA,QAAA,CAAA,IAHA;AAAA,OAAA;AAIA,KAXA;AAYA,IAAA,OAZA,qBAYA;AACA,aAAA,KAAA,CAAA,OAAA,CAAA,KAAA,KAAA,CAAA;AACA,KAdA;AAeA,IAAA,SAfA,uBAeA;AACA,UAAA,KAAA,GAAA,CAAA;AACA,UAAA,IAAA,GAAA,QAAA,CAAA,aAAA,CAAA,MAAA,CAAA;AACA,MAAA,IAAA,CAAA,SAAA,GAAA,KAAA,KAAA;AACA,MAAA,IAAA,CAAA,SAAA,GAAA,cAAA;AACA,MAAA,QAAA,CAAA,aAAA,CAAA,MAAA,EAAA,WAAA,CAAA,IAAA;AACA,MAAA,KAAA,GAAA,QAAA,CAAA,aAAA,CAAA,eAAA,EAAA,WAAA;AACA,MAAA,QAAA,CAAA,aAAA,CAAA,eAAA,EAAA,MAAA;AAEA,aAAA,KAAA,GAAA,CAAA,KAAA,QAAA,CAAA,OAAA,CAAA,IAAA,EAAA,EAAA,CAAA;AACA,KAzBA;AA0BA,IAAA,SA1BA,uBA0BA;AACA,aAAA,KAAA,KAAA,IAAA,KAAA,KAAA,CAAA,QAAA,EAAA,GACA,KAAA,KAAA,CAAA,QAAA,EADA,GAEA,KAAA,qBAFA;AAGA;AA9BA;AA9BA,CAAA","sourcesContent":["<template>\n  <span ref=\"StOverflowText\" class=\"st-overflow-text-wrapper\">\n    <a-popover\n      :title=\"title\"\n      class=\"st-overflow-text\"\n      v-show=\"isPopover\"\n      :placement=\"placement\"\n      :overlayClassName=\"overlayClassName\"\n      :style=\"{ maxWidth }\"\n      :getPopupContainer=\"getPopupContainer\"\n    >\n      <template slot=\"content\">\n        <slot name=\"content\">\n          <ul v-if=\"isArray\">\n            <li\n              class=\"mg-t8\"\n              v-for=\"(item, index) in value\"\n              :key=\"index\"\n              v-html=\"item\"\n            ></li>\n          </ul>\n          <span v-else v-html=\"showValue\"></span>\n        </slot>\n      </template>\n      <slot>\n        <span v-html=\"showValue\"></span>\n      </slot>\n    </a-popover>\n    <span v-show=\"!isPopover\" v-html=\"showValue\"></span>\n  </span>\n</template>\n<script>\nexport default {\n  name: 'StOverflowText',\n  props: {\n    title: {\n      type: String\n    },\n    value: {\n      type: [Array, String]\n    },\n    maxWidth: {\n      type: String,\n      default: '1000px'\n    },\n    needOverflowTextContainer: {\n      type: Boolean,\n      default: false\n    },\n    needMaxContainerWidth: {\n      type: Boolean,\n      default: false\n    },\n    placement: {\n      type: String,\n      default: 'topLeft'\n    },\n    defaultNoValueContent: {\n      type: String,\n      default: '--'\n    }\n  },\n  computed: {\n    overlayClassName() {\n      return this.needMaxContainerWidth\n        ? 'st-overflow-text__max'\n        : 'st-overflow-text__overlay'\n    },\n    getPopupContainer() {\n      return () =>\n        this.needOverflowTextContainer\n          ? this.$refs.StOverflowText\n          : document.body\n    },\n    isArray() {\n      return Array.isArray(this.value)\n    },\n    isPopover() {\n      let width = 0\n      let html = document.createElement('span')\n      html.innerText = this.value\n      html.className = 'getTextWidth'\n      document.querySelector('body').appendChild(html)\n      width = document.querySelector('.getTextWidth').offsetWidth\n      document.querySelector('.getTextWidth').remove()\n\n      return width > +this.maxWidth.replace('px', '')\n    },\n    showValue() {\n      return this.value && this.value.toString()\n        ? this.value.toString()\n        : this.defaultNoValueContent\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views/components/overflow-text"}]}