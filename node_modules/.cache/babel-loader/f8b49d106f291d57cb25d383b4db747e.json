{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/components/clock/clock.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/components/clock/clock.vue","mtime":1600926556000},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.string.pad-start\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\nimport { typeOf } from '@/utils/type';\nexport default {\n  name: 'StClock',\n  props: {\n    // 倒计时显示格式， 使用 [] 括起来的当值小于等于0时隐藏, 如: [DD天]hh:mm:ss  如果天数小于等于0 则将其变为 hh:mm:ss\n    format: {\n      type: String,\n      default: 'DD天 hh小时 mm分钟 ss秒'\n    },\n    value: {\n      type: Number,\n      default: 0\n    },\n    // 倒计时刷新一次的时间间隔 单位为毫秒， 默认1000即1秒\n    sp: {\n      type: Number,\n      default: 1000\n    }\n  },\n  computed: {\n    timeUnitMap: function timeUnitMap() {\n      return {\n        'Y+': 1000 * 60 * 60 * 24 * 30 * 365,\n        'M+': 1000 * 60 * 60 * 24 * 30,\n        'D+': 1000 * 60 * 60 * 24,\n        'h+': 1000 * 60 * 60,\n        'm+': 1000 * 60,\n        's+': 1000,\n        fs: 100,\n        ds: 10,\n        ms: 1\n      };\n    },\n    // 获取最大单位\n    unit: function unit() {\n      var _this = this;\n\n      // 默认为天\n      var unit = 'D+';\n      var list = JSON.parse(JSON.stringify(this.timeFormatMap));\n      list.reverse().map(function (key) {\n        var ret = new RegExp('(' + key + ')').exec(_this.format);\n        if (ret) unit = key;\n      });\n      return unit;\n    },\n    // 根据最大单位计算当前倒计时各单位对应的值\n    timeValue: function timeValue() {\n      var _this2 = this;\n\n      var index = this.timeFormatMap.indexOf(this.unit);\n      var timeFormatMap = this.timeFormatMap.slice(index);\n      var time = this.time;\n      var data = {};\n      timeFormatMap.map(function (key) {\n        data[key] = time > _this2.timeUnitMap[key] ? parseInt(time / _this2.timeUnitMap[key]) || 0 : 0;\n        time = time - data[key] * _this2.timeUnitMap[key];\n      });\n      return data;\n    },\n    timer: function timer() {\n      var format = this.format;\n      format.trim();\n\n      for (var k in this.timeValue) {\n        var ret = new RegExp('(' + k + ')').exec(format);\n        var reg = new RegExp('(\\\\[.*' + k + '.*\\\\])').exec(format); // 如果去除匹配项等于0并被[]括着的选项 如 [DD天] hh:mm:ss  如果天数小于等于0 则将其去掉 变为hh:mm:ss\n\n        if (reg) {\n          format = format.replace(reg[0], this.timeValue[k] <= 0 ? '' : reg[0].replace(/(^\\[|\\]$)/g, ''));\n          format.trim();\n        }\n\n        if (ret) {\n          format = format.replace(ret[1], ret[1].length == 1 && !this.singleFormat.includes(k) ? this.timeValue[k] : (this.timeValue[k] || 0).toString().padStart(ret[1].length, '0'));\n        }\n      }\n\n      return format;\n    }\n  },\n  watch: {\n    // value 发生变更重置倒计时\n    value: {\n      handler: function handler(newVal, oldVal) {\n        if (newVal === oldVal) return; // 取整\n\n        this.time = Math.abs(newVal);\n        this.init();\n      }\n    }\n  },\n  data: function data() {\n    return {\n      timerLoop: null,\n      timeFormatMap: ['Y+', 'M+', 'D+', 'h+', 'm+', 's+', 'fs', 'ds', 'ms'],\n      // 不需要补0的单位\n      singleFormat: ['fs', 'ds', 'ms'],\n      time: 0\n    };\n  },\n  mounted: function mounted() {\n    clearInterval(this.timerLoop);\n    this.time = Math.abs(this.value);\n    this.init();\n  },\n  methods: {\n    init: function init() {\n      var _this3 = this;\n\n      clearInterval(this.timerLoop);\n      this.timerLoop = setInterval(function () {\n        _this3.time = _this3.time - _this3.sp;\n\n        if (_this3.time <= 0) {\n          clearInterval(_this3.timerLoop);\n\n          _this3.$emit('end');\n        }\n      }, this.sp);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    clearInterval(this.timerLoop);\n  }\n};",{"version":3,"sources":["clock.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- 倒计时 -->\n<!-- 使用方式 <st-clock :value=\"time\" format=\"[DD天]hh:mm:ss\"></st-clock> -->\n<template>\n  <span>\n    <slot v-bind:timer=\"timeValue\" v-bind:timerFormat=\"timer\">{{ timer }}</slot>\n  </span>\n</template>\n\n<script>\nimport { typeOf } from '@/utils/type'\nexport default {\n  name: 'StClock',\n  props: {\n    // 倒计时显示格式， 使用 [] 括起来的当值小于等于0时隐藏, 如: [DD天]hh:mm:ss  如果天数小于等于0 则将其变为 hh:mm:ss\n    format: {\n      type: String,\n      default: 'DD天 hh小时 mm分钟 ss秒'\n    },\n    value: {\n      type: Number,\n      default: 0\n    },\n    // 倒计时刷新一次的时间间隔 单位为毫秒， 默认1000即1秒\n    sp: {\n      type: Number,\n      default: 1000\n    }\n  },\n  computed: {\n    timeUnitMap() {\n      return {\n        'Y+': 1000 * 60 * 60 * 24 * 30 * 365,\n        'M+': 1000 * 60 * 60 * 24 * 30,\n        'D+': 1000 * 60 * 60 * 24,\n        'h+': 1000 * 60 * 60,\n        'm+': 1000 * 60,\n        's+': 1000,\n        fs: 100,\n        ds: 10,\n        ms: 1\n      }\n    },\n    // 获取最大单位\n    unit() {\n      // 默认为天\n      let unit = 'D+'\n      let list = JSON.parse(JSON.stringify(this.timeFormatMap))\n      list.reverse().map(key => {\n        let ret = new RegExp('(' + key + ')').exec(this.format)\n        if (ret) unit = key\n      })\n      return unit\n    },\n    // 根据最大单位计算当前倒计时各单位对应的值\n    timeValue() {\n      const index = this.timeFormatMap.indexOf(this.unit)\n      const timeFormatMap = this.timeFormatMap.slice(index)\n      let time = this.time\n      let data = {}\n      timeFormatMap.map(key => {\n        data[key] =\n          time > this.timeUnitMap[key]\n            ? parseInt(time / this.timeUnitMap[key]) || 0\n            : 0\n        time = time - data[key] * this.timeUnitMap[key]\n      })\n      return data\n    },\n    timer() {\n      let format = this.format\n      format.trim()\n      for (let k in this.timeValue) {\n        let ret = new RegExp('(' + k + ')').exec(format)\n        let reg = new RegExp('(\\\\[.*' + k + '.*\\\\])').exec(format)\n        // 如果去除匹配项等于0并被[]括着的选项 如 [DD天] hh:mm:ss  如果天数小于等于0 则将其去掉 变为hh:mm:ss\n        if (reg) {\n          format = format.replace(\n            reg[0],\n            this.timeValue[k] <= 0 ? '' : reg[0].replace(/(^\\[|\\]$)/g, '')\n          )\n          format.trim()\n        }\n        if (ret) {\n          format = format.replace(\n            ret[1],\n            ret[1].length == 1 && !this.singleFormat.includes(k)\n              ? this.timeValue[k]\n              : (this.timeValue[k] || 0).toString().padStart(ret[1].length, '0')\n          )\n        }\n      }\n      return format\n    }\n  },\n  watch: {\n    // value 发生变更重置倒计时\n    value: {\n      handler(newVal, oldVal) {\n        if (newVal === oldVal) return\n        // 取整\n        this.time = Math.abs(newVal)\n        this.init()\n      }\n    }\n  },\n  data() {\n    return {\n      timerLoop: null,\n      timeFormatMap: ['Y+', 'M+', 'D+', 'h+', 'm+', 's+', 'fs', 'ds', 'ms'],\n      // 不需要补0的单位\n      singleFormat: ['fs', 'ds', 'ms'],\n      time: 0\n    }\n  },\n  mounted() {\n    clearInterval(this.timerLoop)\n    this.time = Math.abs(this.value)\n    this.init()\n  },\n  methods: {\n    init() {\n      clearInterval(this.timerLoop)\n      this.timerLoop = setInterval(() => {\n        this.time = this.time - this.sp\n        if (this.time <= 0) {\n          clearInterval(this.timerLoop)\n          this.$emit('end')\n        }\n      }, this.sp)\n    }\n  },\n  beforeDestroy() {\n    clearInterval(this.timerLoop)\n  }\n}\n</script>\n"],"sourceRoot":"src/views/components/clock"}]}