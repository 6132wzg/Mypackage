{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/components/route-tabs/route-tabs.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/components/route-tabs/route-tabs.vue","mtime":1594718340300},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { intersection } from 'lodash-es'\nexport default {\n  name: 'StRouteTabs',\n  props: {\n    type: {\n      type: String,\n      default: 'line'\n    },\n    options: {\n      type: Array,\n      default: () => {\n        return []\n      },\n      required: true,\n      validator: value => {\n        let flag\n        value.forEach(tab => {\n          flag = !tab.label || !tab.route || !tab.route.name\n        })\n        return !flag\n      }\n    },\n    tabPosition: {\n      type: String,\n      default: 'top'\n    }\n  },\n  computed: {\n    activeRouteName() {\n      const matchedRouteNames = this.$route.matched.map(item => item.name)\n      const activeRouteNames = intersection(\n        matchedRouteNames,\n        this.options.map(item => item.route.name)\n      )\n      if (activeRouteNames.length) {\n        return activeRouteNames[0]\n      } else {\n        return ''\n      }\n    }\n  },\n  created() {\n    this.options.forEach(op => {\n      if (!op.label) {\n        throw new Error(['请设置 label 值'])\n      }\n      if (!op.route) {\n        throw new Error([`请给label为${op.label}设置 route对象`])\n      }\n      if (!op.route.name) {\n        throw new Error([`请给label为${op.label}设置 route对象`])\n      }\n    })\n  },\n  methods: {\n    onChange(key) {\n      const { options } = this\n      let query = {}\n      options.forEach(tab => {\n        if (tab.route.name === key) {\n          query = { ...tab.route.query }\n        }\n      })\n      this.$emit('change', key, query)\n      this.$router.push({ name: key, query })\n    }\n  }\n}\n",null]}