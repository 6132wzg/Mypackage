{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/brand-stat-revenue-line.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/brand-stat-revenue-line.vue","mtime":1591924922831},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport { toKFilter, thousandsFilter } from './filters'\nimport { View } from 'st-data-set'\nimport { Chart } from '@antv/g2'\nimport chartMixin from './mixin'\n\nexport default {\n  name: 'BrandStatRevenueLine',\n  mixins: [chartMixin],\n  props: {\n    /**\n     * @example\n     * [{date:'05-28',私教课:20,团体课:50,储值卡:78}]\n     */\n    data: {\n      type: Array,\n      default: () => []\n    },\n    height: {\n      type: Number,\n      default: 280\n    },\n    // 使用的字段key值数组\n    fields: {\n      type: Array,\n      default() {\n        const member_card = this.$c('member_card')\n        const small_course = this.$c('small_course')\n        return [\n          member_card,\n          '私教课',\n          '团体课',\n          // '储值卡',\n          '课程包',\n          small_course,\n          '云店',\n          // '定金',\n          // '押金',\n          '其它'\n        ]\n      }\n    },\n    // 颜色数组\n    colors: {\n      type: Array,\n      default: () => [\n        '#4677F9',\n        '#06DB8C',\n        '#009DFF',\n        '#00F7e6',\n        '#B8F10F',\n        '#3F66F6',\n        '#FF6466'\n      ]\n    },\n    shadowColors: {\n      type: Array,\n      default: () => [\n        'rgba(70,119,249,.4)',\n        'rgba(6,219,140,.4)',\n        'rgba(0,157,255,.4)',\n        'rgba(184,241,15,.4)',\n        'rgba(63,102,246,.4)',\n        'rgba(255,100,102,.4)'\n      ]\n    }\n  },\n  computed: {\n    colorMap() {\n      return this.fields.reduce((res, field, idx) => {\n        res[field] = this.colors[idx % this.colors.length]\n        return res\n      }, {})\n    },\n    shadowColorMap() {\n      return this.fields.reduce((res, field, idx) => {\n        res[field] = this.shadowColors[idx % this.shadowColors.length]\n        return res\n      }, {})\n    }\n  },\n  methods: {\n    initDv() {\n      this.dv = new View()\n      this.dv.source(this.data)\n      this.dv\n        .transform({\n          type: 'fold',\n          fields: this.fields,\n          key: 'name',\n          value: 'value'\n        })\n        .transform({\n          type: 'map',\n          callback: row => {\n            row.value = +row.value\n            return row\n          }\n        })\n    },\n    initChart() {\n      this.chart = new Chart({\n        container: this.$el,\n        forceFit: true,\n        height: this.height,\n        padding: [8, 160, 'auto', 'auto'],\n        renderer: 'svg'\n      })\n\n      this.chart.source(this.dv, {\n        date: {\n          tickCount: 10,\n          range: [0, 1]\n        },\n        value: {\n          tickCount: 5,\n          formatter: toKFilter,\n          sync: true\n        }\n      })\n      this.chart.axis('date', {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        tickLine: {\n          lineWidth: 0,\n          length: 0\n        }\n      })\n      this.chart.axis('value', {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        grid: {\n          lineStyle: {\n            lineWidth: 0.5,\n            lineDash: [0, 0]\n          }\n        }\n      })\n      this.chart.legend('name', {\n        position: 'right-center',\n        itemWidth: 80,\n        useHtml: true,\n        textStyle: {\n          fill: '#3E4D5C'\n        },\n        itemTpl: () => {\n          return (\n            '<li class=\"g2-legend-list-item item-{index} {checked}\" data-color=\"{originColor}\" data-value=\"{originValue}\">' +\n            `<span class=\"g2-legend-marker\" style=\"background-color:{color};\"></span>` +\n            ` <span class=\"g2-legend-text\">{value}</span>` +\n            '</li>'\n          )\n        }\n      })\n      this.chart\n        .line()\n        .style('name', {\n          shadowColor: name => this.shadowColorMap[name],\n          // shadowColor: '#70b2ec',\n          shadowBlur: 20,\n          shadowOffsetY: 4\n        })\n        .tooltip('name*value', (name, value) => {\n          return {\n            name,\n            value: '¥' + thousandsFilter(value)\n          }\n        })\n        .shape('smooth')\n        .size(2)\n        .position('date*value')\n        .color('name', this.colors)\n\n      this.chart.render()\n    }\n  }\n}\n",{"version":3,"sources":["brand-stat-revenue-line.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"brand-stat-revenue-line.vue","sourceRoot":"src/views/biz-components/stat","sourcesContent":["<template>\n  <div class=\"brand-stat-revenue-line\"></div>\n</template>\n\n<script>\nimport { toKFilter, thousandsFilter } from './filters'\nimport { View } from 'st-data-set'\nimport { Chart } from '@antv/g2'\nimport chartMixin from './mixin'\n\nexport default {\n  name: 'BrandStatRevenueLine',\n  mixins: [chartMixin],\n  props: {\n    /**\n     * @example\n     * [{date:'05-28',私教课:20,团体课:50,储值卡:78}]\n     */\n    data: {\n      type: Array,\n      default: () => []\n    },\n    height: {\n      type: Number,\n      default: 280\n    },\n    // 使用的字段key值数组\n    fields: {\n      type: Array,\n      default() {\n        const member_card = this.$c('member_card')\n        const small_course = this.$c('small_course')\n        return [\n          member_card,\n          '私教课',\n          '团体课',\n          // '储值卡',\n          '课程包',\n          small_course,\n          '云店',\n          // '定金',\n          // '押金',\n          '其它'\n        ]\n      }\n    },\n    // 颜色数组\n    colors: {\n      type: Array,\n      default: () => [\n        '#4677F9',\n        '#06DB8C',\n        '#009DFF',\n        '#00F7e6',\n        '#B8F10F',\n        '#3F66F6',\n        '#FF6466'\n      ]\n    },\n    shadowColors: {\n      type: Array,\n      default: () => [\n        'rgba(70,119,249,.4)',\n        'rgba(6,219,140,.4)',\n        'rgba(0,157,255,.4)',\n        'rgba(184,241,15,.4)',\n        'rgba(63,102,246,.4)',\n        'rgba(255,100,102,.4)'\n      ]\n    }\n  },\n  computed: {\n    colorMap() {\n      return this.fields.reduce((res, field, idx) => {\n        res[field] = this.colors[idx % this.colors.length]\n        return res\n      }, {})\n    },\n    shadowColorMap() {\n      return this.fields.reduce((res, field, idx) => {\n        res[field] = this.shadowColors[idx % this.shadowColors.length]\n        return res\n      }, {})\n    }\n  },\n  methods: {\n    initDv() {\n      this.dv = new View()\n      this.dv.source(this.data)\n      this.dv\n        .transform({\n          type: 'fold',\n          fields: this.fields,\n          key: 'name',\n          value: 'value'\n        })\n        .transform({\n          type: 'map',\n          callback: row => {\n            row.value = +row.value\n            return row\n          }\n        })\n    },\n    initChart() {\n      this.chart = new Chart({\n        container: this.$el,\n        forceFit: true,\n        height: this.height,\n        padding: [8, 160, 'auto', 'auto'],\n        renderer: 'svg'\n      })\n\n      this.chart.source(this.dv, {\n        date: {\n          tickCount: 10,\n          range: [0, 1]\n        },\n        value: {\n          tickCount: 5,\n          formatter: toKFilter,\n          sync: true\n        }\n      })\n      this.chart.axis('date', {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        tickLine: {\n          lineWidth: 0,\n          length: 0\n        }\n      })\n      this.chart.axis('value', {\n        label: {\n          textStyle: {\n            fill: '#9BACB9'\n          }\n        },\n        grid: {\n          lineStyle: {\n            lineWidth: 0.5,\n            lineDash: [0, 0]\n          }\n        }\n      })\n      this.chart.legend('name', {\n        position: 'right-center',\n        itemWidth: 80,\n        useHtml: true,\n        textStyle: {\n          fill: '#3E4D5C'\n        },\n        itemTpl: () => {\n          return (\n            '<li class=\"g2-legend-list-item item-{index} {checked}\" data-color=\"{originColor}\" data-value=\"{originValue}\">' +\n            `<span class=\"g2-legend-marker\" style=\"background-color:{color};\"></span>` +\n            ` <span class=\"g2-legend-text\">{value}</span>` +\n            '</li>'\n          )\n        }\n      })\n      this.chart\n        .line()\n        .style('name', {\n          shadowColor: name => this.shadowColorMap[name],\n          // shadowColor: '#70b2ec',\n          shadowBlur: 20,\n          shadowOffsetY: 4\n        })\n        .tooltip('name*value', (name, value) => {\n          return {\n            name,\n            value: '¥' + thousandsFilter(value)\n          }\n        })\n        .shape('smooth')\n        .size(2)\n        .position('date*value')\n        .color('name', this.colors)\n\n      this.chart.render()\n    }\n  }\n}\n</script>\n"]}]}