{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/app/plugin/components#/product-setting.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/app/plugin/components#/product-setting.vue","mtime":1601342942392},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { PRODUCT_TYPE } from '@/constants/brand/app/plugin/discount'\nimport { typeOf } from '@/utils/type'\nimport { listToMap } from '@/utils/list-to-map'\nimport { isEqual, merge } from 'lodash-es'\nimport FormMixin from './form.mixin'\n\nimport { MessageService } from '@/services/message.service'\nimport {\n  memberCardColumns,\n  depositCardColumns,\n  personalCourseLevelColumns,\n  personalCourseColumns,\n  productSettingRules\n} from './product-setting.config'\nimport { ProductSettingService } from './product-setting.service'\nexport default {\n  name: 'PluginProductSetting',\n  mixins: [FormMixin],\n  serviceInject() {\n    return {\n      service: ProductSettingService,\n      messageService: MessageService\n    }\n  },\n  rxState() {\n    return {\n      loading: this.service.loading$,\n      productType: this.service.productType$,\n      memberList: this.service.memberList$,\n      depositList: this.service.depositList$,\n      personalList: this.service.personalList$,\n      coachLevelList: this.service.coachLevelList$,\n      brand: this.service.brand$\n    }\n  },\n  // decorators() {\n  //   return this.form.addDecorators(this.productSettingRules)\n  // },\n  props: {\n    discountPriceLabel: {\n      type: String,\n      default: '优惠价(元)'\n    },\n    form: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    }\n  },\n  data() {\n    return {\n      PRODUCT_TYPE,\n      selectedRowKeys: [],\n      allSelected: false\n    }\n  },\n  computed: {\n    productSettingRules,\n    decorators() {\n      return this.form.addDecorators(this.productSettingRules)\n    },\n    productTypeList() {\n      return this.productType.filter(\n        item =>\n          !(\n            this.PRODUCT_TYPE.PERSONAL_COURSE === item.value &&\n            this.brand.saleModel === 1\n          )\n      )\n    },\n    tableList: {\n      get() {\n        let list = []\n        if (this.formValue.product_type === PRODUCT_TYPE.MEMBER_CARD) {\n          list = this.tableMemberList\n        }\n        if (this.formValue.product_type === PRODUCT_TYPE.DEPOSIT_CARD) {\n          list = this.tableDepositList\n        }\n        if (this.formValue.product_type === PRODUCT_TYPE.PERSONAL_COURSE) {\n          list = this.tableCourseList\n        }\n        return list.map(item => {\n          const id = item.id !== undefined ? item.id : item.product_sku_id\n          return {\n            ...item,\n            product_sku_id: item.id || item.product_sku_id || 0,\n            discount_price: item.discount_price || null,\n            hour: this.formValue.limit_course_num,\n            ...(this.discountInfoMap[id] || {}),\n            isSelected:\n              (!this.isEdit && this.allSelected) ||\n              this.selectedRowKeys.includes(item.id) ||\n              this.selectedRowKeys.includes(item.product_sku_id)\n          }\n        })\n      },\n      set(value) {\n        this.getDiscountInfo(value)\n      }\n    },\n    tableMemberList() {\n      const itemArr = this.memberList.filter(item => {\n        return item.id === this.formValue.product_id\n      })\n      return itemArr.length ? itemArr[0].product_spec : []\n    },\n    tableDepositList() {\n      const itemArr = this.depositList.filter(item => {\n        return item.id == this.formValue.product_id\n      })\n      return itemArr.length ? itemArr[0].product_spec : []\n    },\n    tableCourseList() {\n      if (this.brand.priceModel !== 2) {\n        // 私教课 priceModel = 1 统一定价模式\n        return [\n          {\n            product_sku_id: 0,\n            discount_price: null\n          }\n        ]\n      }\n      return this.coachLevelList\n    },\n    discountInfoMap() {\n      return listToMap(this.formValue.discount_info, {\n        keyField: 'product_sku_id'\n      })\n    },\n    columns() {\n      if (this.formValue.product_type === PRODUCT_TYPE.PERSONAL_COURSE) {\n        return this.brand.priceModel === 2\n          ? personalCourseLevelColumns(this)\n          : personalCourseColumns(this)\n      }\n      if (this.formValue.product_type === PRODUCT_TYPE.DEPOSIT_CARD) {\n        return depositCardColumns(this)\n      }\n      if (this.formValue.product_type === PRODUCT_TYPE.MEMBER_CARD) {\n        return memberCardColumns(this)\n      }\n      return []\n    }\n  },\n  watch: {\n    'formValue.discount_info': {\n      deep: true,\n      immediate: true,\n      handler(value) {\n        let list = []\n        value &&\n          value.map(item => {\n            list.push(item.product_sku_id)\n          })\n        // 去重\n        this.selectedRowKeys = [...new Set([...this.selectedRowKeys, ...list])]\n      }\n    },\n    'formValue.product_id': {\n      deep: true,\n      immediate: true,\n      handler(newVal, oldVal) {\n        if (!newVal || newVal === oldVal) return\n        // 私教课 统一定价模式, 非教练谈单模式 选择的私教课发生变更，则更新对应的 教练等级列表\n        this.brand.priceModel === 2 &&\n          this.brand.saleModel !== 1 &&\n          this.service.getCoachLevelList(newVal).subscribe()\n        // 非编辑状态 如果商品选择发生改变则默认全部勾选\n        if (!this.isEdit) {\n          this.allSelected = true\n        }\n      }\n    },\n    tableList: {\n      deep: true,\n      handler(newVal, oldVal) {\n        if (!newVal || newVal === oldVal) return\n        // 非编辑状态 如果商品选择发生改变则默认全部勾选\n        if (!this.isEdit && this.allSelected) {\n          this.$nextTick(() => {\n            let list = []\n            this.tableList.map(item => {\n              list.push(item.product_sku_id)\n            })\n            console.log(list, this.tableList)\n            this.selectedRowKeys = [\n              ...new Set([...this.selectedRowKeys, ...list])\n            ]\n          })\n        }\n      }\n    }\n  },\n  mounted() {\n    console.log(this.decorators)\n    if (!this.isEdit) {\n      this.service.getMemberList().subscribe()\n      this.service.getDepositList().subscribe()\n      this.service.getPersonalList().subscribe()\n    } else {\n      let name = 'getMemberList'\n      switch (this.formValue.product_type) {\n        case PRODUCT_TYPE.MEMBER_CARD:\n          name = 'getMemberList'\n          break\n        case PRODUCT_TYPE.DEPOSIT_CARD:\n          name = 'getDepositList'\n          break\n        case PRODUCT_TYPE.PERSONAL_COURSE:\n          name = 'getPersonalList'\n          break\n      }\n      console.log(222222)\n      this.service[name]().subscribe(res => {\n        this.checkProductIsExist(res.list)\n      })\n    }\n  },\n  methods: {\n    onTypeChange(val) {\n      this.setFieldsValue('product_id', undefined)\n      this.formValue.limit_course_num = 1\n      this.formValue.discount_info = []\n      this.selectedRowKeys = []\n    },\n    // onMemberChange(val) {},\n    // onDepositChange(val) {},\n    // onPersonalChange(val) {},\n    onTableChange(value) {\n      console.log(value)\n      this.allSelected = false\n      this.selectedRowKeys = value\n      this.getDiscountInfo(this.tableList)\n    },\n    // 修改列表对应 index 下的 price\n    onTablePriceChange(index, val) {\n      let list = this.tableList\n      this.allSelected = false\n      list.splice(index, 1, {\n        ...this.tableList[index],\n        discount_price: val\n      })\n      this.tableList = list\n    },\n    getDiscountInfo(value) {\n      let list = []\n      value.map(item => {\n        if (item.isSelected) {\n          list.push({\n            product_sku_id: item.id || item.product_sku_id || 0,\n            discount_price: item.discount_price || null\n          })\n        }\n      })\n      this.formValue.discount_info = list\n    },\n    checkProductIsExist(list) {\n      const itemArr = list.filter(item => {\n        return item.id === this.formValue.product_id\n      })\n      if (!itemArr.length) {\n        this.$confirm({\n          title: '提示',\n          content: '该商品不存在或已被删除'\n        })\n      }\n    },\n    validate() {\n      let is_pass = true\n      if (!this.formValue.discount_info.length) {\n        this.messageError({ content: '请设置优惠价格' })\n        return false\n      }\n      this.formValue.discount_info.map(item => {\n        if (\n          is_pass &&\n          (item.discount_price === null ||\n            item.discount_price === undefined ||\n            item.discount_price === '')\n        ) {\n          this.messageError({ content: '请设置优惠价格' })\n          is_pass = false\n          return\n        }\n      })\n      return is_pass\n    }\n  }\n}\n",{"version":3,"sources":["product-setting.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"product-setting.vue","sourceRoot":"src/views/pages/brand/app/plugin/components#","sourcesContent":["<template>\n  <div>\n    <st-form-item required label=\"请选择商品类型\">\n      <st-select\n        placeholder=\"请选择\"\n        style=\"width: 470px\"\n        v-decorator=\"decorators.product_type\"\n        @change=\"\n          formValueChange('product_type', $event, onTypeChange, formValue)\n        \"\n        :options=\"productTypeList\"\n        :disabled=\"isEdit\"\n      ></st-select>\n    </st-form-item>\n    <!-- 会员卡 -->\n    <template v-if=\"formValue.product_type === PRODUCT_TYPE.MEMBER_CARD\">\n      <st-form-item required :label=\"`请选择${$c('member_card')}`\">\n        <st-select-scroll\n          placeholder=\"请选择\"\n          style=\"width: 470px\"\n          _label=\"product_name\"\n          _value=\"id\"\n          filter=\"label\"\n          showArrow\n          :isScroll=\"false\"\n          :options=\"memberList\"\n          v-decorator=\"decorators.product_id\"\n          @change=\"formValueChange('product_id', $event, formValue)\"\n          :disabled=\"isEdit\"\n        ></st-select-scroll>\n      </st-form-item>\n    </template>\n    <!-- 储值卡 -->\n    <template v-if=\"formValue.product_type === PRODUCT_TYPE.DEPOSIT_CARD\">\n      <st-form-item required label=\"请选择储值卡\">\n        <st-select-scroll\n          placeholder=\"请选择\"\n          style=\"width: 470px\"\n          _label=\"product_name\"\n          _value=\"id\"\n          filter=\"label\"\n          showArrow\n          :isScroll=\"false\"\n          :options=\"depositList\"\n          v-decorator=\"decorators.product_id\"\n          @change=\"formValueChange('product_id', $event, formValue)\"\n          :disabled=\"isEdit\"\n        ></st-select-scroll>\n      </st-form-item>\n    </template>\n    <!-- 私教课 -->\n    <template v-if=\"formValue.product_type === PRODUCT_TYPE.PERSONAL_COURSE\">\n      <st-form-item required label=\"请选择私教课\">\n        <st-select-scroll\n          style=\"width: 470px\"\n          placeholder=\"请选择\"\n          _label=\"product_name\"\n          _value=\"id\"\n          filter=\"label\"\n          showArrow\n          :isScroll=\"false\"\n          :options=\"personalList\"\n          v-decorator=\"decorators.product_id\"\n          @change=\"formValueChange('product_id', $event, formValue)\"\n          :disabled=\"isEdit\"\n        ></st-select-scroll>\n      </st-form-item>\n    </template>\n    <!-- 必须用v-show， 否则集联关系报错 -->\n    <st-form-item\n      required\n      label=\"限定课时\"\n      v-show=\"formValue.product_type === PRODUCT_TYPE.PERSONAL_COURSE\"\n    >\n      <st-input-number\n        v-decorator=\"decorators.limit_course_num\"\n        @change=\"formValueChange('limit_course_num', $event, formValue)\"\n        placeholder=\"\"\n        style=\"width: 150px\"\n        :min=\"1\"\n        :max=\"9999\"\n      >\n        <span slot=\"addonAfter\">节</span>\n      </st-input-number>\n    </st-form-item>\n    <st-form-item required label=\"优惠设置\">\n      <a-card size=\"small\" style=\"width: 470px\">\n        <st-table\n          emptyText=\"暂无数据\"\n          :rowKey=\"record => record.id || record.product_sku_id\"\n          :columns=\"columns\"\n          :dataSource=\"tableList\"\n          :page=\"false\"\n          :rowSelection=\"{\n            onChange: onTableChange,\n            selectedRowKeys: selectedRowKeys\n          }\"\n        >\n          <span slot=\"discount_price\" slot-scope=\"text, record, index\">\n            <st-input-number\n              style=\"width: 130px\"\n              :min=\"0\"\n              :max=\"999999.9\"\n              :disabled=\"!record.isSelected\"\n              :value=\"text\"\n              float\n              @change=\"onTablePriceChange(index, $event)\"\n            >\n              <span slot=\"addonAfter\">元</span>\n            </st-input-number>\n          </span>\n        </st-table>\n      </a-card>\n    </st-form-item>\n  </div>\n</template>\n<script>\nimport { PRODUCT_TYPE } from '@/constants/brand/app/plugin/discount'\nimport { typeOf } from '@/utils/type'\nimport { listToMap } from '@/utils/list-to-map'\nimport { isEqual, merge } from 'lodash-es'\nimport FormMixin from './form.mixin'\n\nimport { MessageService } from '@/services/message.service'\nimport {\n  memberCardColumns,\n  depositCardColumns,\n  personalCourseLevelColumns,\n  personalCourseColumns,\n  productSettingRules\n} from './product-setting.config'\nimport { ProductSettingService } from './product-setting.service'\nexport default {\n  name: 'PluginProductSetting',\n  mixins: [FormMixin],\n  serviceInject() {\n    return {\n      service: ProductSettingService,\n      messageService: MessageService\n    }\n  },\n  rxState() {\n    return {\n      loading: this.service.loading$,\n      productType: this.service.productType$,\n      memberList: this.service.memberList$,\n      depositList: this.service.depositList$,\n      personalList: this.service.personalList$,\n      coachLevelList: this.service.coachLevelList$,\n      brand: this.service.brand$\n    }\n  },\n  // decorators() {\n  //   return this.form.addDecorators(this.productSettingRules)\n  // },\n  props: {\n    discountPriceLabel: {\n      type: String,\n      default: '优惠价(元)'\n    },\n    form: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    }\n  },\n  data() {\n    return {\n      PRODUCT_TYPE,\n      selectedRowKeys: [],\n      allSelected: false\n    }\n  },\n  computed: {\n    productSettingRules,\n    decorators() {\n      return this.form.addDecorators(this.productSettingRules)\n    },\n    productTypeList() {\n      return this.productType.filter(\n        item =>\n          !(\n            this.PRODUCT_TYPE.PERSONAL_COURSE === item.value &&\n            this.brand.saleModel === 1\n          )\n      )\n    },\n    tableList: {\n      get() {\n        let list = []\n        if (this.formValue.product_type === PRODUCT_TYPE.MEMBER_CARD) {\n          list = this.tableMemberList\n        }\n        if (this.formValue.product_type === PRODUCT_TYPE.DEPOSIT_CARD) {\n          list = this.tableDepositList\n        }\n        if (this.formValue.product_type === PRODUCT_TYPE.PERSONAL_COURSE) {\n          list = this.tableCourseList\n        }\n        return list.map(item => {\n          const id = item.id !== undefined ? item.id : item.product_sku_id\n          return {\n            ...item,\n            product_sku_id: item.id || item.product_sku_id || 0,\n            discount_price: item.discount_price || null,\n            hour: this.formValue.limit_course_num,\n            ...(this.discountInfoMap[id] || {}),\n            isSelected:\n              (!this.isEdit && this.allSelected) ||\n              this.selectedRowKeys.includes(item.id) ||\n              this.selectedRowKeys.includes(item.product_sku_id)\n          }\n        })\n      },\n      set(value) {\n        this.getDiscountInfo(value)\n      }\n    },\n    tableMemberList() {\n      const itemArr = this.memberList.filter(item => {\n        return item.id === this.formValue.product_id\n      })\n      return itemArr.length ? itemArr[0].product_spec : []\n    },\n    tableDepositList() {\n      const itemArr = this.depositList.filter(item => {\n        return item.id == this.formValue.product_id\n      })\n      return itemArr.length ? itemArr[0].product_spec : []\n    },\n    tableCourseList() {\n      if (this.brand.priceModel !== 2) {\n        // 私教课 priceModel = 1 统一定价模式\n        return [\n          {\n            product_sku_id: 0,\n            discount_price: null\n          }\n        ]\n      }\n      return this.coachLevelList\n    },\n    discountInfoMap() {\n      return listToMap(this.formValue.discount_info, {\n        keyField: 'product_sku_id'\n      })\n    },\n    columns() {\n      if (this.formValue.product_type === PRODUCT_TYPE.PERSONAL_COURSE) {\n        return this.brand.priceModel === 2\n          ? personalCourseLevelColumns(this)\n          : personalCourseColumns(this)\n      }\n      if (this.formValue.product_type === PRODUCT_TYPE.DEPOSIT_CARD) {\n        return depositCardColumns(this)\n      }\n      if (this.formValue.product_type === PRODUCT_TYPE.MEMBER_CARD) {\n        return memberCardColumns(this)\n      }\n      return []\n    }\n  },\n  watch: {\n    'formValue.discount_info': {\n      deep: true,\n      immediate: true,\n      handler(value) {\n        let list = []\n        value &&\n          value.map(item => {\n            list.push(item.product_sku_id)\n          })\n        // 去重\n        this.selectedRowKeys = [...new Set([...this.selectedRowKeys, ...list])]\n      }\n    },\n    'formValue.product_id': {\n      deep: true,\n      immediate: true,\n      handler(newVal, oldVal) {\n        if (!newVal || newVal === oldVal) return\n        // 私教课 统一定价模式, 非教练谈单模式 选择的私教课发生变更，则更新对应的 教练等级列表\n        this.brand.priceModel === 2 &&\n          this.brand.saleModel !== 1 &&\n          this.service.getCoachLevelList(newVal).subscribe()\n        // 非编辑状态 如果商品选择发生改变则默认全部勾选\n        if (!this.isEdit) {\n          this.allSelected = true\n        }\n      }\n    },\n    tableList: {\n      deep: true,\n      handler(newVal, oldVal) {\n        if (!newVal || newVal === oldVal) return\n        // 非编辑状态 如果商品选择发生改变则默认全部勾选\n        if (!this.isEdit && this.allSelected) {\n          this.$nextTick(() => {\n            let list = []\n            this.tableList.map(item => {\n              list.push(item.product_sku_id)\n            })\n            console.log(list, this.tableList)\n            this.selectedRowKeys = [\n              ...new Set([...this.selectedRowKeys, ...list])\n            ]\n          })\n        }\n      }\n    }\n  },\n  mounted() {\n    console.log(this.decorators)\n    if (!this.isEdit) {\n      this.service.getMemberList().subscribe()\n      this.service.getDepositList().subscribe()\n      this.service.getPersonalList().subscribe()\n    } else {\n      let name = 'getMemberList'\n      switch (this.formValue.product_type) {\n        case PRODUCT_TYPE.MEMBER_CARD:\n          name = 'getMemberList'\n          break\n        case PRODUCT_TYPE.DEPOSIT_CARD:\n          name = 'getDepositList'\n          break\n        case PRODUCT_TYPE.PERSONAL_COURSE:\n          name = 'getPersonalList'\n          break\n      }\n      console.log(222222)\n      this.service[name]().subscribe(res => {\n        this.checkProductIsExist(res.list)\n      })\n    }\n  },\n  methods: {\n    onTypeChange(val) {\n      this.setFieldsValue('product_id', undefined)\n      this.formValue.limit_course_num = 1\n      this.formValue.discount_info = []\n      this.selectedRowKeys = []\n    },\n    // onMemberChange(val) {},\n    // onDepositChange(val) {},\n    // onPersonalChange(val) {},\n    onTableChange(value) {\n      console.log(value)\n      this.allSelected = false\n      this.selectedRowKeys = value\n      this.getDiscountInfo(this.tableList)\n    },\n    // 修改列表对应 index 下的 price\n    onTablePriceChange(index, val) {\n      let list = this.tableList\n      this.allSelected = false\n      list.splice(index, 1, {\n        ...this.tableList[index],\n        discount_price: val\n      })\n      this.tableList = list\n    },\n    getDiscountInfo(value) {\n      let list = []\n      value.map(item => {\n        if (item.isSelected) {\n          list.push({\n            product_sku_id: item.id || item.product_sku_id || 0,\n            discount_price: item.discount_price || null\n          })\n        }\n      })\n      this.formValue.discount_info = list\n    },\n    checkProductIsExist(list) {\n      const itemArr = list.filter(item => {\n        return item.id === this.formValue.product_id\n      })\n      if (!itemArr.length) {\n        this.$confirm({\n          title: '提示',\n          content: '该商品不存在或已被删除'\n        })\n      }\n    },\n    validate() {\n      let is_pass = true\n      if (!this.formValue.discount_info.length) {\n        this.messageError({ content: '请设置优惠价格' })\n        return false\n      }\n      this.formValue.discount_info.map(item => {\n        if (\n          is_pass &&\n          (item.discount_price === null ||\n            item.discount_price === undefined ||\n            item.discount_price === '')\n        ) {\n          this.messageError({ content: '请设置优惠价格' })\n          is_pass = false\n          return\n        }\n      })\n      return is_pass\n    }\n  }\n}\n</script>\n"]}]}