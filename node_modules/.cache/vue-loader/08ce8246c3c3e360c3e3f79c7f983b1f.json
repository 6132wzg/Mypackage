{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/schedule/team/add-course-batch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/schedule/team/add-course-batch.vue","mtime":1594718339923},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { cloneDeep } from 'lodash-es'\nimport { TeamScheduleCommonService } from '@/views/pages/shop/product/course/schedule/team/service#/common.service'\nimport { TeamScheduleScheduleService } from '@/views/pages/shop/product/course/schedule/team/service#/schedule.service'\nimport { MessageService } from '@/services/message.service'\nimport { columns } from './add-course-batch.config'\nexport default {\n  name: 'AddCourseScheduleBatch',\n  bem: {\n    b: 'modal-schedule-team-add-course-batch'\n  },\n  serviceInject() {\n    return {\n      teamScheduleCommonService: TeamScheduleCommonService,\n      teamScheduleScheduleService: TeamScheduleScheduleService,\n      msg: MessageService\n    }\n  },\n  rxState() {\n    const tss = this.teamScheduleCommonService\n    return {\n      coachOptions: tss.coachOptions$,\n      courseOptions: tss.courseOptions$,\n      courtOptions: tss.courtOptions$\n    }\n  },\n  data() {\n    const data = []\n    for (let i = 0; i < 100; i++) {\n      if (i === 0) {\n        data.push({\n          key: 0,\n          editable: true,\n          start_time: moment(),\n          course_id: '',\n          coach_id: '',\n          limit_num: 0,\n          court_site_id: []\n        })\n      }\n    }\n    this.cacheData = data.map(item => ({ ...item }))\n    return {\n      data,\n      obj: {\n        key: 0,\n        editable: true,\n        start_time: '',\n        course_id: '',\n        coach_id: '',\n        court_site_id: '',\n        show: {}\n      },\n      show: false\n    }\n  },\n  filters: {\n    formatDate(val) {\n      return val ? moment(val) : undefined\n    }\n  },\n  computed: {\n    columns\n  },\n  methods: {\n    validateForm(form) {\n      if (!form.start_time) {\n        this.msg.error({ content: '排期开始时间不能为空' })\n        return false\n      }\n      if (!form.course_id) {\n        this.msg.error({ content: '请选择课程' })\n        return false\n      }\n      if (!form.coach_id) {\n        this.msg.error({ content: `请选择课程${this.$c('coach')}` })\n        return false\n      }\n      if (!form.limit_num) {\n        this.msg.error({ content: '请输入上课人数' })\n        return false\n      }\n      if (!form.course_fee) {\n        this.msg.error({ content: '请输入课时费' })\n        return false\n      }\n      return true\n    },\n    onOkSaveForm() {\n      let data = cloneDeep(this.data)\n      data = data\n        .filter((item, index) => {\n          return index !== 0\n        })\n        .map(item => {\n          delete item.show\n          delete item.key\n          delete item.editable\n          item.start_time = moment(item.start_time).format('YYYY-MM-DD HH:mm')\n          item.court_id = item.court_site_id[0]\n          item.court_site_id = item.court_site_id[1]\n          item.limit_num = +item.limit_num\n          item.course_fee = +item.course_fee\n          return item\n        })\n      this.teamScheduleScheduleService\n        .addScheduleInBatch(data)\n        .subscribe(res => {\n          this.show = false\n          this.$emit('ok')\n        })\n    },\n    handleChange(value, key, column) {\n      const newData = [...this.data]\n      const target = newData.filter(item => key === item.key)[0]\n      if (target) {\n        target[column] = value\n        this.data = newData\n      }\n    },\n    edit(key) {\n      const newData = [...this.data]\n      const target = newData.filter(item => key === item.key)[0]\n      if (target) {\n        target.editable = true\n        this.data = newData\n      }\n    },\n    deleteData(key) {\n      const newData = [...this.data]\n      const target = newData.filter(item => key === item.key)[0]\n      if (target) {\n        target.editable = true\n        this.data = newData.filter(item => {\n          return item.key !== key\n        })\n      }\n    },\n    getShowTableData(data) {\n      data.key = Math.random()\n      data.show = {}\n      data.show.start_time_show = moment(data.start_time).format(\n        'YYYY-MM-DD HH:mm'\n      )\n      data.show.course_id_show = this.getOptionName(\n        data.course_id,\n        this.courseOptions,\n        'course_name'\n      )\n      data.show.coach_id_show = this.getOptionName(\n        data.coach_id,\n        this.coachOptions,\n        'staff_name'\n      )\n      data.show.court_site_id_show = this.getCourtSiteName(\n        data.court_site_id,\n        this.courtOptions\n      )\n      return data\n    },\n    getOptionName(id, options, name) {\n      let option = ''\n      options.forEach(ele => {\n        if (ele.id === id) {\n          option = ele[name]\n        }\n      })\n      return option\n    },\n    getCourtSiteName(ids, options) {\n      const id = ids[0]\n      const childrenId = ids[1]\n      let name = ''\n      options.forEach(item => {\n        if (item.id === id) {\n          name = item.name\n          if (item.children && item.children.length && childrenId) {\n            item.children.forEach(ele => {\n              if (ele.id === childrenId) {\n                name = `${name} - ${ele.name}`\n              }\n            })\n          }\n        }\n      })\n      return name\n    },\n    save(key) {\n      let newData = [...this.data]\n      const target = newData.filter(item => key === item.key)[0]\n      if (!this.validateForm(target)) {\n        return ''\n      }\n      if (key === 0 && target) {\n        delete target.editable\n        delete newData[0].editable\n        newData[0] = this.getShowTableData(newData[0])\n        newData.unshift({\n          key: 0,\n          editable: true,\n          start_time: moment(),\n          course_id: '',\n          coach_id: '',\n          limit_num: 0,\n          court_site_id: [],\n          show: {}\n        })\n        this.data = newData\n        this.cacheData = newData.map(item => ({ ...item }))\n        return\n      }\n      if (target) {\n        delete target.editable\n        newData.forEach(item => {\n          if (item.key === key && key !== 0) {\n            item = this.getShowTableData(item)\n          }\n        })\n        this.data = newData\n        this.cacheData = newData.map(item => ({ ...item }))\n      }\n    },\n    cancel(key) {\n      const newData = [...this.data]\n      const target = newData.filter(item => key === item.key)[0]\n      if (target) {\n        Object.assign(\n          target,\n          this.cacheData.filter(item => key === item.key)[0]\n        )\n        delete target.editable\n        this.data = newData\n      }\n    }\n  }\n}\n",null]}