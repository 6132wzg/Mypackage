{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/src/utils/walk-tree.js","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/utils/walk-tree.js","mtime":1591147717094},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\n\n/**\n * 深度遍历树结构\n */\nexport var walkTree = function walkTree(tree, fn) {\n  var walk = function walk(nodes) {\n    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    if (Array.isArray(nodes)) {\n      nodes.forEach(function (node) {\n        var hasChildren = node.children && node.children.length;\n        var needContinue = fn(node, {\n          depth: depth,\n          isLeaf: !hasChildren,\n          isTop: depth === 0\n        });\n\n        if (needContinue === false) {\n          return;\n        }\n\n        if (hasChildren) {\n          walk(node.children, depth + 1);\n        }\n      });\n    }\n  };\n\n  walk(tree);\n};",{"version":3,"sources":["/Users/wangzhigang/Desktop/styd/web/src/utils/walk-tree.js"],"names":["walkTree","tree","fn","walk","nodes","depth","Array","isArray","forEach","node","hasChildren","children","length","needContinue","isLeaf","isTop"],"mappings":";;AAAA;;;AAGA,OAAO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAOC,EAAP,EAAc;AACpC,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAsB;AAAA,QAAdC,KAAc,uEAAN,CAAM;;AACjC,QAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACxBA,MAAAA,KAAK,CAACI,OAAN,CAAc,UAAAC,IAAI,EAAI;AACpB,YAAMC,WAAW,GAAGD,IAAI,CAACE,QAAL,IAAiBF,IAAI,CAACE,QAAL,CAAcC,MAAnD;AACA,YAAMC,YAAY,GAAGX,EAAE,CAACO,IAAD,EAAO;AAC5BJ,UAAAA,KAAK,EAALA,KAD4B;AAE5BS,UAAAA,MAAM,EAAE,CAACJ,WAFmB;AAG5BK,UAAAA,KAAK,EAAEV,KAAK,KAAK;AAHW,SAAP,CAAvB;;AAKA,YAAIQ,YAAY,KAAK,KAArB,EAA4B;AAC1B;AACD;;AACD,YAAIH,WAAJ,EAAiB;AACfP,UAAAA,IAAI,CAACM,IAAI,CAACE,QAAN,EAAgBN,KAAK,GAAG,CAAxB,CAAJ;AACD;AACF,OAbD;AAcD;AACF,GAjBD;;AAkBAF,EAAAA,IAAI,CAACF,IAAD,CAAJ;AACD,CApBM","sourcesContent":["/**\n * 深度遍历树结构\n */\nexport const walkTree = (tree, fn) => {\n  const walk = (nodes, depth = 0) => {\n    if (Array.isArray(nodes)) {\n      nodes.forEach(node => {\n        const hasChildren = node.children && node.children.length\n        const needContinue = fn(node, {\n          depth,\n          isLeaf: !hasChildren,\n          isTop: depth === 0\n        })\n        if (needContinue === false) {\n          return\n        }\n        if (hasChildren) {\n          walk(node.children, depth + 1)\n        }\n      })\n    }\n  }\n  walk(tree)\n}\n"]}]}