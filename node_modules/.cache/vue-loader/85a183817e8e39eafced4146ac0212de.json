{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/components/refresh-btn/refresh-btn.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/components/refresh-btn/refresh-btn.vue","mtime":1598250255814},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { MessageService } from '@/services/message.service'\nimport { catchError } from 'rxjs/operators'\nimport moment from 'moment'\nconst TIME_FORMAT = 'MM-DD HH:mm'\nexport default {\n  name: 'StRefreshBtn',\n  props: {\n    action: {\n      type: Function\n    },\n    updateTime: {\n      type: [String, Number],\n      default: null\n    },\n    rangeTime: {\n      type: Number,\n      default: 0\n    }\n  },\n  watch: {\n    updateTime(newVal, oldVal) {\n      if (newVal != oldVal) {\n        this.showDate = moment(newVal || Date.now()).format(TIME_FORMAT)\n        this.messageService.success({\n          content: '更新略有延迟，请稍后刷新页面查看'\n        })\n      }\n    }\n  },\n  data() {\n    return {\n      showDate: moment(this.updateTime || Date.now()).format(TIME_FORMAT),\n      loading: false,\n      times: 0,\n      intervalTimer: ''\n    }\n  },\n  serviceInject() {\n    return {\n      messageService: MessageService\n    }\n  },\n  methods: {\n    refresh() {\n      if (this.times > 0) {\n        this.$message.error({ content: `间隔太短，请稍后尝试` })\n        return\n      }\n      clearInterval(this.intervalTimer)\n      this.times = this.rangeTime\n      this.loading = true\n      const timer = setTimeout(() => {\n        this.action()\n          .pipe(\n            catchError(err => {\n              setTimeout(() => {\n                this.loading = false\n              })\n              return null\n            })\n          )\n          .subscribe(() => {\n            setTimeout(() => {\n              this.loading = false\n            })\n            this.showDate = moment(this.updateTime || Date.now()).format(\n              TIME_FORMAT\n            )\n            clearTimeout(timer)\n            this.intervalTimer = setInterval(() => {\n              this.times--\n            }, 1000)\n          })\n      }, 300)\n    }\n  }\n}\n",{"version":3,"sources":["refresh-btn.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"refresh-btn.vue","sourceRoot":"src/views/components/refresh-btn","sourcesContent":["<template>\n  <a-tooltip placement=\"topRight\">\n    <template slot=\"title\">\n      <span>点击刷新</span>\n    </template>\n    <div class=\"st-refresh-btn\" @click=\"refresh\">\n      <span class=\"st-refresh-btn__date\">更新：{{ showDate }}</span>\n      <span\n        class=\"st-refresh-btn__icon\"\n        :class=\"{ 'st-refresh-btn__icon--loading': loading }\"\n      >\n        <st-icon type=\"refresh\"></st-icon>\n      </span>\n    </div>\n  </a-tooltip>\n</template>\n\n<script>\nimport { MessageService } from '@/services/message.service'\nimport { catchError } from 'rxjs/operators'\nimport moment from 'moment'\nconst TIME_FORMAT = 'MM-DD HH:mm'\nexport default {\n  name: 'StRefreshBtn',\n  props: {\n    action: {\n      type: Function\n    },\n    updateTime: {\n      type: [String, Number],\n      default: null\n    },\n    rangeTime: {\n      type: Number,\n      default: 0\n    }\n  },\n  watch: {\n    updateTime(newVal, oldVal) {\n      if (newVal != oldVal) {\n        this.showDate = moment(newVal || Date.now()).format(TIME_FORMAT)\n        this.messageService.success({\n          content: '更新略有延迟，请稍后刷新页面查看'\n        })\n      }\n    }\n  },\n  data() {\n    return {\n      showDate: moment(this.updateTime || Date.now()).format(TIME_FORMAT),\n      loading: false,\n      times: 0,\n      intervalTimer: ''\n    }\n  },\n  serviceInject() {\n    return {\n      messageService: MessageService\n    }\n  },\n  methods: {\n    refresh() {\n      if (this.times > 0) {\n        this.$message.error({ content: `间隔太短，请稍后尝试` })\n        return\n      }\n      clearInterval(this.intervalTimer)\n      this.times = this.rangeTime\n      this.loading = true\n      const timer = setTimeout(() => {\n        this.action()\n          .pipe(\n            catchError(err => {\n              setTimeout(() => {\n                this.loading = false\n              })\n              return null\n            })\n          )\n          .subscribe(() => {\n            setTimeout(() => {\n              this.loading = false\n            })\n            this.showDate = moment(this.updateTime || Date.now()).format(\n              TIME_FORMAT\n            )\n            clearTimeout(timer)\n            this.intervalTimer = setInterval(() => {\n              this.times--\n            }, 1000)\n          })\n      }, 300)\n    }\n  }\n}\n</script>\n"]}]}