{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/date-slider/date-slider.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/date-slider/date-slider.vue","mtime":1591147717102},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SliderButton from './button'\nexport default {\n  name: 'StDateSlider',\n  bem: {\n    StDateSlider: 'st-date-slider'\n  },\n  components: { SliderButton },\n  props: {\n    value: {\n      type: [Number, Array],\n      default: 0\n    },\n    tipFormatter: Function,\n    min: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 24\n    },\n    step: {\n      type: Number,\n      default: 60\n    },\n    disable: {\n      type: Boolean,\n      default: false\n    },\n    rangeData: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    return {\n      dragging: false,\n      firstValue: null,\n      secondValue: null,\n      oldValue: null\n    }\n  },\n  computed: {\n    precision() {\n      let precisions = [this.min, this.max, this.step].map(item => {\n        let decimal = ('' + item).split('.')[1]\n        return decimal ? decimal.length : 0\n      })\n      return Math.max.apply(null, precisions)\n    },\n    minValue() {\n      return Math.min(this.firstValue, this.secondValue)\n    },\n    maxValue() {\n      return Math.max(this.firstValue, this.secondValue)\n    },\n    range() {\n      return Array.isArray(this.rangeData) && this.rangeData.length\n    },\n    rangeFirst() {\n      return this.rangeData[0]\n    },\n    rangeSecond() {\n      return this.rangeData[1]\n    },\n    sliderBarSize() {\n      return `${(100 * (this.maxValue - this.minValue)) /\n        (this.max - this.min)}%`\n    },\n    sliderBarStart() {\n      return `${(100 * (this.minValue - this.min)) / (this.max - this.min)}%`\n    },\n    sliderBarStyle() {\n      return {\n        left: this.sliderBarStart,\n        width: this.sliderBarSize\n      }\n    },\n    rangeBarSize() {\n      return `${(100 * (this.rangeSecond - this.rangeFirst)) /\n        (this.max - this.min)}%`\n    },\n    rangeBarStart() {\n      return `${(100 * this.rangeFirst) / (this.max - this.min)}%`\n    },\n    rangeBarStyle() {\n      return {\n        left: this.rangeBarStart,\n        width: this.rangeBarSize\n      }\n    }\n  },\n  watch: {\n    value(val, oldVal) {\n      // console.log('value is updating', this.dragging, val, oldVal)\n      if (\n        this.dragging ||\n        (Array.isArray(val) &&\n          Array.isArray(oldVal) &&\n          val.every((item, index) => item === oldVal[index]))\n      ) {\n        return\n      }\n      this.setValues()\n    },\n    dragging(val) {\n      if (!val) {\n        console.log('dragging')\n        this.setValues()\n      }\n    },\n    firstValue(val) {\n      this.$emit('input', [this.minValue, this.maxValue])\n    },\n    secondValue() {\n      this.$emit('input', [this.minValue, this.maxValue])\n    },\n    min() {\n      // consol.log('min change')\n      this.setValues()\n    },\n    max() {\n      // consol.log('max change')\n      this.setValues()\n    },\n    rangeFirst() {\n      // consol.log('rangeFirst change')\n      if (this.range) this.setValues()\n    },\n    rangeSecond() {\n      // consol.log('rangeSecond change')\n      if (this.range) this.setValues()\n    }\n  },\n  mounted() {\n    // 确定首尾值\n    if (Array.isArray(this.value) && !this.range) {\n      this.firstValue = Math.max(this.min, this.value[0])\n      this.secondValue = Math.min(this.max, this.value[1])\n    } else {\n      this.firstValue = Math.max(this.rangeFirst, this.value[0])\n      this.secondValue = Math.min(this.rangeSecond, this.value[1])\n    }\n    this.oldValue = [this.firstValue, this.secondValue]\n    window.addEventListener('resize', this.resetSize)\n  },\n  methods: {\n    valueChanged() {\n      return ![this.minValue, this.maxValue].every(\n        (item, index) => item === this.oldValue[index]\n      )\n    },\n    setValues() {\n      if (this.min > this.max) {\n        return\n      }\n      const val = this.value\n      if (!Array.isArray(val)) return false\n      let min = this.range ? this.rangeFirst : this.min\n      let max = this.range ? this.rangeSecond : this.max\n\n      if (val[1] < min) {\n        this.$emit('input', [min, min])\n      } else if (val[0] > max) {\n        this.$emit('input', [max, max])\n      } else if (val[0] < min) {\n        this.$emit('input', [min, val[1]])\n      } else if (val[1] > max) {\n        this.$emit('input', [val[0], max])\n      } else {\n        this.firstValue = val[0]\n        this.secondValue = val[1]\n        if (this.valueChanged()) {\n          this.oldValue = val.slice()\n        }\n      }\n    },\n    setPosition(percent) {\n      let min = this.range ? this.rangeFirst : this.min\n      const targetValue = min + (percent * (this.max - this.min)) / 100\n      let button\n      if (\n        Math.abs(this.minValue - targetValue) <\n        Math.abs(this.maxValue - targetValue)\n      ) {\n        button =\n          this.firstValue < this.secondValue ? 'firstButton' : 'secondButton'\n      } else {\n        button =\n          this.firstValue > this.secondValue ? 'firstButton' : 'secondButton'\n      }\n      this.$refs[button].setPosition(percent)\n    },\n    onSliderClick(event) {\n      // console.log(this.dragging)\n      if (this.disable || this.dragging) return\n      this.resetSize()\n      console.log(this.$refs.slider)\n      const sliderOffsetLeft = this.$refs.slider.getBoundingClientRect().left\n      this.setPosition(\n        ((event.clientX - sliderOffsetLeft) / this.sliderSize) * 100\n      )\n      this.emitChange()\n    },\n    resetSize() {\n      if (this.$refs.slider) {\n        this.sliderSize = this.$refs.slider['clientWidth']\n      }\n    },\n    emitChange() {\n      this.$nextTick(() => {\n        this.$emit('input', [this.minValue, this.maxValue])\n      })\n    }\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.resetSize)\n  }\n}\n",null]}