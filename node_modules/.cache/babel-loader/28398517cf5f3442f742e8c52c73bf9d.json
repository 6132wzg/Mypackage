{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/st/image-upload/image-upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/st/image-upload/image-upload.vue","mtime":1596188219485},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _construct from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/construct\";\nimport _toConsumableArray from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { OssService } from '@/services/oss.service';\nimport { AppConfig } from '@/constants/config';\nimport { MessageService } from '@/services/message.service';\nimport ImageCropper from '@/views/biz-modals/image-cropper.vue';\nimport 'viewerjs/dist/viewer.css';\nimport Viewer from 'v-viewer/src/component.vue';\nvar defaultSize = {\n  w: '182px',\n  h: '114px'\n};\nexport default {\n  name: 'StImageUpload',\n  serviceInject: function serviceInject() {\n    return {\n      oss: OssService,\n      appConfig: AppConfig,\n      messageService: MessageService\n    };\n  },\n  modals: {\n    ImageCropper: ImageCropper\n  },\n  props: {\n    /**\n     * 上传按钮的文字\n     */\n    placeholder: {\n      type: String,\n      default: '上传照片'\n    },\n\n    /**\n     * 上传规则描述\n     */\n    description: {\n      type: String,\n      default: ''\n    },\n\n    /**\n     * 截图模态窗 相关选项\n     */\n    cropperModal: {\n      type: Object\n    },\n\n    /**\n     * 最多可上传图片数量\n     */\n    numLimit: {\n      type: Number,\n      default: 1\n    },\n\n    /**\n     * 单张图片最大 size，单位 M\n     */\n    sizeLimit: {\n      type: Number,\n      default: 2\n    },\n\n    /**\n     * 图片类型\n     */\n    fileType: {\n      type: String,\n      default: 'jpg, jpeg, png, bmp'\n    },\n\n    /**\n     * 图片及上传按钮的宽度\n     */\n    width: {\n      type: String,\n      default: defaultSize.w\n    },\n\n    /**\n     * 图片及上传按钮的宽度\n     */\n    height: {\n      type: String,\n      default: defaultSize.h\n    },\n\n    /**\n     * 初始图片列表 example: [{ image_id: 10000, image_key: 'http://styd-saas-test.oss-cn-shanghai.aliyuncs.com/image/pLOFb5kCPN4gPQ8H',image_url:'http://...' }]\n     */\n    list: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n\n    /**\n     * 缩略图filter选项 同imgFilter选项\n     */\n    filterOptions: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n\n    /**\n     * 是否使用oss私有空间\n     */\n    isPrivate: {\n      type: Boolean,\n      default: false\n    },\n\n    /**\n     * 预览时是否需要加上蒙版 蒙版和上传的图片一样大小\n     * flag 是否需要加上蒙版\n     * width 图片绘制宽度\n     * height 图片绘制高度\n     * maskUrl 蒙版的url\n     */\n    maskOptions: {\n      type: Object // default: () => ({\n      //   width: 750,\n      //   height: 1334,\n      //   maskUrl: 'https://styd-saas-test.oss-cn-shanghai.aliyuncs.com/image/default/bg-invitation-4.png'\n      // })\n\n    },\n\n    /**\n     * 后端字段映射 image_id,image_key,image_url\n     */\n    props: {\n      type: Object,\n      default: function _default() {\n        return {\n          image_id: 'image_id',\n          image_key: 'image_key',\n          image_url: 'image_url',\n          image_host: 'image_host'\n        };\n      }\n    }\n  },\n  data: function data() {\n    return {\n      fileList: [],\n      isLoading: false,\n      progress: 0,\n      defaultMaskOptions: {\n        width: 750,\n        height: 1334,\n        maskUrl: 'https://styd-saas-test.oss-cn-shanghai.aliyuncs.com/image/default/bg-invitation-4.png'\n      }\n    };\n  },\n  computed: {\n    imageId: function imageId() {\n      return this.props.image_id;\n    },\n    imageKey: function imageKey() {\n      return this.props.image_key;\n    },\n    imageUrl: function imageUrl() {\n      return this.props.image_url;\n    },\n    imageHost: function imageHost() {\n      return this.props.image_host;\n    },\n    isShowUploadBtn: function isShowUploadBtn() {\n      return this.fileList.length < this.numLimit;\n    },\n    isShowFileList: function isShowFileList() {\n      return this.fileList.length;\n    },\n    isUploadBtnInvisible: function isUploadBtnInvisible() {\n      return this.numLimit === 1 && this.fileList.length;\n    },\n    sizeStyle: function sizeStyle() {\n      return \"width: \".concat(this.width, \";  height: \").concat(this.height);\n    },\n    computedFilterOptions: function computedFilterOptions() {\n      var w = parseInt(this.width) * 2;\n      var h = parseInt(this.height) * 2;\n      return Object.assign({\n        w: w,\n        h: h\n      }, this.filterOptions);\n    }\n  },\n  watch: {\n    list: function list(newList) {\n      this.fileList = this.list;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.fileList = _construct(Array, _toConsumableArray(this.list));\n\n    if (this.maskOptions && this.fileList.length > 0) {\n      this.maskOptions = Object.assign(this.maskOptions, this.defaultMaskOptions);\n      this.drawMaskImage(this.fileList[0][this.imageUrl]).then(function (resSrc) {\n        _this.fileList[0][_this.imageUrl] = resSrc;\n      });\n    }\n  },\n  methods: {\n    onReUpload: function onReUpload(e) {\n      console.log(e);\n\n      if (!e.target.files || !e.target.files.length) {\n        return;\n      }\n\n      this.upload({\n        file: e.target.files[0]\n      });\n    },\n    upload: function upload(data) {\n      var fileCheckRet = this.fileCheck(data);\n\n      if (!fileCheckRet.isValid) {\n        this.messageService.error({\n          content: fileCheckRet.msg\n        });\n        return;\n      }\n\n      if (this.cropperModal) {\n        this.processCropper(data);\n      } else {\n        this.processUpload(data);\n      }\n    },\n    processCropper: function processCropper(data) {\n      var _this2 = this;\n\n      this.$modalRouter.push({\n        name: 'image-cropper',\n        props: _objectSpread({\n          file: data.file\n        }, this.cropperModal),\n        on: {\n          ok: function ok(res) {\n            var croppedData = res;\n\n            _this2.processUpload(croppedData);\n          }\n        }\n      });\n    },\n    processUpload: function processUpload(data) {\n      var _this3 = this;\n\n      this.isLoading = true; // 业务\n\n      this.oss.put({\n        business: 'image',\n        isPrivate: this.isPrivate,\n        file: data.file,\n        uploadProgress: function uploadProgress(e) {\n          _this3.progress = parseInt(e.loaded / e.total * 100);\n        }\n      }).subscribe({\n        next: function next(val) {\n          console.log(val);\n\n          if (_this3.maskOptions) {\n            _this3.drawMaskImage(val.url).then(function (resSrc) {\n              var _this3$fileList$push;\n\n              _this3.fileList.push((_this3$fileList$push = {}, _defineProperty(_this3$fileList$push, _this3.imageId, 0), _defineProperty(_this3$fileList$push, _this3.imageKey, val.fileKey), _defineProperty(_this3$fileList$push, _this3.imageHost, val.host), _defineProperty(_this3$fileList$push, _this3.imageUrl, resSrc), _this3$fileList$push));\n\n              _this3.$emit('change', _this3.fileList);\n            });\n          } else {\n            var _this3$fileList$push2;\n\n            _this3.fileList.push((_this3$fileList$push2 = {}, _defineProperty(_this3$fileList$push2, _this3.imageId, 0), _defineProperty(_this3$fileList$push2, _this3.imageKey, val.fileKey), _defineProperty(_this3$fileList$push2, _this3.imageHost, val.host), _defineProperty(_this3$fileList$push2, _this3.imageUrl, val.url), _this3$fileList$push2));\n\n            _this3.$emit('change', _this3.fileList);\n          }\n        },\n        error: function error(val) {\n          _this3.messageService.error({\n            content: \"Error \".concat(val.message)\n          });\n\n          _this3.isLoading = false;\n        },\n        complete: function complete() {\n          _this3.isLoading = false;\n        }\n      });\n    },\n    onDel: function onDel(index) {\n      var fileList = this.fileList;\n      var deletedFile = fileList.splice(index, 1);\n      this.fileList = fileList;\n      this.$emit('delete', deletedFile[0]);\n      this.$emit('change', this.fileList);\n    },\n    fileCheck: function fileCheck(data) {\n      var _data$file = data.file,\n          size = _data$file.size,\n          type = _data$file.type;\n      var sizeLimit = this.sizeLimit,\n          fileType = this.fileType;\n\n      if (!fileType.includes(type.split('/')[1])) {\n        return {\n          isValid: false,\n          msg: \"\\u8BF7\\u4E0A\\u4F20\".concat(fileType, \"\\u683C\\u5F0F\\u7684\\u6587\\u4EF6\")\n        };\n      }\n\n      console.log(size, sizeLimit);\n\n      if (size > sizeLimit * 1024 * 1024) {\n        return {\n          isValid: false,\n          msg: \"\\u6700\\u5927\\u4E0D\\u80FD\\u8D85\\u8FC7\".concat(sizeLimit, \"M\")\n        };\n      }\n\n      return {\n        isValid: true\n      };\n    },\n    drawMaskImage: function drawMaskImage(userImgSrc) {\n      var _this4 = this;\n\n      var myCanvas = document.getElementById('myCanvas');\n      var ctx = myCanvas.getContext('2d');\n      ctx.globalCompositeOperation = 'source-over';\n      var logo_img = new Image();\n      logo_img.setAttribute('crossOrigin', 'anonymous');\n      logo_img.src = this.maskOptions.maskUrl;\n      var user_img = new Image();\n      user_img.setAttribute('crossOrigin', 'anonymous');\n      user_img.src = userImgSrc;\n      var promise1 = new Promise(function (resolve, reject) {\n        logo_img.onload = function () {\n          resolve();\n        };\n      });\n      var promise2 = new Promise(function (resolve, reject) {\n        user_img.onload = function () {\n          resolve();\n        };\n      });\n      return new Promise(function (resolve, reject) {\n        Promise.all([promise1, promise2]).then(function (result) {\n          ctx.clearRect(0, 0, myCanvas.width, myCanvas.height);\n          ctx.drawImage(user_img, 0, 0, _this4.maskOptions.width, _this4.maskOptions.height);\n          ctx.drawImage(logo_img, 0, 0, _this4.maskOptions.width, _this4.maskOptions.height);\n          ctx.stroke();\n          myCanvas.toBlob(function (blob) {\n            var objectURL = URL.createObjectURL(blob);\n            resolve(objectURL);\n          });\n        });\n      });\n    }\n  }\n};",null]}