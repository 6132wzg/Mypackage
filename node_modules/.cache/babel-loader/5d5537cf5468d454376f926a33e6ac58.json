{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/schedule/batch/course-rank-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/schedule/batch/course-rank-preview.vue","mtime":1595230476659},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { CourseRankPreviewService } from \"./course-rank-preview.service\";\nimport { UserService } from '@/services/user.service';\nimport { columns } from \"./course-rank-preview.config\";\nimport { TeamScheduleCommonService } from '@/views/pages/shop/product/course/schedule/team/service#/common.service';\nimport { PersonalTeamScheduleCommonService } from '@/views/pages/shop/product/course/schedule/personal-team/service#/common.service';\nimport { cloneDeep } from 'lodash-es';\nimport { MessageService } from '@/services/message.service';\nexport default {\n  serviceInject: function serviceInject() {\n    return {\n      courseRankPreviewService: CourseRankPreviewService,\n      teamScheduleCommonService: TeamScheduleCommonService,\n      personalTeamScheduleCommonService: PersonalTeamScheduleCommonService,\n      userService: UserService,\n      messageService: MessageService\n    };\n  },\n  rxState: function rxState() {\n    var tss = this.teamScheduleCommonService;\n    var sms = this.personalTeamScheduleCommonService;\n    return {\n      loading: this.courseRankPreviewService.loading$,\n      coachOptionTeam: tss.coachOptions$,\n      courseOptionTeam: tss.courseOptions$,\n      courtOptionTeam: tss.courtOptions$,\n      courseOptionSmall: sms.courseOptions$,\n      coachOptionSmall: sms.coachOptions$,\n      weekDay: this.userService.enums$\n    };\n  },\n  bem: {\n    basic: 'modal-schedule-batch-course-rank-preview'\n  },\n  name: 'courseRankPreviewService',\n  props: {\n    dataTable: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    type: {\n      type: String,\n      default: ''\n    }\n  },\n  filters: {\n    formatDate: function formatDate(val) {\n      return val ? moment(val) : undefined;\n    }\n  },\n  data: function data() {\n    return {\n      courseType: 'all',\n      // 课程状态：全部课程all  部分课程part\n      show: false,\n      amountValid: 0,\n      courseSchedule: [],\n      weekDays: {},\n      coachOptions: [],\n      courseOptions: [],\n      courtOptions: [],\n      courseScheduleOld: []\n    };\n  },\n  methods: {\n    // 课程标签切换触发\n    handleSizeChange: function handleSizeChange(e) {\n      this.courseType = e.target.value;\n      var partData = this.courseScheduleOld.filter(function (item, index) {\n        if (item.is_valid) {\n          return _objectSpread({}, item);\n        }\n      });\n\n      if (this.courseScheduleOld.length === partData.length) {\n        return;\n      }\n\n      if (e.target.value === 'part') {\n        this.courseSchedule = partData;\n      } else {\n        this.courseSchedule = cloneDeep(this.courseScheduleOld);\n      }\n    },\n    // 确定排期，开始验证\n    save: function save() {\n      var _this = this;\n\n      var params = [];\n      params = this.courseScheduleOld.map(function (item) {\n        return {\n          course_id: item.course_id.data,\n          coach_id: item.coach_id.data,\n          court_id: item.site_id[0] || 0,\n          court_site_id: item.site_id[1] || 0,\n          limit_num: item.limit_num.data,\n          is_support_reserve_once: item.is_support_reserve_once.data,\n          course_fee: item.course_fee.data,\n          start_time: item.start_time.data\n        };\n      });\n      var functionName = this.type === 'team' ? 'validTeamBatch' : 'validSmallBatch';\n      this.courseRankPreviewService[functionName](params).subscribe(function (res) {\n        if (res.is_commit) {\n          _this.teamBatch(params);\n        } else {\n          var data = res.course_schedule.map(function (item) {\n            return _objectSpread({}, item, {\n              week_day: {\n                valid: 0,\n                data: item.week\n              }\n            });\n          });\n\n          _this.messageService.warn({\n            content: '存在冲突无法提交'\n          });\n\n          _this.dataTable.amount = res.amount;\n          res.course_schedule = data;\n\n          _this.processing(res);\n        }\n      });\n    },\n    // 确定排期\n    teamBatch: function teamBatch(data) {\n      var _this2 = this;\n\n      var functionName = this.type === 'team' ? 'teamBatch' : 'smallBatch';\n      this.courseRankPreviewService[functionName](data).subscribe(function (res) {\n        _this2.$emit('success', res);\n\n        _this2.messageService.success({\n          content: '排课成功'\n        });\n\n        _this2.show = false;\n      });\n    },\n    // 排期课程删除\n    onDelCourse: function onDelCourse(data, item) {\n      this.courseSchedule.splice(data, 1);\n      this.courseScheduleOld = this.courseScheduleOld.filter(function (res) {\n        if (res.index !== item.index) {\n          return _objectSpread({}, res);\n        }\n      });\n      console.log(this.courseSchedule, 'show');\n      console.log(this.courseScheduleOld, 'old');\n    },\n    onEditCourse: function onEditCourse(data, index) {\n      this.courseSchedule[index].isEdit = !data;\n    },\n    // 改变选择教练与课程后的数据\n    handleChange: function handleChange(e, index, type, item) {\n      this.courseSchedule[index][type].name = e.label.replace(/[\\r\\n]/g, '');\n      this.courseSchedule[index][type].data = e.key;\n      this.changeRed(index, item);\n    },\n    // 改变场地数据\n    courtChange: function courtChange(e, i, item) {\n      var _this3 = this;\n\n      var id = e[0];\n      var childrenId = e[1];\n      this.courtOptions.forEach(function (item) {\n        if (item.id === id) {\n          _this3.courseSchedule[i].court_id.name = item.name;\n          _this3.courseSchedule[i].court_site_id.data = 0;\n          _this3.courseSchedule[i].court_site_id.name = '';\n\n          if (item.children && item.children.length && childrenId) {\n            item.children.forEach(function (ele) {\n              if (ele.id === childrenId) {\n                _this3.courseSchedule[i].court_site_id.data = ele.id;\n                _this3.courseSchedule[i].court_site_id.name = ele.name;\n              }\n            });\n          }\n        }\n      });\n      this.changeRed(i, item);\n    },\n    // 改变时间数据\n    handleChangeTime: function handleChangeTime(e, i, type, item) {\n      var d = moment(e).format('d') == 0 ? 7 : moment(e).format('d');\n      this.courseSchedule[i].week_day.data = d;\n      this.courseSchedule[i][type].data = moment(e).format('YYYY-MM-DD HH:mm');\n      this.changeRed(i, item);\n    },\n    changeRed: function changeRed(i, item) {\n      this.courseSchedule[i].court_id.valid = 0;\n      this.courseSchedule[i].court_site_id.valid = 0;\n      this.courseSchedule[i].start_time.valid = 0;\n      this.courseSchedule[i].week_day.valid = 0;\n      this.courseSchedule[i].coach_id.valid = 0;\n      this.courseSchedule[i].limit_num.valid = 0;\n      this.courseSchedule[i].course_fee.valid = 0;\n\n      for (var x = 0; x < this.courseScheduleOld.length; x++) {\n        var res = this.courseScheduleOld[x];\n\n        if (res.index === item.index) {\n          this.courseScheduleOld[x] = item;\n          return;\n        }\n      }\n    },\n    // 显示数据处理\n    processing: function processing(data) {\n      this.amountValid = data.amount_valid;\n      this.courseSchedule = data.course_schedule.map(function (item, index) {\n        return _objectSpread({\n          id: index,\n          isEdit: false\n        }, item, {\n          site_id: [item.court_id.data, item.court_site_id.data],\n          course_id_label: {\n            key: item.course_id.data,\n            label: item.course_id.name\n          },\n          coach_id_label: {\n            key: item.coach_id.data,\n            label: item.coach_id.name\n          },\n          index: index\n        });\n      });\n      this.courseScheduleOld = cloneDeep(this.courseSchedule);\n    },\n    onSingleReserveChange: function onSingleReserveChange(index) {\n      this.courseSchedule[index].is_support_reserve_once.data = val;\n    }\n  },\n  created: function created() {\n    // 获取团课和私教小团课的课程和教练的选择项\n    if (this.type === 'team') {\n      this.coachOptions = this.coachOptionTeam; // 教练\n\n      this.courseOptions = this.courseOptionTeam; // 课程\n\n      this.courtOptions = this.courtOptionTeam; // 场地\n    } else {\n      this.coachOptions = this.coachOptionSmall; // 教练\n\n      this.courseOptions = this.courseOptionSmall; // 课程\n    }\n\n    if (this.type === 'small') {\n      this.columns.splice(4, 1);\n    }\n\n    this.weekDays = this.weekDay.shop.week_day.value;\n    this.processing(this.dataTable);\n  },\n  computed: {\n    columns: columns\n  }\n};",null]}