{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/schedule/small-course/edit-course.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/schedule/small-course/edit-course.vue","mtime":1591147717193},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { cloneDeep } from 'lodash-es'\nimport { SmallCourseScheduleService } from '@/views/pages/shop/product/course/schedule/small-course/service#/schedule.service'\nimport { SmallCourseScheduleCommonService } from '@/views/pages/shop/product/course/schedule/small-course/service#/common.service'\nimport { ruleOptions } from './edit-course.config'\nexport default {\n  name: 'AddCourseSchedule',\n  serviceInject() {\n    return {\n      smallCourseScheduleService: SmallCourseScheduleService,\n      smallCourseScheduleCommonService: SmallCourseScheduleCommonService\n    }\n  },\n  rxState() {\n    const tss = this.smallCourseScheduleCommonService\n    return {\n      loading: this.smallCourseScheduleService.loading$,\n      coachSmallCourseOptions: tss.coachBindOptions$,\n      courtOptions: tss.courtOptions$\n    }\n  },\n  computed: {\n    compareTime() {\n      return this.startTime >= this.endTime ? true : ''\n    }\n  },\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      form,\n      decorators,\n      show: false,\n      courseItem: '',\n      params: {},\n      cycle_start_date: '',\n      cycle_end_date: '',\n      startTime: '',\n      endTime: ''\n    }\n  },\n  props: {\n    item: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    cycleIndex: {\n      type: Number,\n      default: () => {\n        return 0\n      }\n    },\n    cycle: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    positionIndex: {\n      type: Number,\n      default: () => {\n        return 0\n      }\n    },\n    cycle_type: {\n      type: Number,\n      default: 0\n    },\n    courseInfo: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    }\n  },\n  created() {\n    const cycleDate = this.cycle\n    this.cycle_start_date = cycleDate[0].format('YYYY-MM-DD')\n    this.cycle_end_date = cycleDate[1].format('YYYY-MM-DD')\n  },\n  mounted() {\n    const item = cloneDeep(this.item)\n    console.log(item)\n    console.log(this.cycle)\n    const court_item = [item.court_id, item.court_site_id]\n    const time = moment(item.start_date)\n    this.form.setFieldsValue({\n      current_course_name: item.current_course_name,\n      coach_id: item.coach_id,\n      court_id: court_item\n    })\n    let start_time, end_time\n    if (this.cycle_type === 2) {\n      start_time = moment(this.item.start_time)\n      end_time = moment(this.item.end_time)\n      this.form.setFieldsValue({\n        start_days: time\n      })\n    } else {\n      start_time = moment(`${this.cycle_start_date} ${this.item.start_time}`)\n      end_time = moment(`${this.cycle_start_date} ${this.item.end_time}`)\n    }\n    this.form.setFieldsValue({\n      start_time: start_time,\n      end_time: end_time\n    })\n    this.startTime = start_time\n    this.endTime = end_time\n    this.onChangeCoach(item.coach_id)\n    this.onChangeCourt(court_item)\n  },\n  methods: {\n    changeStartTime(value) {\n      this.startTime = value\n      const endTime = this.form.getFieldValue('end_time')\n    },\n    changeEndTime(value) {\n      this.endTime = value\n    },\n    onChangeCoach(value) {\n      this.coachSmallCourseOptions.forEach((item, index) => {\n        if (item.id === value) {\n          this.params.coach_name = item.name\n        }\n      })\n    },\n    onChangeCourt(data) {\n      this.courtOptions.forEach((item, index) => {\n        if (item.id === data[0]) {\n          this.params.court_name = item.name\n          if (data[1]) {\n            item.children.forEach((childrenItem, index) => {\n              if (childrenItem.id === data[1]) {\n                this.params.court_site_name = childrenItem.name\n              }\n            })\n          } else {\n            this.params.court_site_name = ''\n          }\n        }\n        return\n      })\n    },\n    editCourse(cycleIndex, conflict, params, list) {\n      this.$emit(\n        'editCourse',\n        cycleIndex,\n        this.positionIndex,\n        conflict,\n        params,\n        list\n      )\n      this.show = false\n    },\n    editCustomCourse(params) {\n      this.$emit('editCustomCourse', this.positionIndex, params)\n      this.show = false\n    },\n    editSchedule(verifyParams) {\n      this.smallCourseScheduleService\n        .editScheduleInBatchs(verifyParams)\n        .subscribe(res => {\n          console.log(res)\n          this.editCourse(this.cycleIndex, res.conflict, verifyParams, res.list)\n        })\n    },\n    editScheduleCustom(verifyParams) {\n      this.smallCourseScheduleService\n        .editScheduleInBatchCustoms(verifyParams)\n        .subscribe(res => {\n          console.log(res)\n          if (!res.conflict) {\n            this.editCustomCourse(verifyParams)\n          }\n        })\n    },\n    addSchedule(verifyParams) {\n      this.smallCourseScheduleService\n        .addScheduleInBatch(verifyParams)\n        .subscribe(res => {\n          console.log(res)\n          if (!res.conflict) {\n            verifyParams.schedule_ids = res.schedule_ids\n          }\n          this.editCourse(this.cycleIndex, res.conflict, verifyParams, res.list)\n        })\n    },\n    addCourse(cycleIndex, conflict, params, list) {\n      this.$emit('addCourse', cycleIndex, conflict, params, list)\n      this.show = false\n    },\n    addScheduleCustom(verifyParams) {\n      this.smallCourseScheduleService\n        .addScheduleInBatchCustom(verifyParams)\n        .subscribe(res => {\n          console.log(res)\n          if (!res.conflict) {\n            verifyParams.id = res.schedule_id\n            this.addCustomCourse(verifyParams)\n          }\n        })\n    },\n    addCustomCourse(params) {\n      this.$emit('addCustomCourse', params)\n      this.show = false\n    },\n    onSubmit() {\n      this.form.validate().then(values => {\n        console.log(values)\n        const form = cloneDeep(values)\n        if (this.cycle_type === 2) {\n          const start_days = values.start_days.format('YYYY-MM-DD')\n          const start_time = values.start_time.format('HH:mm')\n          const end_time = values.end_time.format('HH:mm')\n          form.start_time = start_days + ' ' + start_time\n          form.end_time = start_days + ' ' + end_time\n        } else {\n          form.start_time = form.start_time.format('HH:mm')\n          form.end_time = form.end_time.format('HH:mm')\n        }\n        form.court_id = values.court_id[0]\n        form.court_site_id = values.court_id[1]\n        form.week = this.item.week\n        form.cycle_start_date = this.cycle[0].format('YYYY-MM-DD')\n        form.cycle_end_date = this.cycle[1].format('YYYY-MM-DD')\n        form.id = this.item.id\n        form.course_id = this.courseInfo.course_id\n        form.schedule_ids = this.item.schedule_ids\n        const verifyParams = Object.assign(this.params, form)\n        console.log('提交参数')\n        console.log(verifyParams)\n        if (verifyParams.schedule_ids === undefined && this.cycle_type === 1) {\n          this.addSchedule(verifyParams)\n          return\n        }\n        if (verifyParams.id === undefined && this.cycle_type === 2) {\n          this.addScheduleCustom(verifyParams)\n          return\n        }\n        if (this.cycle_type === 1) {\n          this.editSchedule(verifyParams)\n        } else {\n          this.editScheduleCustom(verifyParams)\n        }\n      })\n    },\n    onClick() {\n      this.show = false\n    },\n    onScheduleChange() {\n      this.$router.reload()\n    }\n  }\n}\n",{"version":3,"sources":["edit-course.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"edit-course.vue","sourceRoot":"src/views/biz-modals/schedule/small-course","sourcesContent":["<template>\n  <st-modal title=\"编辑课程\" v-model=\"show\" width=\"520px\">\n    <st-form :form=\"form\" labelWidth=\"72px\" labelAuto>\n      <st-form-item label=\"排课名称\">\n        <a-input\n          placeholder=\"请输入\"\n          v-decorator=\"decorators.current_course_name\"\n        />\n      </st-form-item>\n      <st-form-item label=\"日期\" required v-if=\"cycle_type === 2\">\n        <a-date-picker\n          style=\"width:100%\"\n          format=\"YYYY-MM-DD\"\n          v-decorator=\"decorators.start_days\"\n        />\n      </st-form-item>\n      <st-form-item label=\"开始时间\" required>\n        <a-time-picker\n          format=\"HH:mm\"\n          style=\"width:100%\"\n          @change=\"changeStartTime\"\n          v-decorator=\"decorators.start_time\"\n        />\n      </st-form-item>\n      <st-form-item label=\"结束时间\" required>\n        <a-time-picker\n          format=\"HH:mm\"\n          style=\"width:100%\"\n          @change=\"changeEndTime\"\n          v-decorator=\"decorators.end_time\"\n        />\n      </st-form-item>\n      <st-form-item :label=\"$c('coach')\" required>\n        <a-select\n          :placeholder=\"`请选择${$c('coach')}`\"\n          @change=\"onChangeCoach\"\n          v-decorator=\"decorators.coach_id\"\n        >\n          <a-select-option\n            v-for=\"coach in coachSmallCourseOptions\"\n            :key=\"coach.id\"\n            :value=\"coach.id\"\n          >\n            {{ coach.name }}\n          </a-select-option>\n        </a-select>\n      </st-form-item>\n      <st-form-item label=\"场地\" required class=\"mg-b0\">\n        <a-cascader\n          placeholder=\"请选择场地\"\n          :options=\"courtOptions\"\n          :fieldNames=\"{ label: 'name', value: 'id', children: 'children' }\"\n          v-decorator=\"decorators.court_id\"\n          @change=\"onChangeCourt\"\n        />\n      </st-form-item>\n    </st-form>\n    <template slot=\"footer\">\n      <st-button @click=\"onClick\">取消</st-button>\n      <st-button type=\"primary\" :loading=\"loading.add\" @click=\"onSubmit\">\n        提交\n      </st-button>\n    </template>\n  </st-modal>\n</template>\n\n<script>\nimport { cloneDeep } from 'lodash-es'\nimport { SmallCourseScheduleService } from '@/views/pages/shop/product/course/schedule/small-course/service#/schedule.service'\nimport { SmallCourseScheduleCommonService } from '@/views/pages/shop/product/course/schedule/small-course/service#/common.service'\nimport { ruleOptions } from './edit-course.config'\nexport default {\n  name: 'AddCourseSchedule',\n  serviceInject() {\n    return {\n      smallCourseScheduleService: SmallCourseScheduleService,\n      smallCourseScheduleCommonService: SmallCourseScheduleCommonService\n    }\n  },\n  rxState() {\n    const tss = this.smallCourseScheduleCommonService\n    return {\n      loading: this.smallCourseScheduleService.loading$,\n      coachSmallCourseOptions: tss.coachBindOptions$,\n      courtOptions: tss.courtOptions$\n    }\n  },\n  computed: {\n    compareTime() {\n      return this.startTime >= this.endTime ? true : ''\n    }\n  },\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      form,\n      decorators,\n      show: false,\n      courseItem: '',\n      params: {},\n      cycle_start_date: '',\n      cycle_end_date: '',\n      startTime: '',\n      endTime: ''\n    }\n  },\n  props: {\n    item: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    cycleIndex: {\n      type: Number,\n      default: () => {\n        return 0\n      }\n    },\n    cycle: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    positionIndex: {\n      type: Number,\n      default: () => {\n        return 0\n      }\n    },\n    cycle_type: {\n      type: Number,\n      default: 0\n    },\n    courseInfo: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    }\n  },\n  created() {\n    const cycleDate = this.cycle\n    this.cycle_start_date = cycleDate[0].format('YYYY-MM-DD')\n    this.cycle_end_date = cycleDate[1].format('YYYY-MM-DD')\n  },\n  mounted() {\n    const item = cloneDeep(this.item)\n    console.log(item)\n    console.log(this.cycle)\n    const court_item = [item.court_id, item.court_site_id]\n    const time = moment(item.start_date)\n    this.form.setFieldsValue({\n      current_course_name: item.current_course_name,\n      coach_id: item.coach_id,\n      court_id: court_item\n    })\n    let start_time, end_time\n    if (this.cycle_type === 2) {\n      start_time = moment(this.item.start_time)\n      end_time = moment(this.item.end_time)\n      this.form.setFieldsValue({\n        start_days: time\n      })\n    } else {\n      start_time = moment(`${this.cycle_start_date} ${this.item.start_time}`)\n      end_time = moment(`${this.cycle_start_date} ${this.item.end_time}`)\n    }\n    this.form.setFieldsValue({\n      start_time: start_time,\n      end_time: end_time\n    })\n    this.startTime = start_time\n    this.endTime = end_time\n    this.onChangeCoach(item.coach_id)\n    this.onChangeCourt(court_item)\n  },\n  methods: {\n    changeStartTime(value) {\n      this.startTime = value\n      const endTime = this.form.getFieldValue('end_time')\n    },\n    changeEndTime(value) {\n      this.endTime = value\n    },\n    onChangeCoach(value) {\n      this.coachSmallCourseOptions.forEach((item, index) => {\n        if (item.id === value) {\n          this.params.coach_name = item.name\n        }\n      })\n    },\n    onChangeCourt(data) {\n      this.courtOptions.forEach((item, index) => {\n        if (item.id === data[0]) {\n          this.params.court_name = item.name\n          if (data[1]) {\n            item.children.forEach((childrenItem, index) => {\n              if (childrenItem.id === data[1]) {\n                this.params.court_site_name = childrenItem.name\n              }\n            })\n          } else {\n            this.params.court_site_name = ''\n          }\n        }\n        return\n      })\n    },\n    editCourse(cycleIndex, conflict, params, list) {\n      this.$emit(\n        'editCourse',\n        cycleIndex,\n        this.positionIndex,\n        conflict,\n        params,\n        list\n      )\n      this.show = false\n    },\n    editCustomCourse(params) {\n      this.$emit('editCustomCourse', this.positionIndex, params)\n      this.show = false\n    },\n    editSchedule(verifyParams) {\n      this.smallCourseScheduleService\n        .editScheduleInBatchs(verifyParams)\n        .subscribe(res => {\n          console.log(res)\n          this.editCourse(this.cycleIndex, res.conflict, verifyParams, res.list)\n        })\n    },\n    editScheduleCustom(verifyParams) {\n      this.smallCourseScheduleService\n        .editScheduleInBatchCustoms(verifyParams)\n        .subscribe(res => {\n          console.log(res)\n          if (!res.conflict) {\n            this.editCustomCourse(verifyParams)\n          }\n        })\n    },\n    addSchedule(verifyParams) {\n      this.smallCourseScheduleService\n        .addScheduleInBatch(verifyParams)\n        .subscribe(res => {\n          console.log(res)\n          if (!res.conflict) {\n            verifyParams.schedule_ids = res.schedule_ids\n          }\n          this.editCourse(this.cycleIndex, res.conflict, verifyParams, res.list)\n        })\n    },\n    addCourse(cycleIndex, conflict, params, list) {\n      this.$emit('addCourse', cycleIndex, conflict, params, list)\n      this.show = false\n    },\n    addScheduleCustom(verifyParams) {\n      this.smallCourseScheduleService\n        .addScheduleInBatchCustom(verifyParams)\n        .subscribe(res => {\n          console.log(res)\n          if (!res.conflict) {\n            verifyParams.id = res.schedule_id\n            this.addCustomCourse(verifyParams)\n          }\n        })\n    },\n    addCustomCourse(params) {\n      this.$emit('addCustomCourse', params)\n      this.show = false\n    },\n    onSubmit() {\n      this.form.validate().then(values => {\n        console.log(values)\n        const form = cloneDeep(values)\n        if (this.cycle_type === 2) {\n          const start_days = values.start_days.format('YYYY-MM-DD')\n          const start_time = values.start_time.format('HH:mm')\n          const end_time = values.end_time.format('HH:mm')\n          form.start_time = start_days + ' ' + start_time\n          form.end_time = start_days + ' ' + end_time\n        } else {\n          form.start_time = form.start_time.format('HH:mm')\n          form.end_time = form.end_time.format('HH:mm')\n        }\n        form.court_id = values.court_id[0]\n        form.court_site_id = values.court_id[1]\n        form.week = this.item.week\n        form.cycle_start_date = this.cycle[0].format('YYYY-MM-DD')\n        form.cycle_end_date = this.cycle[1].format('YYYY-MM-DD')\n        form.id = this.item.id\n        form.course_id = this.courseInfo.course_id\n        form.schedule_ids = this.item.schedule_ids\n        const verifyParams = Object.assign(this.params, form)\n        console.log('提交参数')\n        console.log(verifyParams)\n        if (verifyParams.schedule_ids === undefined && this.cycle_type === 1) {\n          this.addSchedule(verifyParams)\n          return\n        }\n        if (verifyParams.id === undefined && this.cycle_type === 2) {\n          this.addScheduleCustom(verifyParams)\n          return\n        }\n        if (this.cycle_type === 1) {\n          this.editSchedule(verifyParams)\n        } else {\n          this.editScheduleCustom(verifyParams)\n        }\n      })\n    },\n    onClick() {\n      this.show = false\n    },\n    onScheduleChange() {\n      this.$router.reload()\n    }\n  }\n}\n</script>\n"]}]}