{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js??ref--13-2!/Users/wangzhigang/Desktop/styd/web/src-entries/account/views/pages/account/login.service.ts","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src-entries/account/views/pages/account/login.service.ts","mtime":1600912104710},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js","mtime":1591062571609}],"contextDependencies":[],"result":["import _classCallCheck from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar _a, _b, _c, _d;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { MessageService } from '@/services/message.service';\nimport { Injectable } from 'vue-service-app';\nimport { State, Effect } from 'rx-state';\nimport { tap } from 'rxjs/operators';\nimport { LoginApi, LoginAccountInput } from '@/api/login';\nimport { TokenService } from '@/services/token.service';\n\nvar LoginService = /*#__PURE__*/function () {\n  function LoginService(loginApi, tokenService, msg) {\n    _classCallCheck(this, LoginService);\n\n    this.loginApi = loginApi;\n    this.tokenService = tokenService;\n    this.msg = msg;\n    this.name$ = new State('');\n    this.isBind$ = new State('');\n    this.loading$ = new State({});\n  }\n\n  _createClass(LoginService, [{\n    key: \"loginAccount\",\n    value: function loginAccount(data) {\n      var _this = this;\n\n      return this.loginApi.loginAccount(data).pipe(tap(function (res) {\n        _this.tokenService.SET_TOKEN(res.token);\n\n        localStorage.clear();\n      }));\n    }\n  }, {\n    key: \"loginPhone\",\n    value: function loginPhone(params) {\n      var _this2 = this;\n\n      return this.loginApi.loginPhone(params).pipe(tap(function (res) {\n        _this2.tokenService.SET_TOKEN(res.token);\n\n        localStorage.clear();\n      }));\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      var _this3 = this;\n\n      return this.loginApi.logout().pipe(tap(function (res) {\n        _this3.msg.success({\n          content: '注销成功'\n        });\n      }));\n    }\n  }, {\n    key: \"getCaptcha\",\n    value: function getCaptcha(params) {\n      return this.loginApi.getCaptcha(params);\n    }\n  }, {\n    key: \"checkPhoneIsBind\",\n    value: function checkPhoneIsBind(params) {\n      return this.loginApi.checkPhoneIsBind(params);\n    }\n  }, {\n    key: \"bindPhoneForAccount\",\n    value: function bindPhoneForAccount(params) {\n      var _this4 = this;\n\n      return this.loginApi.bindPhoneForAccount(params).pipe(tap(function (res) {\n        _this4.tokenService.SET_TOKEN(res.token);\n\n        localStorage.clear();\n      }));\n    }\n  }, {\n    key: \"beforeRouteEnter\",\n    value: function beforeRouteEnter(to) {\n      if (to.meta.query.isBind) {\n        this.isBind$.commit(function () {\n          return to.meta.query.isBind;\n        });\n      }\n    }\n  }]);\n\n  return LoginService;\n}();\n\n__decorate([Effect(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [typeof (_a = typeof LoginAccountInput !== \"undefined\" && LoginAccountInput) === \"function\" ? _a : Object]), __metadata(\"design:returntype\", void 0)], LoginService.prototype, \"loginAccount\", null);\n\nLoginService = __decorate([Injectable(), __metadata(\"design:paramtypes\", [typeof (_b = typeof LoginApi !== \"undefined\" && LoginApi) === \"function\" ? _b : Object, typeof (_c = typeof TokenService !== \"undefined\" && TokenService) === \"function\" ? _c : Object, typeof (_d = typeof MessageService !== \"undefined\" && MessageService) === \"function\" ? _d : Object])], LoginService);\nexport { LoginService };",{"version":3,"sources":["/Users/wangzhigang/Desktop/styd/web/src-entries/account/views/pages/account/login.service.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,cAAT,QAA+B,4BAA/B;AACA,SAAS,UAAT,QAAuC,iBAAvC;AACA,SAAS,KAAT,EAAgB,MAAhB,QAA8B,UAA9B;AACA,SAAS,GAAT,QAAoB,gBAApB;AACA,SAAS,QAAT,EAAmB,iBAAnB,QAA6D,aAA7D;AACA,SAAS,YAAT,QAA6B,0BAA7B;;AAGA,IAAa,YAAb;AAIE,wBACU,QADV,EAEU,YAFV,EAGU,GAHV,EAG6B;AAAA;;AAFnB,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,YAAA,GAAA,YAAA;AACA,SAAA,GAAA,GAAA,GAAA;AANV,SAAA,KAAA,GAAQ,IAAI,KAAJ,CAAkB,EAAlB,CAAR;AACA,SAAA,OAAA,GAAU,IAAI,KAAJ,CAAU,EAAV,CAAV;AACA,SAAA,QAAA,GAAW,IAAI,KAAJ,CAAU,EAAV,CAAX;AAKI;;AARN;AAAA;AAAA,iCAUe,IAVf,EAUsC;AAAA;;AAClC,aAAO,KAAK,QAAL,CAAc,YAAd,CAA2B,IAA3B,EAAiC,IAAjC,CACL,GAAG,CAAC,UAAA,GAAG,EAAG;AACR,QAAA,KAAI,CAAC,YAAL,CAAkB,SAAlB,CAA4B,GAAG,CAAC,KAAhC;;AACA,QAAA,YAAY,CAAC,KAAb;AACD,OAHE,CADE,CAAP;AAMD;AAjBH;AAAA;AAAA,+BAkBa,MAlBb,EAkBoC;AAAA;;AAChC,aAAO,KAAK,QAAL,CAAc,UAAd,CAAyB,MAAzB,EAAiC,IAAjC,CACL,GAAG,CAAC,UAAA,GAAG,EAAG;AACR,QAAA,MAAI,CAAC,YAAL,CAAkB,SAAlB,CAA4B,GAAG,CAAC,KAAhC;;AACA,QAAA,YAAY,CAAC,KAAb;AACD,OAHE,CADE,CAAP;AAMD;AAzBH;AAAA;AAAA,6BA0BQ;AAAA;;AACJ,aAAO,KAAK,QAAL,CAAc,MAAd,GAAuB,IAAvB,CACL,GAAG,CAAC,UAAA,GAAG,EAAG;AACR,QAAA,MAAI,CAAC,GAAL,CAAS,OAAT,CAAiB;AAAE,UAAA,OAAO,EAAE;AAAX,SAAjB;AACD,OAFE,CADE,CAAP;AAKD;AAhCH;AAAA;AAAA,+BAiCa,MAjCb,EAiCwB;AACpB,aAAO,KAAK,QAAL,CAAc,UAAd,CAAyB,MAAzB,CAAP;AACD;AAnCH;AAAA;AAAA,qCAoCmB,MApCnB,EAoC8B;AAC1B,aAAO,KAAK,QAAL,CAAc,gBAAd,CAA+B,MAA/B,CAAP;AACD;AAtCH;AAAA;AAAA,wCAuCsB,MAvCtB,EAuCiC;AAAA;;AAC7B,aAAO,KAAK,QAAL,CAAc,mBAAd,CAAkC,MAAlC,EAA0C,IAA1C,CACL,GAAG,CAAC,UAAA,GAAG,EAAG;AACR,QAAA,MAAI,CAAC,YAAL,CAAkB,SAAlB,CAA4B,GAAG,CAAC,KAAhC;;AACA,QAAA,YAAY,CAAC,KAAb;AACD,OAHE,CADE,CAAP;AAMD;AA9CH;AAAA;AAAA,qCA+CmB,EA/CnB,EA+C0B;AACtB,UAAI,EAAE,CAAC,IAAH,CAAQ,KAAR,CAAc,MAAlB,EAA0B;AACxB,aAAK,OAAL,CAAa,MAAb,CAAoB;AAAA,iBAAM,EAAE,CAAC,IAAH,CAAQ,KAAR,CAAc,MAApB;AAAA,SAApB;AACD;AACF;AAnDH;;AAAA;AAAA,GAAA;;AAUE,UAAA,CAAA,CADC,MAAM,EACP,E,mCAAA,E,qDAAmB,iB,KAAiB,W,IAAjB,iB,MAAiB,U,GAAA,E,GAAA,M,EAApC,E,uCAAA,CAAA,E,sBAAA,E,cAAA,EAOC,IAPD,CAAA;;AAVW,YAAY,GAAA,UAAA,CAAA,CADxB,UAAU,EACc,E,qDAKH,Q,KAAQ,W,IAAR,Q,MAAQ,U,GAAA,E,GAAA,M,EAAA,QAAA,EAAA,GAAA,OACJ,YADI,KACQ,WADR,IACJ,YADI,MACQ,UADR,GACQ,EADR,GACQ,M,EAAA,QAAA,EAAA,GAAA,OACrB,cADqB,KACP,WADO,IACrB,cADqB,MACP,UADO,GACP,EADO,GACP,M,EAPN,CAAA,EAAZ,YAAY,CAAZ;SAAA,Y","sourcesContent":["import { MessageService } from '@/services/message.service'\nimport { Injectable, RouteGuard } from 'vue-service-app'\nimport { State, Effect } from 'rx-state'\nimport { tap } from 'rxjs/operators'\nimport { LoginApi, LoginAccountInput, LoginPhoneInput } from '@/api/login'\nimport { TokenService } from '@/services/token.service'\n\n@Injectable()\nexport class LoginService implements RouteGuard {\n  name$ = new State<string>('')\n  isBind$ = new State('')\n  loading$ = new State({})\n  constructor(\n    private loginApi: LoginApi,\n    private tokenService: TokenService,\n    private msg: MessageService\n  ) {}\n  @Effect()\n  loginAccount(data: LoginAccountInput) {\n    return this.loginApi.loginAccount(data).pipe(\n      tap(res => {\n        this.tokenService.SET_TOKEN(res.token)\n        localStorage.clear()\n      })\n    )\n  }\n  loginPhone(params: LoginPhoneInput) {\n    return this.loginApi.loginPhone(params).pipe(\n      tap(res => {\n        this.tokenService.SET_TOKEN(res.token)\n        localStorage.clear()\n      })\n    )\n  }\n  logout() {\n    return this.loginApi.logout().pipe(\n      tap(res => {\n        this.msg.success({ content: '注销成功' })\n      })\n    )\n  }\n  getCaptcha(params: any) {\n    return this.loginApi.getCaptcha(params)\n  }\n  checkPhoneIsBind(params: any) {\n    return this.loginApi.checkPhoneIsBind(params)\n  }\n  bindPhoneForAccount(params: any) {\n    return this.loginApi.bindPhoneForAccount(params).pipe(\n      tap(res => {\n        this.tokenService.SET_TOKEN(res.token)\n        localStorage.clear()\n      })\n    )\n  }\n  beforeRouteEnter(to: any) {\n    if (to.meta.query.isBind) {\n      this.isBind$.commit(() => to.meta.query.isBind)\n    }\n  }\n}\n"],"sourceRoot":""}]}