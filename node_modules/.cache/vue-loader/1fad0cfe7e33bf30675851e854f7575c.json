{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/sold/course/info/package/info.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/sold/course/info/package/info.vue","mtime":1596188219757},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { InfoService } from './info.service'\nimport { btnOptions } from './info.config'\nimport moment from 'moment'\nimport SoldCoursePackageUpgrade from '@/views/biz-modals/sold/course/package/upgrade'\nimport SoldCourseFreeze from '@/views/biz-modals/sold/course/freeze'\nimport SoldCourseRefund from '@/views/biz-modals/sold/course/refund'\nimport SoldCourseSurplus from '@/views/biz-modals/sold/course/surplus'\nimport SoldCourseTransfer from '@/views/biz-modals/sold/course/transfer'\nimport SoldCourseValid from '@/views/biz-modals/sold/course/valid'\nimport SoldCoursePackageUpdateExpirationDate from '@/views/biz-modals/sold/course/package/update-expiration-date'\nimport SoldCoursePackageDeduction from '@/views/biz-modals/sold/course/package/deduction'\nimport SoldCoursePackageMembeChange from '@/views/biz-modals/sold/course/package/member-change'\nimport DealGathering from '@/views/biz-modals/sold/deal/gathering'\nimport { PACKAGE_TYPE, IS_LIMIT } from '@/constants/sold/package'\nimport useInternalNoteActions from '@/hooks/shop/sold-internal-note-actions.hook'\nimport contractActions from '@/hooks/contract.hook'\nexport default {\n  name: 'PageShopSoldCoursePackageInfo',\n  bem: {\n    basic: 'page-shop-sold-info'\n  },\n  modals: {\n    SoldCourseFreeze,\n    SoldCourseRefund,\n    SoldCourseSurplus,\n    SoldCourseValid,\n    DealGathering,\n    SoldCoursePackageDeduction,\n    SoldCoursePackageUpdateExpirationDate,\n    SoldCoursePackageMembeChange,\n    SoldCoursePackageUpgrade,\n    SoldCourseTransfer\n  },\n  data() {\n    return {\n      PACKAGE_TYPE,\n      IS_LIMIT\n    }\n  },\n  serviceInject() {\n    return {\n      infoService: InfoService\n    }\n  },\n  hooks() {\n    return {\n      internalNoteActions: useInternalNoteActions(),\n      contractActions: contractActions(this)\n    }\n  },\n  rxState() {\n    return {\n      packageInfo: this.infoService.packageInfo$,\n      authTabs: this.infoService.authTabs$,\n      auth: this.infoService.auth$\n    }\n  },\n  computed: {\n    btnOptions,\n    rangeType() {\n      return this.packageInfo.course_range\n        ? this.packageInfo.course_range.range_type\n        : 1\n    },\n    courseColumns() {\n      const list = [\n        { title: '课程类型', dataIndex: 'course_name', key: 'course_name' },\n        {\n          title: '上课门店',\n          dataIndex: 'support_shop',\n          key: 'support_shop',\n          width: '120px',\n          scopedSlots: { customRender: 'support_shop' }\n        },\n        { title: '节数', dataIndex: 'course_num', key: 'course_num' },\n        { title: '课时费', dataIndex: 'course_price', key: 'course_price' },\n        { title: '小计', dataIndex: 'pay_amount', key: 'pay_amount' }\n      ]\n      if (this.rangeType === 3) {\n        list.splice(3, 1)\n      }\n      if (this.packageInfo.package_type !== PACKAGE_TYPE.ALL_COURSE) {\n        if (this.packageInfo.is_limit === IS_LIMIT.NO_LIMIT) {\n          list.splice(2, 1)\n          list.splice(3, 1)\n        }\n        list.splice(1, 1)\n      }\n      return list\n    },\n    courseTabData() {\n      const data = []\n      const team = this.packageInfo.course_range\n        ? this.packageInfo.course_range.team\n        : {}\n      const personal = this.packageInfo.course_range\n        ? this.packageInfo.course_range.personal\n        : {}\n      let support_shop = ''\n      if (team.support_shop) {\n        support_shop = team.support_shop\n      }\n      if (personal.support_shop) {\n        support_shop = personal.support_shop\n      }\n      data.push({\n        key: 0,\n        support_shop,\n        course_name: team.course_name,\n        course_num: team.course_num,\n        course_price: team.course_price,\n        pay_amount: team.pay_amount\n      })\n      if (personal.course_name) {\n        data.push({\n          key: 1,\n          support_shop,\n          course_name: personal.course_name,\n          course_num: personal.course_num,\n          course_price: personal.course_price,\n          pay_amount: personal.pay_amount\n        })\n      }\n      return data\n    },\n    // 范围内课程团体课\n    innerColumnsTeam() {\n      const list = [\n        {\n          title: '课程名称',\n          dataIndex: 'course_name',\n          key: 'course_name',\n          scopedSlots: { customRender: 'course_name' },\n          width: '120px'\n        },\n        {\n          title: '上课门店',\n          dataIndex: 'support_shop',\n          key: 'support_shop',\n          width: '120px',\n          scopedSlots: { customRender: 'support_shop' }\n        }\n      ]\n      return list\n    },\n    innerDataTeam() {\n      return this.packageInfo.course_range.team.courses\n    },\n    // 范围内课程私教课\n    innerColumnsPersonal() {\n      const list = [\n        {\n          title: '课程名称',\n          dataIndex: 'course_name',\n          key: 'course_name',\n          width: '120px',\n          scopedSlots: { customRender: 'course_name' }\n        },\n        {\n          title: '上课门店',\n          dataIndex: 'support_shop',\n          key: 'support_shop',\n          width: '120px',\n          scopedSlots: { customRender: 'support_shop' }\n        },\n        {\n          title: `${this.$c('coach')}等级`,\n          dataIndex: 'levels',\n          key: 'levels',\n          scopedSlots: { customRender: 'levels' }\n        }\n      ]\n      return list\n    },\n    innerDataPersonal() {\n      const innerData = []\n      for (\n        let i = 0;\n        i < this.packageInfo.course_range.personal.courses.length;\n        i++\n      ) {\n        innerData.push({\n          key: i,\n          support_shop: this.packageInfo.course_range.personal.courses[i]\n            .support_shop,\n          course_name: this.packageInfo.course_range.personal.courses[i]\n            .course_name,\n          levels: this.packageInfo.course_range.personal.courses[i].levels.join(\n            ','\n          )\n        })\n      }\n      return innerData\n    },\n    // 固定课程\n    innerColumnsFix() {\n      const list = [\n        { title: '课程名称', dataIndex: 'course_name', key: 'course_name' },\n        {\n          title: '上课门店',\n          dataIndex: 'support_shop',\n          key: 'support_shop',\n          scopedSlots: { customRender: 'support_shop' }\n        },\n        { title: '节数', dataIndex: 'course_num_init', key: 'course_num_init' },\n        { title: '课时费', dataIndex: 'course_price', key: 'course_price' },\n        { title: '总价', dataIndex: 'course_amount', key: 'course_amount' }\n      ]\n      return list\n    },\n    innerDataFixPersonal() {\n      const innerData = []\n      for (\n        let i = 0;\n        i < this.packageInfo.course_range.personal.courses.length;\n        i++\n      ) {\n        innerData.push({\n          key: i,\n          course_name: this.packageInfo.course_range.personal.courses[i]\n            .course_name,\n          support_shop: this.packageInfo.course_range.personal.courses[i]\n            .support_shop,\n          course_num_init: this.packageInfo.course_range.personal.courses[i]\n            .course_num_init,\n          course_price: this.packageInfo.course_range.personal.courses[i]\n            .course_price,\n          course_amount: this.packageInfo.course_range.personal.courses[i]\n            .course_amount,\n          levels: this.packageInfo.course_range.personal.courses[i].levels.join(\n            ','\n          )\n        })\n      }\n      return this.packageInfo.course_range.personal.courses\n    },\n    innerDataFixTeam() {\n      const innerData = []\n      for (\n        let i = 0;\n        i < this.packageInfo.course_range.team.courses.length;\n        i++\n      ) {\n        innerData.push({\n          key: i,\n          course_name: this.packageInfo.course_range.team.courses[i]\n            .course_name,\n          support_shop: this.packageInfo.course_range.team.courses[i]\n            .support_shop,\n          course_num_init: this.packageInfo.course_range.team.courses[i]\n            .course_num_init,\n          course_price: this.packageInfo.course_range.team.courses[i]\n            .course_price,\n          course_amount: this.packageInfo.course_range.team.courses[i]\n            .course_amount\n        })\n      }\n      return innerData\n    }\n  },\n  methods: {\n    moment,\n    onEditDate() {\n      let id = this.packageInfo.id\n      this.$modalRouter.push({\n        name: 'sold-course-package-update-expiration-date',\n        props: {\n          id\n        },\n        on: {\n          success: () => {\n            // this.successTip()\n          }\n        }\n      })\n    },\n    onMemberChange() {\n      let id = this.packageInfo.id\n      this.$modalRouter.push({\n        name: 'sold-course-package-membe-change',\n        props: {\n          id\n        },\n        on: {\n          success: () => {\n            // this.successTip()\n          }\n        }\n      })\n    },\n    onReduceTimes() {\n      let id = this.packageInfo.id\n      this.$modalRouter.push({\n        name: 'sold-course-package-deduction',\n        props: {\n          id\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n\n    // 修改剩余课时\n    onSurplus() {\n      // 后端返回的时间戳\n      const time = this.packageInfo.effective_state\n        ? `${moment(this.packageInfo.course_buy_time * 1000).format(\n            'YYYY-MM-DD HH:mm'\n          )} 至 ${moment(this.packageInfo.course_end_time * 1000).format(\n            'YYYY-MM-DD HH:mm'\n          )}`\n        : '--'\n      let data = {\n        id: this.infoService.id,\n        courseName: this.packageInfo.course_name,\n        time\n      }\n      this.$modalRouter.push({\n        name: 'sold-course-surplus',\n        props: {\n          courseType: 'coursePackage',\n          courseData: data\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 跳转合同\n    toContract() {\n      let record = this.packageInfo\n      let url = `${window.location.origin}/common/contract-preview?id=${record.order_id}`\n      window.open(url)\n    },\n    onUpgrade() {\n      let id = this.packageInfo.id\n      this.$modalRouter.push({\n        name: 'sold-course-package-upgrade',\n        props: {\n          id\n        },\n        on: {\n          success: res => {\n            if (res.type === 'create') {\n              // 创建订单成功\n              this.$router.reload()\n              this.onClear()\n            } else if (res.type === 'createPay') {\n              // 创建订单成功 并且到支付页面\n              this.$modalRouter.push({\n                name: 'deal-gathering',\n                props: {\n                  order_id: res.orderId,\n                  type: 'package'\n                },\n                on: {\n                  success: () => {\n                    this.$router.reload()\n                    this.onClear()\n                  }\n                }\n              })\n            }\n          }\n        }\n      })\n    },\n    // 冻结\n    onFreeze() {\n      this.$modalRouter.push({\n        name: 'sold-course-freeze',\n        props: {\n          type: 'package',\n          id: this.infoService.id,\n          courseName: this.packageInfo.course_name,\n          courseNum: this.packageInfo.remain_course_num,\n          courseEndTime: moment(this.packageInfo.course_end_time * 1000),\n          time: `${moment(this.packageInfo.course_buy_time * 1000).format(\n            'YYYY-MM-DD HH:mm'\n          )} 至 ${moment(this.packageInfo.course_end_time * 1000).format(\n            'YYYY-MM-DD HH:mm'\n          )}`\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 取消冻结\n    onUnfreeze() {\n      this.$confirm({\n        title: '提示',\n        content: '是否取消冻结？',\n        maskClosable: true,\n        onOk: () => {\n          return this.infoService\n            .unFreeze(this.infoService.id)\n            .toPromise()\n            .then(() => {\n              this.$router.reload()\n            })\n        }\n      })\n    },\n    // 转让\n    onTransfer() {\n      this.$modalRouter.push({\n        name: 'sold-course-transfer',\n        props: {\n          type: 'package',\n          id: this.infoService.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    onValid() {\n      this.$modalRouter.push({\n        name: 'sold-course-valid',\n        props: {\n          info: this.packageInfo\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 退款\n    onRefund() {\n      this.$modalRouter.push({\n        name: 'sold-course-refund',\n        props: {\n          id: this.infoService.id,\n          type: 'package'\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 对内备注\n    onInternalNote() {\n      this.internalNoteActions.onOpenModal({ id: this.infoService.id })\n    },\n    /**\n     * 修改合同备注\n     */\n    onEditContractDescription() {\n      const { order_id, description } = this.packageInfo\n      this.contractActions.editDescription({\n        order_id,\n        description\n      })\n    }\n  }\n}\n",null]}