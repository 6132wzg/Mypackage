{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/components/input-number/input-number.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/components/input-number/input-number.vue","mtime":1600926556046},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { isNumber } from 'lodash-es'\nexport default {\n  name: 'StInputNumber',\n  bem: {\n    input: 'st-input-number'\n  },\n  props: {\n    /**\n     * 定义输出值的类型， text 字符串， number 数字\n     */\n    type: {\n      type: String,\n      default: 'text'\n    },\n    placeholder: {\n      type: String,\n      default() {\n        return ''\n      }\n    },\n    min: {\n      type: Number,\n      default() {\n        return 0\n      }\n    },\n    max: {\n      type: [String, Number],\n      default() {\n        return 999999999999\n      }\n    },\n    value: {\n      type: [String, Number]\n    },\n    disabled: {\n      type: Boolean,\n      default() {\n        return false\n      }\n    },\n    /**\n     * input-number是否允许有小数。允许一位小数\n     */\n    float: {\n      type: [Boolean, Number],\n      default() {\n        return false\n      }\n    },\n    useType: {\n      type: String,\n      default: 'default'\n    }\n  },\n  watch: {\n    value: {\n      deep: true,\n      handler(newVal, oldVal) {\n        this.init(newVal)\n      }\n    }\n  },\n  created() {\n    this.init(this.value)\n  },\n  data() {\n    return {\n      number: ''\n    }\n  },\n  methods: {\n    init(data) {\n      this.number = data\n    },\n    numberBlur(e) {\n      switch (e.target.value) {\n        case null:\n        case undefined:\n        case '':\n        case '.':\n          this.number = ''\n          this.triggerChange()\n          this.$emit(\n            'blur',\n            this.type === 'text' ? `${this.number}` : Number(this.number)\n          )\n          break\n        default:\n          if (!this.float) {\n            this.number = parseInt(+e.target.value, 10)\n            this.number = this.min > this.number ? this.min : this.number\n            this.number = this.max < this.number ? this.max : this.number\n          } else {\n            this.number = parseInt(+e.target.value * 10, 10) / 10\n            this.number = this.min > this.number ? this.min : this.number\n            this.number = this.max < this.number ? this.max : this.number\n          }\n          this.number += ''\n          this.triggerChange()\n          this.$emit(\n            'blur',\n            this.type === 'text' ? `${this.number}` : Number(this.number)\n          )\n      }\n    },\n    numberFocus(e) {\n      this.$emit('focus')\n    },\n    numberChange(e) {\n      // 控制不能输入非数字\n      const PATTERN_NUMBER = /^(\\d+(\\.\\d?)?|\\.\\d?)$/ // 包含小数的数字  匹配 1.1 / 1. / .1 三种形式\n      if (\n        !PATTERN_NUMBER.test(e.target.value) &&\n        e.target.value !== '' &&\n        e.target.value !== '.'\n      ) {\n        console.log('到这里来了', e)\n        return\n      }\n      this.number = `${e.target.value}`\n      this.triggerChange()\n    },\n    triggerChange() {\n      this.$emit(\n        'change',\n        this.type === 'text' ? `${this.number}` : Number(this.number)\n      )\n      this.$emit(\n        'input',\n        this.type === 'text' ? `${this.number}` : Number(this.number)\n      )\n    }\n  }\n}\n",{"version":3,"sources":["input-number.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqfile":"input-number.vue","sourceRoot":"src/views/components/input-number","sourcesContent":["<template>\n  <a-input\n    :placeholder=\"placeholder\"\n    type=\"text\"\n    :value=\"number\"\n    @change=\"numberChange\"\n    @blur=\"numberBlur\"\n    @focus=\"numberFocus\"\n    :disabled=\"disabled\"\n    maxlength=\"12\"\n    :class=\"'st-input-number__' + useType\"\n  >\n    <template slot=\"addonBefore\">\n      <slot name=\"addonBefore\"></slot>\n    </template>\n    <template slot=\"addonAfter\">\n      <slot name=\"addonAfter\"></slot>\n    </template>\n  </a-input>\n</template>\n<script>\nimport { isNumber } from 'lodash-es'\nexport default {\n  name: 'StInputNumber',\n  bem: {\n    input: 'st-input-number'\n  },\n  props: {\n    /**\n     * 定义输出值的类型， text 字符串， number 数字\n     */\n    type: {\n      type: String,\n      default: 'text'\n    },\n    placeholder: {\n      type: String,\n      default() {\n        return ''\n      }\n    },\n    min: {\n      type: Number,\n      default() {\n        return 0\n      }\n    },\n    max: {\n      type: [String, Number],\n      default() {\n        return 999999999999\n      }\n    },\n    value: {\n      type: [String, Number]\n    },\n    disabled: {\n      type: Boolean,\n      default() {\n        return false\n      }\n    },\n    /**\n     * input-number是否允许有小数。允许一位小数\n     */\n    float: {\n      type: [Boolean, Number],\n      default() {\n        return false\n      }\n    },\n    useType: {\n      type: String,\n      default: 'default'\n    }\n  },\n  watch: {\n    value: {\n      deep: true,\n      handler(newVal, oldVal) {\n        this.init(newVal)\n      }\n    }\n  },\n  created() {\n    this.init(this.value)\n  },\n  data() {\n    return {\n      number: ''\n    }\n  },\n  methods: {\n    init(data) {\n      this.number = data\n    },\n    numberBlur(e) {\n      switch (e.target.value) {\n        case null:\n        case undefined:\n        case '':\n        case '.':\n          this.number = ''\n          this.triggerChange()\n          this.$emit(\n            'blur',\n            this.type === 'text' ? `${this.number}` : Number(this.number)\n          )\n          break\n        default:\n          if (!this.float) {\n            this.number = parseInt(+e.target.value, 10)\n            this.number = this.min > this.number ? this.min : this.number\n            this.number = this.max < this.number ? this.max : this.number\n          } else {\n            this.number = parseInt(+e.target.value * 10, 10) / 10\n            this.number = this.min > this.number ? this.min : this.number\n            this.number = this.max < this.number ? this.max : this.number\n          }\n          this.number += ''\n          this.triggerChange()\n          this.$emit(\n            'blur',\n            this.type === 'text' ? `${this.number}` : Number(this.number)\n          )\n      }\n    },\n    numberFocus(e) {\n      this.$emit('focus')\n    },\n    numberChange(e) {\n      // 控制不能输入非数字\n      const PATTERN_NUMBER = /^(\\d+(\\.\\d?)?|\\.\\d?)$/ // 包含小数的数字  匹配 1.1 / 1. / .1 三种形式\n      if (\n        !PATTERN_NUMBER.test(e.target.value) &&\n        e.target.value !== '' &&\n        e.target.value !== '.'\n      ) {\n        console.log('到这里来了', e)\n        return\n      }\n      this.number = `${e.target.value}`\n      this.triggerChange()\n    },\n    triggerChange() {\n      this.$emit(\n        'change',\n        this.type === 'text' ? `${this.number}` : Number(this.number)\n      )\n      this.$emit(\n        'input',\n        this.type === 'text' ? `${this.number}` : Number(this.number)\n      )\n    }\n  }\n}\n</script>\n"]}]}