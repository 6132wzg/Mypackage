{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/sold/card/list/member.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/sold/card/list/member.vue","mtime":1597895242241},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport { cloneDeep, filter } from 'lodash-es'\nimport { MemberService } from './member.service'\nimport tableMixin from '@/mixins/table.mixin'\nimport { columns, totalColumns } from './member.config'\nimport StTotal from '@/views/biz-components/st/total/total.vue'\nimport SoldCardArea from '@/views/biz-modals/sold/card/area'\nimport SoldCardBatchArea from '@/views/biz-modals/sold/card/batch-area'\nimport SoldCardBatchEnterTime from '@/views/biz-modals/sold/card/batch-enter-time'\nimport SoldCardFreeze from '@/views/biz-modals/sold/card/freeze'\nimport SoldCardGiving from '@/views/biz-modals/sold/card/giving'\nimport SoldCardRefund from '@/views/biz-modals/sold/card/refund'\nimport SoldCardSetTime from '@/views/biz-modals/sold/card/set-time'\nimport SoldCardTransfer from '@/views/biz-modals/sold/card/transfer'\nimport SoldCardExtendDay from '@/views/biz-modals/sold/card/extend-day'\nimport SoldCardReactive from '@/views/biz-modals/sold/card/reactive'\nimport SoldCardMemberReactive from '@/views/biz-modals/sold/card/member/reactive'\nimport useCardActions from '@/hooks/card-actions.hook'\nimport CommonTaskSuccessTip from '@/views/biz-modals/common/task/success-tip'\nimport useInternalNoteActions from '@/hooks/shop/sold-internal-note-actions.hook'\nimport soldMemberCardActions from '@/hooks/sold/member-card-actions.hook'\nexport default {\n  name: 'PageShopSoldCardMemberList',\n  mixins: [tableMixin],\n  bem: {\n    basic: 'page-shop-sold'\n  },\n  components: {\n    StTotal\n  },\n  modals: {\n    SoldCardArea,\n    SoldCardFreeze,\n    SoldCardGiving,\n    SoldCardRefund,\n    SoldCardSetTime,\n    SoldCardTransfer,\n    CommonTaskSuccessTip,\n    SoldCardBatchArea,\n    SoldCardBatchEnterTime,\n    SoldCardExtendDay,\n    SoldCardMemberReactive,\n    SoldCardReactive\n  },\n  serviceInject() {\n    return {\n      memberService: MemberService\n    }\n  },\n  rxState() {\n    return {\n      loading: this.memberService.loading$,\n      list: this.memberService.list$,\n      page: this.memberService.page$,\n      cardTypes: this.memberService.cardTypes$,\n      cardStatus: this.memberService.cardStatus$,\n      isOpens: this.memberService.isOpens$,\n      total: this.memberService.total$,\n      auth: this.memberService.auth$\n    }\n  },\n  beforeCreate() {\n    this.cardActions.$on('refresh', val => {\n      this.$router.reload()\n    })\n  },\n  hooks() {\n    return {\n      cardActions: useCardActions(),\n      internalNoteActions: useInternalNoteActions(),\n      soldMemberCardActions: soldMemberCardActions(this)\n    }\n  },\n  computed: {\n    conditions() {\n      let conditions = {\n        ...this.$searchQuery,\n        is_valid: this.$searchQuery.card_status\n      }\n      return conditions\n    },\n    columns,\n    totalColumns,\n    // 列表选择的卡是否一致\n    isUnifyCard() {\n      return (\n        this.selectedRows.length > 0 &&\n        this.selectedRows.every(\n          o => o.card_type === this.selectedRows[0].card_type\n        )\n      )\n    }\n  },\n  data() {\n    return {\n      action: {\n        /**\n         * 赠送额度\n         */\n        giving: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n        /**\n         * 变更入场vip区域\n         */\n        area: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n        /**\n         * 变更入场vip区域\n         */\n        endTime: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n        /**\n         * 延长卡有效期\n         */\n        extendDay: {\n          isAvaliable: false,\n          isShowTip: false\n        },\n        /**\n         * 重新激活\n         */\n        reactive: {\n          isAvaliable: false,\n          isShowTip: false\n        }\n      },\n      // 结束时间面板是否显示\n      endOpen: false,\n      selectedRowKeys: [],\n      selectedRows: [],\n      // diffSelectedRows: [],\n      date: []\n    }\n  },\n  mounted() {\n    this.setSearchData()\n  },\n  watch: {\n    query(newVal) {\n      this.setSearchData()\n    }\n  },\n  methods: {\n    disabledSelect(record) {\n      return false\n    },\n    // 查询\n    onSearchNative() {\n      this.$searchQuery.start_time = this.date[0]\n        ? `${this.date[0].format('YYYY-MM-DD')} 00:00:00`\n        : ''\n      this.$searchQuery.end_time = this.date[1]\n        ? `${this.date[1].format('YYYY-MM-DD')} 23:59:59`\n        : ''\n      this.onSearch()\n    },\n    onSearchResetNative() {\n      this.date = [null, null]\n      this.onSearchReset()\n    },\n    // 设置searchData\n    setSearchData() {\n      const start = this.$searchQuery.start_time\n        ? cloneDeep(moment(this.$searchQuery.start_time))\n        : null\n      const end = this.$searchQuery.end_time\n        ? cloneDeep(moment(this.$searchQuery.end_time))\n        : null\n      this.date = [start, end]\n    },\n    // moment\n    moment,\n    // 列表选择\n    onSelectChange(selectedRowKeys, selectedRows) {\n      this.checkSelectedRows(selectedRows, 'card_type', 'giving', () => {\n        let isAvaliable\n        const firstItem = selectedRows[0]\n        const diffSelectedRows = selectedRows.filter(\n          item => item.card_type !== firstItem.card_type\n        )\n        return (\n          !selectedRows.filter(item => !item.is_open).length &&\n          !diffSelectedRows.length\n        )\n      })\n      this.checkSelectedRows(selectedRows, 'is_open', 'area', () => {\n        return !selectedRows.filter(item => !item.is_open).length\n      })\n      this.checkSelectedRows(selectedRows, 'is_open', 'endTime', () => {\n        return !selectedRows.filter(item => !item.is_open).length\n      })\n      this.checkSelectedRows(selectedRows, 'is_open', 'extendDay', () => {\n        return !selectedRows.filter(item => !item.is_open).length\n      })\n      this.checkSelectedRows(selectedRows, 'is_open', 'reactive', () => {\n        return (\n          selectedRows.filter(\n            item => item.card_status === 2 && item.is_refund.id === 0\n          ).length === selectedRows.length\n        )\n      })\n      this.selectedRowKeys = selectedRowKeys\n      this.selectedRows = selectedRows\n    },\n    checkSelectedRows(selectedRows, key, targetDataKey, checkFn) {\n      this.action[targetDataKey].isShowTip = false\n      const isAvaliable = checkFn()\n      this.action[targetDataKey].isAvaliable =\n        selectedRows.length && isAvaliable\n      if (!isAvaliable) {\n        this.action[targetDataKey].isShowTip = true\n        const timerKey = `timer_${targetDataKey}`\n        clearTimeout(this[timerKey])\n        this[timerKey] = setTimeout(() => {\n          this.action[targetDataKey].isShowTip = false\n        }, 2000)\n      }\n    },\n    // 详情\n    onDetail(record) {\n      this.$router.push({\n        path: `/shop/sold/card/info/member/info/operation-record`,\n        query: { id: record.id, card_type: record.card_type }\n      })\n    },\n    // 冻结\n    onFreeze(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-freeze',\n        props: {\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 取消冻结\n    onUnfreeze(record) {\n      this.$confirm({\n        title: '提示',\n        content: '是否取消冻结？',\n        maskClosable: true,\n        onOk: () => {\n          return this.memberService\n            .unFreeze(record.id)\n            .toPromise()\n            .then(() => {\n              this.$router.reload()\n            })\n        }\n      })\n    },\n    // 退款\n    onRefund(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-refund',\n        props: {\n          type: 'member',\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 重新激活\n    onReactive(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-member-reactive',\n        props: {\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 跳转合同\n    toContract(record) {\n      let url = `${window.location.origin}/common/contract-preview?id=${record.order_id}`\n      window.open(url)\n    },\n    // 转让\n    onTransfer(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-transfer',\n        props: {\n          id: record.id,\n          type: 'member'\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 修改有效时间\n    onSetTime(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-set-time',\n        props: {\n          id: record.id\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 变更vip入场区域\n    onArea(record) {\n      this.$modalRouter.push({\n        name: 'sold-card-area',\n        props: {\n          id: [record.id]\n        },\n        on: {\n          success: () => {\n            this.$router.reload()\n          }\n        }\n      })\n    },\n    // 批量变更vip入场区域\n    onAreas() {\n      this.$modalRouter.push({\n        name: 'sold-card-batch-area',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: cloneDeep(this.$searchQuery)\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    // 批量变更入场时间段\n    onEnterTime() {\n      this.$modalRouter.push({\n        name: 'sold-card-batch-enter-time',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: cloneDeep(this.$searchQuery)\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    // 额度赠送\n    onGiving() {\n      this.$modalRouter.push({\n        name: 'sold-card-giving',\n        props: {\n          ids: this.selectedRowKeys,\n          type: this.selectedRows[0].card_type,\n          unit: this.selectedRows[0].unit,\n          searchQuery: cloneDeep(this.$searchQuery)\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    successTip() {\n      this.$modalRouter.push({\n        name: 'common-task-success-tip',\n        on: {\n          success: () => {\n            this.$router.reload()\n            this.onClear()\n          }\n        }\n      })\n    },\n    onClear() {\n      this.selectedRowKeys = []\n      this.selectedRows = []\n    },\n    onExtendDays() {\n      this.$modalRouter.push({\n        name: 'sold-card-extend-day',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: this.$searchQuery\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    },\n    onReactiveBatch() {\n      this.$modalRouter.push({\n        name: 'sold-card-reactive',\n        props: {\n          ids: this.selectedRowKeys,\n          searchQuery: this.$searchQuery\n        },\n        on: {\n          success: () => {\n            this.successTip()\n          }\n        }\n      })\n    }\n  }\n}\n",null]}