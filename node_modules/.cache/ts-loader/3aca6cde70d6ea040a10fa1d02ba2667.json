{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js??ref--13-2!/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/marketing/plugin/crowd/index.service.ts","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/marketing/plugin/crowd/index.service.ts","mtime":1600926556131},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js","mtime":1591062571609}],"contextDependencies":[],"result":["import _classCallCheck from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar _a, _b;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from 'vue-service-app';\nimport { State, Effect } from 'rx-state';\nimport { tap } from 'rxjs/operators';\nimport { CrowdAPI } from '@/api/v1/crowd';\nimport { forkJoin } from 'rxjs';\nimport { AuthService } from '@/services/auth.service';\n\nvar IndexService = /*#__PURE__*/function () {\n  function IndexService(crowdAPI, authService) {\n    _classCallCheck(this, IndexService);\n\n    this.crowdAPI = crowdAPI;\n    this.authService = authService;\n    this.crowdIndexInfo$ = new State({});\n    this.crowdIndexList$ = new State([]);\n    this.loading$ = new State({});\n    this.auth$ = this.authService.authMap$({\n      add: 'brand:member:crowd|add',\n      sendCoupon: 'brand:directional_issuance:options|issuing_coupons'\n    });\n  } // 获取列表\n\n\n  _createClass(IndexService, [{\n    key: \"getListInfo\",\n    value: function getListInfo() {\n      var _this = this;\n\n      return this.crowdAPI.getCrowdIndex().pipe(tap(function (res) {\n        _this.crowdIndexInfo$.commit(function () {\n          return res.info;\n        });\n\n        _this.crowdIndexList$.commit(function () {\n          return res.info.list;\n        });\n      }));\n    }\n  }, {\n    key: \"delCrowdBrandCrowd\",\n    value: function delCrowdBrandCrowd(id) {\n      return this.crowdAPI.delCrowdBrandCrowd(id).pipe(tap());\n    }\n  }, {\n    key: \"crowdBrandRefresh\",\n    value: function crowdBrandRefresh(id) {\n      return this.crowdAPI.crowdBrandRefresh(id).pipe(tap());\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      return forkJoin(this.getListInfo());\n    }\n  }, {\n    key: \"beforeEach\",\n    value: function beforeEach(to, from) {\n      return this.init();\n    }\n  }]);\n\n  return IndexService;\n}();\n\n__decorate([Effect(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], IndexService.prototype, \"getListInfo\", null);\n\nIndexService = __decorate([Injectable(), __metadata(\"design:paramtypes\", [typeof (_a = typeof CrowdAPI !== \"undefined\" && CrowdAPI) === \"function\" ? _a : Object, typeof (_b = typeof AuthService !== \"undefined\" && AuthService) === \"function\" ? _b : Object])], IndexService);\nexport { IndexService };",{"version":3,"sources":["/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/marketing/plugin/crowd/index.service.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,UAAT,QAAqD,iBAArD;AACA,SAAS,KAAT,EAAgB,MAAhB,QAA8B,UAA9B;AACA,SAAS,GAAT,QAAoB,gBAApB;AACA,SAAS,QAAT,QAAyB,gBAAzB;AACA,SAAS,QAAT,QAAyB,MAAzB;AACA,SAAS,WAAT,QAA4B,yBAA5B;;AAGA,IAAa,YAAb;AAQE,wBAAoB,QAApB,EAAgD,WAAhD,EAAwE;AAAA;;AAApD,SAAA,QAAA,GAAA,QAAA;AAA4B,SAAA,WAAA,GAAA,WAAA;AAPhD,SAAA,eAAA,GAAkB,IAAI,KAAJ,CAAU,EAAV,CAAlB;AACA,SAAA,eAAA,GAAkB,IAAI,KAAJ,CAAU,EAAV,CAAlB;AACA,SAAA,QAAA,GAAW,IAAI,KAAJ,CAAU,EAAV,CAAX;AACA,SAAA,KAAA,GAAQ,KAAK,WAAL,CAAiB,QAAjB,CAA0B;AAChC,MAAA,GAAG,EAAE,wBAD2B;AAEhC,MAAA,UAAU,EAAE;AAFoB,KAA1B,CAAR;AAI4E,GAR9E,CASE;;;AATF;AAAA;AAAA,kCAWa;AAAA;;AACT,aAAO,KAAK,QAAL,CAAc,aAAd,GAA8B,IAA9B,CACL,GAAG,CAAC,UAAA,GAAG,EAAG;AACR,QAAA,KAAI,CAAC,eAAL,CAAqB,MAArB,CAA4B;AAAA,iBAAM,GAAG,CAAC,IAAV;AAAA,SAA5B;;AACA,QAAA,KAAI,CAAC,eAAL,CAAqB,MAArB,CAA4B;AAAA,iBAAM,GAAG,CAAC,IAAJ,CAAS,IAAf;AAAA,SAA5B;AACD,OAHE,CADE,CAAP;AAMD;AAlBH;AAAA;AAAA,uCAmBqB,EAnBrB,EAmB+B;AAC3B,aAAO,KAAK,QAAL,CAAc,kBAAd,CAAiC,EAAjC,EAAqC,IAArC,CAA0C,GAAG,EAA7C,CAAP;AACD;AArBH;AAAA;AAAA,sCAsBoB,EAtBpB,EAsB8B;AAC1B,aAAO,KAAK,QAAL,CAAc,iBAAd,CAAgC,EAAhC,EAAoC,IAApC,CAAyC,GAAG,EAA5C,CAAP;AACD;AAxBH;AAAA;AAAA,2BAyBM;AACF,aAAO,QAAQ,CAAC,KAAK,WAAL,EAAD,CAAf;AACD;AA3BH;AAAA;AAAA,+BA4Ba,EA5Bb,EA4B+B,IA5B/B,EA4BiD;AAC7C,aAAO,KAAK,IAAL,EAAP;AACD;AA9BH;;AAAA;AAAA,GAAA;;AAWE,UAAA,CAAA,CADC,MAAM,EACP,E,mCAAA,E,mCAAA,E,uCAAA,CAAA,E,sBAAA,E,aAAA,EAOC,IAPD,CAAA;;AAXW,YAAY,GAAA,UAAA,CAAA,CADxB,UAAU,EACc,E,qDAQO,Q,KAAQ,W,IAAR,Q,MAAQ,U,GAAA,E,GAAA,M,EAAA,QAAA,EAAA,GAAA,OAAuB,WAAvB,KAAkC,WAAlC,IAAuB,WAAvB,MAAkC,UAAlC,GAAkC,EAAlC,GAAkC,M,EARjD,CAAA,EAAZ,YAAY,CAAZ;SAAA,Y","sourcesContent":["import { Injectable, ServiceRoute, Controller } from 'vue-service-app'\nimport { State, Effect } from 'rx-state'\nimport { tap } from 'rxjs/operators'\nimport { CrowdAPI } from '@/api/v1/crowd'\nimport { forkJoin } from 'rxjs'\nimport { AuthService } from '@/services/auth.service'\n\n@Injectable()\nexport class IndexService implements Controller {\n  crowdIndexInfo$ = new State({})\n  crowdIndexList$ = new State([])\n  loading$ = new State({})\n  auth$ = this.authService.authMap$({\n    add: 'brand:member:crowd|add',\n    sendCoupon: 'brand:directional_issuance:options|issuing_coupons'\n  })\n  constructor(private crowdAPI: CrowdAPI, private authService: AuthService) {}\n  // 获取列表\n  @Effect()\n  getListInfo() {\n    return this.crowdAPI.getCrowdIndex().pipe(\n      tap(res => {\n        this.crowdIndexInfo$.commit(() => res.info)\n        this.crowdIndexList$.commit(() => res.info.list)\n      })\n    )\n  }\n  delCrowdBrandCrowd(id: string) {\n    return this.crowdAPI.delCrowdBrandCrowd(id).pipe(tap())\n  }\n  crowdBrandRefresh(id: string) {\n    return this.crowdAPI.crowdBrandRefresh(id).pipe(tap())\n  }\n  init() {\n    return forkJoin(this.getListInfo())\n  }\n  beforeEach(to: ServiceRoute, from: ServiceRoute) {\n    return this.init()\n  }\n}\n"],"sourceRoot":""}]}