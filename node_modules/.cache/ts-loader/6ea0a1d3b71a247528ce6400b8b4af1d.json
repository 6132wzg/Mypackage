{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js??ref--13-2!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/card/brand-member/shelf.service.ts","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/card/brand-member/shelf.service.ts","mtime":1600926555837},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/ts-loader/index.js","mtime":1591062571609}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport _classCallCheck from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar _a, _b, _c, _d;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { UserService } from '@/services/user.service';\nimport { Injectable } from 'vue-service-app';\nimport { State, Effect, Action } from 'rx-state';\nimport { CardsApi, CourseTeamShelfListInput, UpdateCardShelfInput } from '@/api/v1/cards';\nimport { tap, debounceTime, switchMap, catchError } from 'rxjs/operators';\nimport { EMPTY } from 'rxjs';\n\nvar ShelfService = /*#__PURE__*/function () {\n  function ShelfService(cardApi, userService) {\n    var _this = this;\n\n    _classCallCheck(this, ShelfService);\n\n    this.cardApi = cardApi;\n    this.userService = userService;\n    this.info$ = new State({});\n    /**\n     * 变更上架回显\n     */\n\n    this.shelfCardDetail$ = new State({});\n    this.loading$ = new State({});\n    this.courseList$ = new State([]);\n    this.course_interests$ = this.userService.getOptions$('member_card.course_interests');\n    this.activateTypes$ = this.userService.getOptions$('member_card.activate_type');\n    this.courseListAction$ = new Action(function (data$) {\n      return data$.pipe(debounceTime(200), switchMap(function (query) {\n        return _this.getCourseList(query).pipe(catchError(function () {\n          return EMPTY;\n        }));\n      }), tap(function (res) {\n        _this.courseList$.commit(function () {\n          return res.list;\n        });\n      }));\n    });\n  }\n\n  _createClass(ShelfService, [{\n    key: \"getInfo\",\n    value: function getInfo(id, query) {\n      var _this2 = this;\n\n      return this.cardApi.getCardShelfInfo(id, 'brand', 'member', query).pipe(tap(function (res) {\n        _this2.info$.commit(function () {\n          return res.info;\n        });\n\n        _this2.shelfCardDetail$.commit(function () {\n          return res.shelf_card_detail;\n        });\n      }));\n    }\n  }, {\n    key: \"getCourseList\",\n    value: function getCourseList(query) {\n      return this.cardApi.getCourseTeamShelfList(query, 'brand');\n    }\n  }, {\n    key: \"resetCourseList\",\n    value: function resetCourseList() {\n      this.courseList$.commit(function () {\n        return [];\n      });\n    }\n  }, {\n    key: \"shelfCard\",\n    value: function shelfCard(params, id) {\n      return this.cardApi.setCardShelf(params, id, 'brand', 'member');\n    }\n  }, {\n    key: \"updateShelf\",\n    value: function updateShelf(id, params) {\n      return this.cardApi.updateCardShelf(id, params, 'brand');\n    }\n  }]);\n\n  return ShelfService;\n}();\n\n__decorate([Effect(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [typeof (_a = typeof CourseTeamShelfListInput !== \"undefined\" && CourseTeamShelfListInput) === \"function\" ? _a : Object]), __metadata(\"design:returntype\", void 0)], ShelfService.prototype, \"getCourseList\", null);\n\n__decorate([Effect(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, String]), __metadata(\"design:returntype\", void 0)], ShelfService.prototype, \"shelfCard\", null);\n\n__decorate([Effect(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, typeof (_b = typeof UpdateCardShelfInput !== \"undefined\" && UpdateCardShelfInput) === \"function\" ? _b : Object]), __metadata(\"design:returntype\", void 0)], ShelfService.prototype, \"updateShelf\", null);\n\nShelfService = __decorate([Injectable(), __metadata(\"design:paramtypes\", [typeof (_c = typeof CardsApi !== \"undefined\" && CardsApi) === \"function\" ? _c : Object, typeof (_d = typeof UserService !== \"undefined\" && UserService) === \"function\" ? _d : Object])], ShelfService);\nexport { ShelfService };",{"version":3,"sources":["/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/card/brand-member/shelf.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { UserService } from '@/services/user.service'\nimport { Injectable } from 'vue-service-app'\nimport { State, Effect, Action } from 'rx-state'\nimport {\n  CardsApi,\n  CourseTeamShelfListInput,\n  GetCardShelfInfoInput,\n  UpdateCardShelfInput\n} from '@/api/v1/cards'\nimport { tap, debounceTime, switchMap, catchError } from 'rxjs/operators'\nimport { EMPTY } from 'rxjs'\n\n@Injectable()\nexport class ShelfService {\n  info$ = new State({})\n  /**\n   * 变更上架回显\n   */\n  shelfCardDetail$ = new State({})\n  loading$ = new State({})\n  courseListAction$: Action<any>\n  courseList$ = new State([])\n  course_interests$ = this.userService.getOptions$(\n    'member_card.course_interests'\n  )\n  activateTypes$ = this.userService.getOptions$('member_card.activate_type')\n  constructor(private cardApi: CardsApi, private userService: UserService) {\n    this.courseListAction$ = new Action(data$ => {\n      return data$.pipe(\n        debounceTime(200),\n        switchMap((query: CourseTeamShelfListInput) =>\n          this.getCourseList(query).pipe(catchError(() => EMPTY))\n        ),\n        tap(res => {\n          this.courseList$.commit(() => res.list)\n        })\n      )\n    })\n  }\n  getInfo(id: string, query: GetCardShelfInfoInput) {\n    return this.cardApi.getCardShelfInfo(id, 'brand', 'member', query).pipe(\n      tap((res: any) => {\n        this.info$.commit(() => res.info)\n        this.shelfCardDetail$.commit(() => res.shelf_card_detail)\n      })\n    )\n  }\n  @Effect()\n  getCourseList(query: CourseTeamShelfListInput) {\n    return this.cardApi.getCourseTeamShelfList(query, 'brand')\n  }\n  resetCourseList() {\n    this.courseList$.commit(() => [])\n  }\n  @Effect()\n  shelfCard(params: any, id: string) {\n    return this.cardApi.setCardShelf(params, id, 'brand', 'member')\n  }\n  @Effect()\n  updateShelf(id: number, params: UpdateCardShelfInput) {\n    return this.cardApi.updateCardShelf(id, params, 'brand')\n  }\n}\n"],"sourceRoot":""}]}