{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/sold/card/member/update-rights.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/sold/card/member/update-rights.vue","mtime":1597895241998},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { UpdateRightsService } from './update-rights.service.ts'\nimport { ruleOptions } from './update-rights.config'\nimport { MessageService } from '@/services/message.service'\nimport AssignShop from '@/views/biz-components/shop/assign-shop/assign-shop'\nimport MemberCardCourseInterests from '@/views/biz-components/card/member-card-course-interests/member-card-course-interests'\nimport { CARD_TYPE } from '@/constants/card/member'\n// import ShopHourPicker from '@/views/biz-components/shop-hour-picker/shop-hour-picker'\n// import SelectArea from '@/views/biz-components/area/select-area/select-area'\nexport default {\n  components: {\n    AssignShop,\n    MemberCardCourseInterests\n    // ,\n    // ShopHourPicker,\n    // SelectArea\n  },\n  serviceInject() {\n    return {\n      messageService: MessageService,\n      updateRightsService: UpdateRightsService\n    }\n  },\n  rxState() {\n    const {\n      info$,\n      loading$,\n      transferUnitOptions$,\n      inoutTypeOptions$,\n      supportMemberNumOptions$\n    } = this.updateRightsService\n    return {\n      info: info$,\n      loading: loading$,\n      transferUnitOptions: transferUnitOptions$,\n      inoutTypeOptions: inoutTypeOptions$,\n      supportMemberNumOptions: supportMemberNumOptions$\n    }\n  },\n  props: {\n    id: {\n      type: Number,\n      default: 0\n    }\n  },\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      form,\n      decorators,\n      show: false,\n      timeList: [],\n      INOUT_TYPE_CUSTOM: 2,\n      CARD_TYPE,\n      TYPE_MULII_CARD: 2,\n      switches: {\n        entranceNum: 0,\n        givingTime: 0,\n        frozenTime: 0,\n        transferSetting: 0,\n        courseInterests: 0,\n        entranceShop: 0\n        // ,\n        // area: 0,\n        // entranceTime: 0\n      }\n    }\n  },\n  computed: {\n    givingUnit() {\n      return this.info.card_type === CARD_TYPE.NUMBER ? '次' : '天'\n    }\n  },\n  created() {\n    this.updateRightsService.getInfo(this.id).subscribe(res => {\n      this.$nextTick(() => {\n        this.setFieldsValue(res.info)\n      })\n    })\n  },\n  methods: {\n    onShopChange(type, shopIds) {\n      this.info.admission_range.admission_range_type = type\n      this.info.admission_range.select_shops = shopIds\n    },\n    onCourseInterestsChange(type, courseIds) {\n      this.info.course_interests.course_interests_type = type\n      this.info.course_interests.select_courses = courseIds\n    },\n    setFieldsValue(info) {\n      const { gift_maximum, frozen_time_init } = info\n      const { transfer_num, transfer_unit } = info.transfer\n      this.form.setFieldsValue({\n        gift_maximum,\n        frozen_time_init,\n        transfer_num,\n        transfer_unit: transfer_unit || 1\n      })\n    },\n    onSwitchChange() {\n      this.form.validateFields(\n        ['gift_maximum', 'frozen_time_init', 'transfer_num', 'transfer_unit'],\n        { force: true }\n      )\n    },\n    checkIsChanged() {\n      let isChanged = false\n      const { switches } = this\n      for (let i in switches) {\n        if (switches[i]) {\n          isChanged = true\n          return true\n        }\n      }\n      return isChanged\n    },\n    onSubmit() {\n      if (!this.checkIsChanged()) {\n        return this.messageService.error({\n          content: '未进行任何修改，无法确认'\n        })\n      }\n      this.form.validate().then(values => {\n        const {\n          transfer,\n          admission_range,\n          support_member_num,\n          course_interests,\n          description\n        } = this.info\n        const { gift_maximum, frozen_time_init } = values\n        const { switches } = this\n        const params = {\n          is_change_support_member_num: switches.entranceNum,\n          support_member_num,\n          is_change_gift_maximum: switches.givingTime,\n          gift_maximum,\n          is_change_frozen_time_init: switches.frozenTime,\n          frozen_time_init,\n          is_change_transferable: switches.transferSetting,\n          is_transferable: transfer.is_transferable,\n          transfer_num: values.transfer_num,\n          transfer_unit: values.transfer_unit,\n          is_change_course_interests: switches.courseInterests,\n          course_interests: course_interests.course_interests_type,\n          select_courses: course_interests.select_courses,\n          is_change_admission_range: switches.entranceShop,\n          admission_range: admission_range.admission_range_type,\n          select_shops: admission_range.select_shops,\n          description\n        }\n        this.updateRightsService\n          .updateRights(this.id, params)\n          .subscribe(this.onSubmitSuccess)\n      })\n    },\n    onSubmitSuccess() {\n      this.messageService.success({\n        content: '提交成功'\n      })\n      this.show = false\n      this.$emit('success')\n    }\n  }\n}\n",null]}