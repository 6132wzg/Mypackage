{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/staff/department#/tree/tree-item.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/staff/department#/tree/tree-item.vue","mtime":1591147717364},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { DepartmentService } from '@/views/pages/brand/staff/department.service'\n\nexport default {\n  serviceInject() {\n    return {\n      departmentService: DepartmentService\n    }\n  },\n  rxState() {\n    return {\n      auth: this.departmentService.auth$\n    }\n  },\n  name: 'TreeItem',\n  props: {\n    item: Object,\n    level: {\n      type: Number,\n      default: () => 0\n    }\n  },\n  data: function() {\n    return {\n      editValue: '',\n      addValue: '',\n      isActive: false,\n      opreations: [\n        { clickName: this.addTreeNade, name: '新增' },\n        { clickName: this.editTreeNade, name: '编辑' },\n        { clickName: this.deleteTreeNade, name: '删除' }\n      ],\n      placements: ['bottomLeft'],\n      visible: false,\n      isOpen: false\n    }\n  },\n  computed: {\n    isFolder: function() {\n      return this.item.children && this.item.children.length\n    },\n    paddingLeft() {\n      if (!this.level) return 20 + 'px'\n      return (this.level - 1) * 16 + 20 + 'px'\n    }\n  },\n  methods: {\n    cancelAdd() {\n      this.item.isAdd = false\n    },\n    cancelEdit() {\n      this.item.isEdit = false\n    },\n    editTreeNode() {\n      console.log('editTreeNode', this.$refs.treeNode)\n      this.editValue = this.item.name\n      this.$emit('edit-item', this.item)\n      this.$nextTick().then(() => {\n        const doms = document.querySelectorAll('.tree-node__content')\n        doms.forEach(dom => {\n          dom.setAttribute('class', 'tree-node__content')\n        })\n        this.$refs.treeNode.setAttribute('class', 'tree-node__content active')\n      })\n    },\n    addTreeNode() {\n      console.log('addTreeNode', this.$refs.treeNode)\n      this.$emit('add-item', this.item)\n      this.$nextTick().then(() => {\n        const doms = document.querySelectorAll('.tree-node__content')\n        doms.forEach(dom => {\n          dom.setAttribute('class', 'tree-node__content')\n        })\n        this.$refs.treeNode.setAttribute('class', 'tree-node__content active')\n      })\n    },\n    toggle(e) {\n      if (this.isFolder) {\n        this.isOpen = !this.isOpen\n      }\n    },\n    addDepartment(item) {\n      console.log('addDepartment', this.$refs.treeNode, item)\n      this.cancelAdd()\n      this.departmentService\n        .addDepartment({\n          parent_id: this.item.id,\n          department_name: this.addValue\n        })\n        .subscribe(() => {\n          this.$emit('update-data')\n        })\n    },\n    editDepartment(item) {\n      console.log('editDepartment', this.$refs.treeNode, item)\n      this.cancelEdit()\n      this.departmentService\n        .updateDepartment({ id: this.item.id, department_name: this.editValue })\n        .subscribe(() => {\n          this.$emit('update-data')\n        })\n    },\n    deleteDepartment(item) {\n      console.log('deleteDepartment', this.$refs.treeNode, item)\n      if (item.count > 0) {\n        this.$error({\n          title: '',\n          content: '当前部门下有员工，无法删除'\n        })\n      } else {\n        this.$confirm({\n          title: '确认要删除',\n          content: '删除部门后,部门无法恢复，确认删除？',\n          onOk: () => {\n            return new Promise((resolve, reject) => {\n              return this.departmentService\n                .delDepartment({ id: this.item.id })\n                .subscribe(() => {\n                  setTimeout(Math.random() > 0.5 ? resolve : reject, 1000)\n                  this.$emit('update-data')\n                })\n            }).catch(() => console.log('Oops errors!'))\n          },\n          onCancel() {}\n        })\n      }\n    },\n    getTreeNodeOnclick(e) {\n      this.isActive = true\n      this.$emit('node-item-detail', this.item)\n      this.$nextTick().then(() => {\n        const doms = document.querySelectorAll('.tree-node__content')\n        const treeOpreationEle = document.querySelectorAll(\n          '.tree-node__content .tree-opreation'\n        )\n        treeOpreationEle.forEach(dom => {\n          dom.setAttribute('class', 'tree-opreation')\n        })\n        doms.forEach(dom => {\n          dom.setAttribute('class', 'tree-node__content')\n        })\n        e.currentTarget\n          .querySelector('.tree-opreation')\n          .setAttribute('class', 'tree-opreation active')\n        e.currentTarget.setAttribute('class', 'tree-node__content active')\n      })\n    },\n    hide() {\n      this.visible = false\n    },\n    makeFolder: function() {\n      if (!this.isFolder) {\n        this.$emit('make-folder', this.item)\n        this.isOpen = true\n      }\n    }\n  },\n  mounted() {\n    if (this.level === 0) {\n      this.isOpen = true\n    } else {\n      this.$set(this.item, 'isEdit', false)\n      this.$set(this.item, 'isAdd', false)\n    }\n  }\n}\n",null]}