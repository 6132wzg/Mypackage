{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/layouts/default#/sider-menu.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/layouts/default#/sider-menu.vue","mtime":1591147717283},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { UserService } from '@/services/user.service'\nimport { treeToMap } from '@/utils/tree-to-map'\nimport { find, remove, constant } from 'lodash-es'\nimport { iconMap } from './sider-menu.config'\nexport default {\n  name: 'DefaultBrandSiderMenu',\n  serviceInject() {\n    return {\n      userService: UserService\n    }\n  },\n  rxState() {\n    return {\n      menuData: this.userService.menuData$\n    }\n  },\n  data() {\n    return {\n      openKeys: []\n    }\n  },\n  computed: {\n    menus() {\n      return this.menuData.menus || []\n    },\n    favorite() {\n      return this.menuData.favorite || []\n    },\n    menuMap() {\n      return treeToMap(this.menus)\n    },\n    rootSubmenuKeys() {\n      return this.getRootSubmenuKeys()\n    },\n    currentSiderMenu() {\n      return this.findCurrentSiderMenu()\n    },\n    selectedKeys() {\n      const selectedKey = this.findSelectedKey(this.currentSiderMenu)\n      this.$emit('change', {\n        selectedKey,\n        currentSiderMenu: this.currentSiderMenu,\n        menus: this.menus\n      })\n      return selectedKey ? [selectedKey] : []\n    }\n  },\n  watch: {\n    selectedKeys() {\n      this.setOpenKeys()\n    }\n  },\n  created() {\n    this.init()\n    // this.$nextTick().then(() => {\n    //   document.querySelectorAll('.ant-menu-submenu-title').forEach(item =>\n    //     item.addEventListener('click', () => {\n    //       console.log('ddss')\n    //       document.querySelectorAll('.ant-menu-item.st-menu-item-selected').forEach(ele => {\n    //         ele.setAttribute('class', '.ant-menu-item')\n    //       })\n    //     })\n    //   )\n    // })\n  },\n  methods: {\n    init() {\n      this.setOpenKeys()\n    },\n    isHasSubmenu(menu) {\n      return menu.children && menu.children.length\n    },\n    onOpenChange(openKeys) {\n      const latestOpenKey = openKeys.find(\n        key => this.openKeys.indexOf(key) === -1\n      )\n      if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n        this.openKeys = openKeys\n      } else {\n        this.openKeys = latestOpenKey ? [latestOpenKey] : []\n      }\n    },\n    findCurrentSiderMenu() {\n      let currentSiderMenu\n      this.menus.forEach(menu => {\n        const matchRule = this.getMatchRule(menu)\n        if (matchRule.test(this.$route.name)) {\n          currentSiderMenu = menu\n        }\n      })\n      return currentSiderMenu || {}\n    },\n    getMatchRule(menu) {\n      let { icon } = menu\n      if (!icon) {\n        return /^The menu config is error\\.The icon field of the menu api should not be empty!/\n      }\n      /**\n       * 对一些特殊的 icon 做处理，比如 dashboard 用的是 home, 建立起菜单 icon 与路由的映射关系\n       */\n      if (iconMap.hasOwnProperty(icon)) {\n        icon = iconMap[icon]\n      }\n      return new RegExp(`^((brand|shop)-)?${icon}`)\n    },\n    findSelectedKey() {\n      let selectedKey\n      ;(this.currentSiderMenu.children || []).forEach(item => {\n        if (item.url && this.$route.name.indexOf(item.url) !== -1) {\n          selectedKey = item.id\n        }\n      })\n      return selectedKey\n    },\n    setOpenKeys() {\n      const openKey = this.currentSiderMenu.id\n      this.openKeys = openKey ? [openKey] : []\n    },\n    setSelectedKeys() {\n      const selectedKey = this.findSelectedKey(this.currentSiderMenu)\n      this.selectedKeys = selectedKey ? [selectedKey] : []\n    },\n    onClickMenuItem(menu) {\n      const { resolved } = this.$router.resolve({\n        name: menu.url\n      })\n      if (!resolved.matched.length) {\n        location.href = '/404'\n      } else {\n        this.$router.push({\n          name: menu.url\n        })\n      }\n    },\n    addFavorite(id, subMenu) {\n      this.userService.addFavorite(id).subscribe(() => {\n        const findMenu = find(this.menuData.favorite, item => {\n          return item.id === id\n        })\n        if (!findMenu) {\n          this.menuData.favorite.push(subMenu)\n        }\n      })\n    },\n    delFavorite(id) {\n      const { favorite } = this.menuData\n      remove(favorite, item => {\n        return item.id === id\n      })\n      this.userService.delFavorite(id).subscribe(() => {\n        this.menuData.favorite = [...favorite]\n      })\n    },\n    getRootSubmenuKeys() {\n      const { menus } = this\n      const rootSubmenuKeys = []\n      menus.forEach(item => {\n        rootSubmenuKeys.push(item.id)\n      })\n      return rootSubmenuKeys\n    },\n    isfavorite(id) {\n      return find(this.favorite, { id })\n    }\n  }\n}\n",null]}