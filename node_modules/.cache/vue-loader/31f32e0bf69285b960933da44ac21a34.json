{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/package/form/form-item#/reserve-course-species-form-item.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/package/form/form-item#/reserve-course-species-form-item.vue","mtime":1600926555701},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { PACKAGE_ATTR } from './const.ts'\nimport { cloneDeep } from 'lodash'\nexport default {\n  name: 'ReserveCourseSpeciesFormItem',\n  // 通过这个vueapi获取父组件的属性\n  inject: ['form'],\n  data() {\n    return {\n      unit: '次',\n      help: '',\n      courseSetting: { spec: -1 },\n      PACKAGE_ATTR,\n      // 可约课程种类 1 仅支持团课 2 仅支持私教课 3 既支持团课也支持私教课4支持团课和私教课总数\n      initSpecOptions: [\n        {\n          value: 1,\n          labelOptions: [\n            {\n              label: '仅支持预约团体课',\n              model: void 0,\n              validateText: '请填写支持预约团体课次数'\n            }\n          ]\n        },\n        {\n          value: 2,\n          labelOptions: [\n            {\n              label: '仅支持预约私教课',\n              model: 0,\n              validateText: '请填写支持预约私教课次数'\n            }\n          ]\n        },\n        {\n          value: 3,\n          labelOptions: [\n            {\n              label: '仅支持预约团体课',\n              model: 0,\n              validateText: '请填写支持预约团体课和私教课次数'\n            },\n            {\n              label: '和私教课',\n              model: 0,\n              validateText: '请填写支持预约团体课和私教课次数'\n            }\n          ]\n        },\n        {\n          value: 4,\n          labelOptions: [\n            {\n              label: '支持预约团体课和私教课共',\n              model: 0,\n              validateText: '请填写支持预约团体课和私教课总共次数'\n            }\n          ]\n        }\n      ]\n    }\n  },\n  watch: {\n    courseSetting: {\n      deep: true,\n      handler(newValue) {\n        this.$emit('change', newValue)\n      }\n    },\n    specOptions: {\n      deep: true,\n      handler(newValue, oldValue) {\n        let { spec } = this.courseSetting\n        const labelOptions = newValue[spec - 1].labelOptions\n        this.courseSetting = this.outDataFormat(labelOptions, spec)\n        this.helpText(labelOptions)\n      }\n    }\n  },\n  computed: {\n    initSpecOptionsMap() {\n      let map = {}\n      for (let item of this.initSpecOptions) {\n        map[item.value] = item\n      }\n      return map\n    },\n    specOptions() {\n      let iso = this.initSpecOptions\n      return this.mixinAttr ? iso : iso.filter(item => item.value !== 4)\n    },\n    initInfo() {\n      return this.form.initInfo\n    },\n    style() {\n      return 'width: 121px'\n    },\n    unLimited() {\n      return this.form.unLimited\n    },\n    mixinAttr() {\n      // 当是范围课程包且是限次的课程包才需要填写第四项私教和团课混合\n      return (\n        this.form.packageAttr === this.PACKAGE_ATTR.RANGE && !this.unLimited\n      )\n    },\n    isInputTime() {\n      // 当是范围课程包且是不限限次的课程包不需要填写第四项私教且次数也不需要填写\n      return !(\n        this.form.packageAttr === this.PACKAGE_ATTR.RANGE && this.unLimited\n      )\n    }\n  },\n  methods: {\n    outDataFormat(labelOptions, spec) {\n      const cs = {\n        spec,\n        is_team: 0,\n        is_personal: 0,\n        team_times: 0,\n        personal_times: 0,\n        total_times: 0\n      }\n      if (spec === 1) {\n        cs.is_team = 1\n        cs.team_times = labelOptions[0].model\n      } else if (spec === 2) {\n        cs.is_personal = 1\n        cs.personal_times = labelOptions[0].model\n      } else if (spec === 3) {\n        cs.is_personal = 1\n        cs.is_team = 1\n        cs.team_times = labelOptions[0].model\n        cs.personal_times = labelOptions[1].model\n      } else if (spec === 4) {\n        cs.is_personal = 1\n        cs.is_team = 1\n        cs.is_total = 1\n        cs.total_times = labelOptions[0].model\n      }\n      return cs\n    },\n    inDataFormat() {\n      let defaultSpec = 1\n      if (!this.initInfo.course_setting) {\n        this.$set(this.courseSetting, 'spec', defaultSpec)\n        return\n      }\n      const {\n        is_team,\n        is_personal,\n        total_times,\n        personal_times,\n        team_times\n      } = this.initInfo.course_setting\n      if (total_times > 0) {\n        defaultSpec = 4\n        this.initSpecOptions[3].labelOptions[0].model = total_times\n      } else if (is_team && is_personal) {\n        defaultSpec = 3\n        this.initSpecOptions[2].labelOptions[0].model = team_times\n        this.initSpecOptions[2].labelOptions[1].model = personal_times\n      } else if (is_personal && !is_team) {\n        this.initSpecOptions[1].labelOptions[0].model = personal_times\n        defaultSpec = 2\n      } else if (is_team && !is_personal) {\n        this.initSpecOptions[0].labelOptions[0].model = team_times || ''\n        defaultSpec = 1\n      }\n      this.$set(this.courseSetting, 'spec', defaultSpec)\n    },\n    helpText(labelOptions) {\n      this.help = ''\n      if (this.unLimited) return\n      for (let key in labelOptions) {\n        const { model, validateText } = labelOptions[key]\n        if (!model) {\n          this.help = validateText\n          return\n        }\n      }\n    },\n    resetInputNumberValue(spec) {\n      let iso = this.initSpecOptions.map(item => {\n        let labelOptions = item.labelOptions.map(ele => {\n          // 被选中的选项定为次数为1\n          ele.model = spec === item.value ? void 0 : 0\n          return ele\n        })\n        item.labelOptions = labelOptions\n        return item\n      })\n      this.initSpecOptions = iso\n    },\n    onChange(e) {\n      const val = e.target.value\n      this.$set(this.courseSetting, 'spec', val)\n      this.resetInputNumberValue(val)\n      this.helpText(this.initSpecOptionsMap[val].labelOptions)\n    },\n    init() {\n      this.inDataFormat()\n    }\n  },\n  mounted() {\n    this.init()\n  }\n}\n",{"version":3,"sources":["reserve-course-species-form-item.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"reserve-course-species-form-item.vue","sourceRoot":"src/views/biz-components/package/form/form-item#","sourcesContent":["<template>\n  <st-form-item\n    label=\"可约课程种类\"\n    labelWidth=\"148px\"\n    :validateStatus=\"help ? 'error' : ''\"\n    :help=\"help\"\n    required\n  >\n    <a-radio-group\n      v-model=\"courseSetting.spec\"\n      @change=\"onChange\"\n      class=\"biz-package-form__course-spec\"\n    >\n      <a-radio\n        v-for=\"(item, index) in specOptions\"\n        :key=\"index\"\n        :class=\"{ 'mg-t16': index !== 0 }\"\n        :value=\"item.value\"\n      >\n        <template v-for=\"label in item.labelOptions\">\n          <span :key=\"label.label\">\n            <span>{{ label.label }}</span>\n            <st-input-number\n              v-model=\"label.model\"\n              class=\"mg-l20 mg-r20\"\n              :min=\"0\"\n              :max=\"99999\"\n              :disabled=\"!(item.value === courseSetting.spec)\"\n              v-if=\"isInputTime\"\n              :style=\"style\"\n            >\n              <template slot=\"addonAfter\">{{ unit }}</template>\n            </st-input-number>\n          </span>\n        </template>\n      </a-radio>\n    </a-radio-group>\n  </st-form-item>\n</template>\n\n<script>\nimport { PACKAGE_ATTR } from './const.ts'\nimport { cloneDeep } from 'lodash'\nexport default {\n  name: 'ReserveCourseSpeciesFormItem',\n  // 通过这个vueapi获取父组件的属性\n  inject: ['form'],\n  data() {\n    return {\n      unit: '次',\n      help: '',\n      courseSetting: { spec: -1 },\n      PACKAGE_ATTR,\n      // 可约课程种类 1 仅支持团课 2 仅支持私教课 3 既支持团课也支持私教课4支持团课和私教课总数\n      initSpecOptions: [\n        {\n          value: 1,\n          labelOptions: [\n            {\n              label: '仅支持预约团体课',\n              model: void 0,\n              validateText: '请填写支持预约团体课次数'\n            }\n          ]\n        },\n        {\n          value: 2,\n          labelOptions: [\n            {\n              label: '仅支持预约私教课',\n              model: 0,\n              validateText: '请填写支持预约私教课次数'\n            }\n          ]\n        },\n        {\n          value: 3,\n          labelOptions: [\n            {\n              label: '仅支持预约团体课',\n              model: 0,\n              validateText: '请填写支持预约团体课和私教课次数'\n            },\n            {\n              label: '和私教课',\n              model: 0,\n              validateText: '请填写支持预约团体课和私教课次数'\n            }\n          ]\n        },\n        {\n          value: 4,\n          labelOptions: [\n            {\n              label: '支持预约团体课和私教课共',\n              model: 0,\n              validateText: '请填写支持预约团体课和私教课总共次数'\n            }\n          ]\n        }\n      ]\n    }\n  },\n  watch: {\n    courseSetting: {\n      deep: true,\n      handler(newValue) {\n        this.$emit('change', newValue)\n      }\n    },\n    specOptions: {\n      deep: true,\n      handler(newValue, oldValue) {\n        let { spec } = this.courseSetting\n        const labelOptions = newValue[spec - 1].labelOptions\n        this.courseSetting = this.outDataFormat(labelOptions, spec)\n        this.helpText(labelOptions)\n      }\n    }\n  },\n  computed: {\n    initSpecOptionsMap() {\n      let map = {}\n      for (let item of this.initSpecOptions) {\n        map[item.value] = item\n      }\n      return map\n    },\n    specOptions() {\n      let iso = this.initSpecOptions\n      return this.mixinAttr ? iso : iso.filter(item => item.value !== 4)\n    },\n    initInfo() {\n      return this.form.initInfo\n    },\n    style() {\n      return 'width: 121px'\n    },\n    unLimited() {\n      return this.form.unLimited\n    },\n    mixinAttr() {\n      // 当是范围课程包且是限次的课程包才需要填写第四项私教和团课混合\n      return (\n        this.form.packageAttr === this.PACKAGE_ATTR.RANGE && !this.unLimited\n      )\n    },\n    isInputTime() {\n      // 当是范围课程包且是不限限次的课程包不需要填写第四项私教且次数也不需要填写\n      return !(\n        this.form.packageAttr === this.PACKAGE_ATTR.RANGE && this.unLimited\n      )\n    }\n  },\n  methods: {\n    outDataFormat(labelOptions, spec) {\n      const cs = {\n        spec,\n        is_team: 0,\n        is_personal: 0,\n        team_times: 0,\n        personal_times: 0,\n        total_times: 0\n      }\n      if (spec === 1) {\n        cs.is_team = 1\n        cs.team_times = labelOptions[0].model\n      } else if (spec === 2) {\n        cs.is_personal = 1\n        cs.personal_times = labelOptions[0].model\n      } else if (spec === 3) {\n        cs.is_personal = 1\n        cs.is_team = 1\n        cs.team_times = labelOptions[0].model\n        cs.personal_times = labelOptions[1].model\n      } else if (spec === 4) {\n        cs.is_personal = 1\n        cs.is_team = 1\n        cs.is_total = 1\n        cs.total_times = labelOptions[0].model\n      }\n      return cs\n    },\n    inDataFormat() {\n      let defaultSpec = 1\n      if (!this.initInfo.course_setting) {\n        this.$set(this.courseSetting, 'spec', defaultSpec)\n        return\n      }\n      const {\n        is_team,\n        is_personal,\n        total_times,\n        personal_times,\n        team_times\n      } = this.initInfo.course_setting\n      if (total_times > 0) {\n        defaultSpec = 4\n        this.initSpecOptions[3].labelOptions[0].model = total_times\n      } else if (is_team && is_personal) {\n        defaultSpec = 3\n        this.initSpecOptions[2].labelOptions[0].model = team_times\n        this.initSpecOptions[2].labelOptions[1].model = personal_times\n      } else if (is_personal && !is_team) {\n        this.initSpecOptions[1].labelOptions[0].model = personal_times\n        defaultSpec = 2\n      } else if (is_team && !is_personal) {\n        this.initSpecOptions[0].labelOptions[0].model = team_times || ''\n        defaultSpec = 1\n      }\n      this.$set(this.courseSetting, 'spec', defaultSpec)\n    },\n    helpText(labelOptions) {\n      this.help = ''\n      if (this.unLimited) return\n      for (let key in labelOptions) {\n        const { model, validateText } = labelOptions[key]\n        if (!model) {\n          this.help = validateText\n          return\n        }\n      }\n    },\n    resetInputNumberValue(spec) {\n      let iso = this.initSpecOptions.map(item => {\n        let labelOptions = item.labelOptions.map(ele => {\n          // 被选中的选项定为次数为1\n          ele.model = spec === item.value ? void 0 : 0\n          return ele\n        })\n        item.labelOptions = labelOptions\n        return item\n      })\n      this.initSpecOptions = iso\n    },\n    onChange(e) {\n      const val = e.target.value\n      this.$set(this.courseSetting, 'spec', val)\n      this.resetInputNumberValue(val)\n      this.helpText(this.initSpecOptionsMap[val].labelOptions)\n    },\n    init() {\n      this.inDataFormat()\n    }\n  },\n  mounted() {\n    this.init()\n  }\n}\n</script>\n"]}]}