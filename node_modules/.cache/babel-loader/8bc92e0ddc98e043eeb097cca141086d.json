{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/pillar-line/pillar-line.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/pillar-line/pillar-line.vue","mtime":1600926555667},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.function.name\";\nimport _toConsumableArray from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\nimport { toKFilter as _toKFilter, thousandsFilter, setColorMap, colorToRgba } from \"../filters\";\nimport { View } from 'st-data-set';\nimport { Chart } from '@antv/g2';\nimport chartMixin from \"../mixin\";\nimport { chartConfig } from \"./pillar-line.config\";\nexport default {\n  name: 'PillarLine',\n  mixins: [chartMixin],\n  props: {\n    /**\n     * @example\n     * fold 为false [{date:'05-28', name: '私教课', value: 20}, {date:'05-28', name: '团体课', value: 50}]\n     * fold 为true [{date:'05-28',私教课:20,团体课:50,储值卡:78}]\n     * fold 为true时 fields不能为空\n     */\n    fold: {\n      type: Boolean,\n      default: false\n    },\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    dataItem: {\n      type: Function,\n      default: function _default(row) {\n        return row;\n      }\n    },\n    // 设置 图例、x轴、y轴 对应的key值\n    dataItemKeyMap: {\n      type: Object,\n      default: function _default() {\n        return {\n          name: 'name',\n          // 图例名\n          key: 'key',\n          // 图例name对应key值\n          value: 'value',\n          // y轴值\n          name2: 'name2',\n          // 图例名\n          key2: 'key2',\n          // 图例name对应key值\n          value2: 'value2',\n          // y2轴值\n          type: 'type' // x轴值\n\n        };\n      }\n    },\n    height: {\n      type: Number,\n      default: 280\n    },\n    // 数组排序对应颜色顺序，设置对应字段的颜色；当fold为true时 fields又作为展开字段集,用于字段的展开\n    fields: {\n      type: [Boolean, Array],\n      default: function _default() {\n        return [];\n      }\n    },\n    fieldKey: {\n      type: String,\n      default: 'key'\n    },\n    fieldKey2: {\n      type: String,\n      default: 'key2'\n    },\n    // 颜色数组\n    colors: {\n      type: Array,\n      default: function _default() {\n        return ['#3F66F6', '#798AFF', '#06DB8C', '#77FF74', '#B8F10F', '#FFE679', '#FFB946', '#FF6466', '#C87FFF', '#484F83'];\n      }\n    },\n    // 是否按照颜色数组的顺序 循环设置图例颜色（即图例顺序与colors顺序一一对应），默认为false，根据图例key设置图例颜色\n    colorIsQueue: {\n      type: Boolean,\n      default: false\n    },\n    colorMap: {\n      type: [Object, Array, Boolean],\n      default: false\n    },\n    max: {\n      type: Number,\n      default: 10\n    },\n    max2: {\n      type: Number,\n      default: 1000\n    }\n  },\n  data: function data() {\n    return {\n      type: 'PillarLine',\n      dv: new View()\n    };\n  },\n  computed: {\n    dataSource: function dataSource() {\n      // 数据为空时，默认添加一项空数据，保证空统计图的绘制\n      if (!this.data || !this.data.length) {\n        return [{\n          key: 0,\n          name: '',\n          value: 0,\n          type: ''\n        }].concat(_toConsumableArray(this.data));\n      }\n\n      return this.data;\n    },\n    $fieldsOpts: function $fieldsOpts() {\n      var _this = this;\n\n      var fieldsKey = [];\n      var fieldsName = [];\n      var fieldsObj = {};\n      var data = this.fold ? this.dv.rows : this.dataSource;\n      data.map(function (item) {\n        fieldsKey.push(item[_this.fieldKey]);\n        fieldsName.push(item.name);\n        fieldsObj[item[_this.fieldKey]] = item.name;\n        fieldsKey.push(item[_this.fieldKey2]);\n        fieldsName.push(item.name2);\n        fieldsObj[item[_this.fieldKey2]] = item.name2;\n      });\n\n      if (this.fields.length) {\n        fieldsKey = [].concat(_toConsumableArray(this.fields), _toConsumableArray(fieldsKey));\n      }\n\n      fieldsKey = _toConsumableArray(new Set(fieldsKey));\n      fieldsName = _toConsumableArray(new Set(fieldsName));\n      console.log('fieldsOpts', fieldsKey);\n      return {\n        colorMap: this.colorMap,\n        fieldsKey: fieldsKey,\n        fieldsName: fieldsName,\n        fieldsObj: fieldsObj\n      };\n    },\n    // 构造颜色map\n    $colorMap: function $colorMap() {\n      // 根据 图例枚举，以图例name为key值，生成图例颜色map对应关系\n      return setColorMap(this.$fieldsOpts, this.colors, this.colorIsQueue);\n    },\n    // 构造阴影颜色map\n    shadowColors: function shadowColors() {\n      var shadowColorMap = {};\n\n      for (var key in this.$colorMap) {\n        shadowColorMap[key] = colorToRgba(this.$colorMap[key], 0.4);\n      }\n\n      return shadowColorMap;\n    },\n    // y轴 最大值设置\n    MAX: function MAX() {\n      var maxValue = this.max;\n      var maxValMap = {};\n      this.dv.rows.map(function (item) {\n        maxValMap[item.type] ? maxValMap[item.type] += item.value : maxValMap[item.type] = +item.value;\n      });\n      Object.keys(maxValMap).map(function (key) {\n        maxValMap[key] > maxValue && (maxValue = maxValMap[key]);\n      });\n      console.log('MAX', maxValue);\n      return maxValue;\n    },\n    MAX2: function MAX2() {\n      var maxValue = this.dv.rows.length ? this.dv.max('value2') : this.max;\n      console.log('MAX2', maxValue);\n      return maxValue > this.max2 ? maxValue : this.max2;\n    }\n  },\n  methods: {\n    toKFilter: function toKFilter(val) {\n      var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      var n = _toKFilter(val);\n\n      return n.toString().indexOf('万') >= 0 ? n : n + unit;\n    },\n    thousandsFilter: thousandsFilter,\n    // getChartConfig,\n    // 格式化数据\n    initDv: function initDv() {\n      var _this2 = this;\n\n      this.dv = new View();\n      this.dv.source(this.dataSource);\n\n      if (this.fold) {\n        this.dv.transform({\n          type: 'fold',\n          fields: this.fields,\n          key: 'name',\n          value: 'value'\n        });\n      }\n\n      this.dv.transform({\n        type: 'map',\n        callback: function callback(row, index) {\n          // 根据自定义配置项 格式化数据\n          for (var key in _this2.dataItemKeyMap) {\n            var itemDt = row[_this2.dataItemKeyMap[key]];\n            if (itemDt) row[key] = itemDt;\n          }\n\n          ;\n          row.$idx = index, row.value = +row.value, row.value2 = +row.value2;\n          return _this2.dataItem ? _this2.dataItem(row) : row;\n        }\n      });\n    },\n    // 创建图表实例\n    renderChart: function renderChart() {\n      console.log('chart init', this.dv.rows);\n      this.chart = new Chart(_objectSpread({}, this.opts, {\n        container: this.$el,\n        data: this.dv,\n        forceFit: true,\n        height: this.height,\n        padding: ['auto', 160, 'auto', 'auto'] // renderer: 'svg'\n\n      }));\n\n      if (this.isEmpty) {\n        this.chart.tooltip(false);\n        this.chart.legend('name', false);\n        this.chart.legend('name2', false);\n      }\n\n      this.chart.render();\n    },\n    // 更新opts配置 需要重新计算最新的opts、并重新渲染\n    changeData: function changeData() {\n      this.chart.destroy();\n      this.renderChart();\n    },\n    // 如果配置参数在单独的配置文件中这个方法必须设置\n    getChartConfig: function getChartConfig() {\n      // chartConfig 输出配置参数的方法\n      return chartConfig.apply(this);\n    },\n    // 设置交互\n    setInteraction: function setInteraction(chart) {\n      chart.interaction('element-highlight-by-color');\n    }\n  }\n};",{"version":3,"sources":["pillar-line.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"plillar-line\"></div>\n</template>\n\n<script>\nimport {\n  toKFilter,\n  thousandsFilter,\n  setColorMap,\n  colorToRgba\n} from '../filters'\nimport { View } from 'st-data-set'\nimport { Chart } from '@antv/g2'\nimport chartMixin from '../mixin'\nimport { chartConfig } from './pillar-line.config'\n\nexport default {\n  name: 'PillarLine',\n  mixins: [chartMixin],\n  props: {\n    /**\n     * @example\n     * fold 为false [{date:'05-28', name: '私教课', value: 20}, {date:'05-28', name: '团体课', value: 50}]\n     * fold 为true [{date:'05-28',私教课:20,团体课:50,储值卡:78}]\n     * fold 为true时 fields不能为空\n     */\n    fold: {\n      type: Boolean,\n      default: false\n    },\n    data: {\n      type: Array,\n      default: () => []\n    },\n    dataItem: {\n      type: Function,\n      default: row => row\n    },\n    // 设置 图例、x轴、y轴 对应的key值\n    dataItemKeyMap: {\n      type: Object,\n      default: () => {\n        return {\n          name: 'name', // 图例名\n          key: 'key', // 图例name对应key值\n          value: 'value', // y轴值\n          name2: 'name2', // 图例名\n          key2: 'key2', // 图例name对应key值\n          value2: 'value2', // y2轴值\n          type: 'type' // x轴值\n        }\n      }\n    },\n    height: {\n      type: Number,\n      default: 280\n    },\n    // 数组排序对应颜色顺序，设置对应字段的颜色；当fold为true时 fields又作为展开字段集,用于字段的展开\n    fields: {\n      type: [Boolean, Array],\n      default: () => []\n    },\n    fieldKey: {\n      type: String,\n      default: 'key'\n    },\n    fieldKey2: {\n      type: String,\n      default: 'key2'\n    },\n    // 颜色数组\n    colors: {\n      type: Array,\n      default: () => [\n        '#3F66F6',\n        '#798AFF',\n        '#06DB8C',\n        '#77FF74',\n        '#B8F10F',\n        '#FFE679',\n        '#FFB946',\n        '#FF6466',\n        '#C87FFF',\n        '#484F83'\n      ]\n    },\n    // 是否按照颜色数组的顺序 循环设置图例颜色（即图例顺序与colors顺序一一对应），默认为false，根据图例key设置图例颜色\n    colorIsQueue: {\n      type: Boolean,\n      default: false\n    },\n    colorMap: {\n      type: [Object, Array, Boolean],\n      default: false\n    },\n    max: {\n      type: Number,\n      default: 10\n    },\n    max2: {\n      type: Number,\n      default: 1000\n    }\n  },\n  data() {\n    return {\n      type: 'PillarLine',\n      dv: new View()\n    }\n  },\n  computed: {\n    dataSource() {\n      // 数据为空时，默认添加一项空数据，保证空统计图的绘制\n      if (!this.data || !this.data.length) {\n        return [{ key: 0, name: '', value: 0, type: '' }, ...this.data]\n      }\n      return this.data\n    },\n    $fieldsOpts() {\n      let fieldsKey = []\n      let fieldsName = []\n      let fieldsObj = {}\n      const data = this.fold ? this.dv.rows : this.dataSource\n      data.map(item => {\n        fieldsKey.push(item[this.fieldKey])\n        fieldsName.push(item.name)\n        fieldsObj[item[this.fieldKey]] = item.name\n        fieldsKey.push(item[this.fieldKey2])\n        fieldsName.push(item.name2)\n        fieldsObj[item[this.fieldKey2]] = item.name2\n      })\n      if (this.fields.length) {\n        fieldsKey = [...this.fields, ...fieldsKey]\n      }\n      fieldsKey = [...new Set(fieldsKey)]\n      fieldsName = [...new Set(fieldsName)]\n      console.log('fieldsOpts', fieldsKey)\n      return {\n        colorMap: this.colorMap,\n        fieldsKey,\n        fieldsName,\n        fieldsObj\n      }\n    },\n    // 构造颜色map\n    $colorMap() {\n      // 根据 图例枚举，以图例name为key值，生成图例颜色map对应关系\n      return setColorMap(this.$fieldsOpts, this.colors, this.colorIsQueue)\n    },\n    // 构造阴影颜色map\n    shadowColors() {\n      const shadowColorMap = {}\n      for (let key in this.$colorMap) {\n        shadowColorMap[key] = colorToRgba(this.$colorMap[key], 0.4)\n      }\n      return shadowColorMap\n    },\n    // y轴 最大值设置\n    MAX() {\n      let maxValue = this.max\n      const maxValMap = {}\n      this.dv.rows.map(item => {\n        maxValMap[item.type]\n          ? (maxValMap[item.type] += item.value)\n          : (maxValMap[item.type] = +item.value)\n      })\n      Object.keys(maxValMap).map(key => {\n        maxValMap[key] > maxValue && (maxValue = maxValMap[key])\n      })\n      console.log('MAX', maxValue)\n      return maxValue\n    },\n    MAX2() {\n      const maxValue = this.dv.rows.length ? this.dv.max('value2') : this.max\n      console.log('MAX2', maxValue)\n      return maxValue > this.max2 ? maxValue : this.max2\n    }\n  },\n  methods: {\n    toKFilter(val, unit = '') {\n      const n = toKFilter(val)\n      return n.toString().indexOf('万') >= 0 ? n : n + unit\n    },\n    thousandsFilter,\n    // getChartConfig,\n    // 格式化数据\n    initDv() {\n      this.dv = new View()\n      this.dv.source(this.dataSource)\n      if (this.fold) {\n        this.dv.transform({\n          type: 'fold',\n          fields: this.fields,\n          key: 'name',\n          value: 'value'\n        })\n      }\n      this.dv.transform({\n        type: 'map',\n        callback: (row, index) => {\n          // 根据自定义配置项 格式化数据\n          for (let key in this.dataItemKeyMap) {\n            const itemDt = row[this.dataItemKeyMap[key]]\n            if (itemDt) row[key] = itemDt\n          }\n          ;(row.$idx = index),\n            (row.value = +row.value),\n            (row.value2 = +row.value2)\n          return this.dataItem ? this.dataItem(row) : row\n        }\n      })\n    },\n    // 创建图表实例\n    renderChart() {\n      console.log('chart init', this.dv.rows)\n      this.chart = new Chart({\n        ...this.opts,\n        container: this.$el,\n        data: this.dv,\n        forceFit: true,\n        height: this.height,\n        padding: ['auto', 160, 'auto', 'auto']\n        // renderer: 'svg'\n      })\n      if (this.isEmpty) {\n        this.chart.tooltip(false)\n        this.chart.legend('name', false)\n        this.chart.legend('name2', false)\n      }\n      this.chart.render()\n    },\n    // 更新opts配置 需要重新计算最新的opts、并重新渲染\n    changeData() {\n      this.chart.destroy()\n      this.renderChart()\n    },\n    // 如果配置参数在单独的配置文件中这个方法必须设置\n    getChartConfig() {\n      // chartConfig 输出配置参数的方法\n      return chartConfig.apply(this)\n    },\n    // 设置交互\n    setInteraction(chart) {\n      chart.interaction('element-highlight-by-color')\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views/biz-components/chart/pillar-line"}]}