{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/app/plugin/components#/form.mixin.js","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/app/plugin/components#/form.mixin.js","mtime":1600926556092},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport { typeOf } from '@/utils/type';\nimport { merge, isEqual } from 'lodash-es';\nimport { message } from 'ant-design-vue';\nimport { resolve } from 'core-js/fn/promise';\n/**\n * formValue 数据源，\n * formCheck 数据源校验状态，{ isPass, loading, [id], [id], ...} isPass 所有表单组件是否通过校验， loading 所有组件是否校验完毕， [id] 对应组件的校验状态，id标识为组件的_uid\n * isEdit 是否是编辑状态\n * isSubmit 提交标识，保存提交按钮点击事件 修改isSubmit ,isSubmit发生变更 触发当前组件的校验方法，校验完成后执行当前组件的onSubmit方法 进而触发submit事件\n * form、decorators 可由父级传入 form、decorators，也可以在组件内部定义 _form、_decorators 来设置\n * 以上属性必传 必须要在根form组件或之上 定义并往下传\n *    page组件 ==> form父组件 ==> form子组件 ==> form孙子组件 或 form父组件 ==> form子组件 ==> form孙子组件\n *\n * 校验、提交方法\n * onSubmit submit事件专用方法，承接子组件的submit事件，输出自己的submit事件\n * validate 需要自己定义，定义自己组件校验方法，可以是 promise 返回校验状态\n * messageError 自定义校验 message抛错 公共方法\n *\n * 数据源 与 表单 的数据同步方法\n * 使用 formValueChange 同步表单数据 到 v-model\n * 使用 setFieldsValue 同步 v-model数据 到 表单\n * 使用 setValue 更新组件属性值 支持 this.setValue('formValue.product_type', 2) 和 this.setValue('{'formValue.product_type': 2, formValue.product_id: 1}) 两种调用方式\n *\n */\n\nexport default {\n  model: {\n    props: 'value',\n    event: 'change'\n  },\n  props: {\n    value: {\n      type: Object,\n      default: function _default() {}\n    },\n    formCheck: {\n      type: Object,\n      default: function _default() {\n        return {\n          isPass: false,\n          loading: false,\n          result: {}\n        };\n      }\n    },\n    isSubmit: {\n      type: Number,\n      defalut: 0\n    },\n    isEdit: {\n      type: Boolean,\n      defalut: false\n    }\n  },\n  computed: {\n    // 双向绑定值\n    formValue: {\n      get: function get() {\n        return this.value;\n      }\n    }\n  },\n  watch: {\n    // 监听数据源变更，向外抛出change事件\n    formValue: {\n      deep: true,\n      handler: function handler(newVal, oldVal) {\n        if (!newVal || isEqual(newVal, oldVal)) return;\n        this.$emit('change', newVal);\n      }\n    },\n    // isSubmit 保存提交按钮点击事件 修改isSubmit,触发校验、进而触发submit事件\n    isSubmit: {\n      handler: function handler(newVal, oldVal) {\n        var _this = this;\n\n        if (isEqual(newVal, oldVal)) return;\n        if (!this.formCheck.result) this.formCheck.result = {}; // 检验前重置当前组件的校验状态\n\n        this.formCheck.result[this._uid] = false; // submit前 先执行校验方法，校验方法执行完成后执行onSubmit触发submit事件\n\n        var validator = this.validate && this.validate();\n\n        if (validator && validator.then) {\n          // 异步校验设置loading状态\n          this.formCheck.result[this._uid] = 'loading';\n          validator.then(function (flag) {\n            console.log(_this.$vnode.tag + '  组件触发校验, 结果为' + flag);\n            _this.formCheck.result[_this._uid] = flag;\n\n            _this._onSubmit(_this.formValue, _this.formCheck);\n          }).catch(function (err) {\n            console.log(_this.$vnode.tag + '  组件触发校验, 结果为' + false);\n            _this.formCheck.result[_this._uid] = false;\n\n            _this._onSubmit(_this.formValue, _this.formCheck);\n          });\n        } else {\n          console.log(this.$vnode.tag + '  组件触发校验, 结果为' + validator);\n          this.formCheck.result[this._uid] = validator;\n\n          this._onSubmit(this.formValue, this.formCheck);\n        }\n      }\n    }\n  },\n  data: function data() {\n    return {\n      _DelayTimer: null,\n      _ErrorTimer: null\n    };\n  },\n  methods: {\n    /**\n     * onSubmit 除了本组件validate执行后会执行， 也是子组件的submit事件的方法\n     * 即 孙子的submit事件 --> 子组件的onSumit方法, 触发子组件submit事件 --> 父组件的onSumbit方法\n     * @param values 数据源\n     * @param formCheck 所有表单组件的校验状态以及所有状态汇总后的最终状态，\n     * { isPass, loading, [id], [id], ...} isPass 所有表单组件是否通过校验， loading 所有组件是否校验完毕， [id] 对应组件的校验状态，id标识为组件的_uid\n     */\n    // 子组件的submit事件绑定方法，合并子组件的校验结果后 再向外抛本组件的submit事件\n    onSubmit: function onSubmit(values, formCheck) {\n      merge(this.formCheck.result, formCheck.result);\n\n      this._onSubmit(values, this.formCheck);\n    },\n    _onSubmit: function _onSubmit(values, formCheck) {\n      var _this2 = this;\n\n      console.log(this.formCheck); // if (!formCheck.isPass) return\n\n      this.$nextTick(function () {\n        clearTimeout(_this2._DelayTimer);\n        _this2._DelayTimer = setTimeout(function () {\n          var loading = false;\n          var isPass = true;\n          _this2.formCheck.result && Object.keys(_this2.formCheck.result).map(function (formId) {\n            if (formId !== 'isPass' && formId !== 'loading' && (!_this2.formCheck.result[formId] || _this2.formCheck.result[formId] === 'loading')) isPass = false;\n            if (_this2.formCheck.result[formId] === 'loading') loading = true;\n          });\n          _this2.formCheck.loading = loading;\n          _this2.formCheck.isPass = isPass;\n\n          _this2.$emit('submit', values, _this2.formCheck);\n        });\n      });\n    },\n    validateFields: function validateFields(fields) {\n      var _this3 = this;\n\n      if (!fields) fields = Object.keys(this.customDecorators);\n      var checkList = [];\n      fields.map(function (field) {\n        if (!_this3.customDecorators[field] || !_this3.customDecorators[field].validator) {\n          console.log(\"\".concat(field, \" validator\\u4E0D\\u5B58\\u5728\"));\n        } else {\n          var item = _this3.validateField(field);\n\n          checkList.push(item);\n        }\n      });\n      return new Promise(function (resolve, reject) {\n        Promise.all(checkList).then(function (err) {\n          err = err.filter(function (item) {\n            return !!item;\n          });\n          resolve(err.length ? err : null);\n        });\n      });\n    },\n    validateField: function validateField(field, value) {\n      var _this4 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this4.customDecorators[field] || !_this4.customDecorators[field].validator) {\n          console.log(\"\".concat(field, \" validator\\u4E0D\\u5B58\\u5728\"));\n          resolve(true);\n          return;\n        }\n\n        _this4.$nextTick(function () {\n          console.log(_this4.getValue(field));\n\n          var msg = _this4.customDecorators[field].validator.apply(_this4, [field, value || _this4.getValue(field), _this4.formValue]);\n\n          var result = {\n            validateStatus: msg ? 'error' : '',\n            help: msg || ''\n          };\n          _this4.customDecorators[field].checkResult = result;\n          resolve(msg ? result : null);\n        });\n      });\n    },\n\n    /**\n     * @param key 表单绑定的值的 key\n     * @param e   表单值\n     * @param arg1 可以是 cb 也可以是target\n     * @param arg2 是target 默认为this\n     * @param cb  处理当前表单逻辑的回调\n     * @param target  数据源，默认设置、更新this上 key对应的属性\n     * 用于使用 v-decorator 绑定表单的 change事件，在其值发生变更后也同步一份到 formValue 上\n     * 用法：@change=\"valueChange('formValue.product_id', $event, onMemberChange, formValue)\"\n     */\n    formValueChange: function formValueChange(key, val) {\n      var arg1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var arg2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this;\n      console.log(key, val, arg1, arg2);\n      var cb = null,\n          target = this;\n      if (arg1 && typeOf(arg1) !== 'function') target = arg1;\n      if (arg1 && typeOf(arg1) === 'function') cb = arg1, target = arg2 || this;\n      this.setValue(key, val, target);\n      cb && cb(val, key);\n    },\n\n    /**\n     * formValue 集联更新值 需要用 此方法同步 form属性和v-model绑定值\n     * 如：v-decorators=\"formValue.product_type\" 与 v-decorators=\"formValue.product_id\" product_type 变更需要 更新product_id的值\n     * 更新product_id的值 需要更新form表单，也需要更新formValue\n     * @param key 字符串 或 对象\n     * @param value\n     * 用法：this.setFieldsValue('formValue.product_type', 2) 或 this.setFieldsValue({'formValue.product_type': 2, formValue.product_id: 1})\n     */\n    setFieldsValue: function setFieldsValue(key, value) {\n      var _this5 = this;\n\n      this.setValue(key, value, this.formValue);\n      console.log('setFieldsValue', key, value);\n      this.$nextTick(function () {\n        setTimeout(function () {\n          if (!_this5.form) throw \"form \\u4E0D\\u5B58\\u5728\";\n          _this5.form && _this5.form.setFieldsValue(typeOf(key) === 'string' ? _defineProperty({}, key, value) : key);\n        });\n      });\n    },\n\n    /**\n     * 更新组件属性值，支持类似 form 的 setFieldsValue 方式\n     * 如：this.setValue('formValue.product_type', 2)   ===>   this.formValue.product_type = 2\n     * 如：this.setValue('{'formValue.product_type': 2, formValue.product_id: 1})   ===>   this.formValue.product_type = 2; this.formValue.product_id = 1\n     */\n    setValue: function setValue(key, value) {\n      var _this6 = this;\n\n      var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;\n      console.log('single-formValue-change', key, value);\n\n      if (typeOf(key) === 'string') {\n        var keyArr = key.split('.');\n        var len = keyArr.length - 1;\n        keyArr.reduce(function (cur, key, index) {\n          if (!cur[key] && index < len) {\n            throw \"\".concat(key, \"\\u4E0D\\u5B58\\u5728\");\n          }\n\n          if (index === len) {\n            // 如果 要更新的值， 新值都是对象且不是moment对象则合并， 否则直接覆盖\n            if (typeOf(cur[key]) === 'object' && typeOf(value) === 'object' && !cur[key]._isAMomentObject && !value._isAMomentObject) {\n              merge(cur[key], value);\n            } else {\n              cur[key] = value;\n            }\n          }\n\n          return cur[key];\n        }, target);\n      } else {\n        Object.keys(key).map(function (k) {\n          _this6.setValue(k, key[k]);\n        });\n      }\n    },\n    getValue: function getValue(key) {\n      var keyArr = key.split('.');\n      var len = keyArr.length - 1;\n      return keyArr.reduce(function (cur, key, index) {\n        if (!cur[key] && index < len) {\n          throw \"\".concat(key, \"\\u4E0D\\u5B58\\u5728\");\n        }\n\n        return cur[key];\n      }, this);\n    },\n    messageError: function messageError() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // TODO: 可添加 msgIsShow 判断控制 一次只抛第一个错误信息\n      if (!config.content) return;\n      message.error(config.content, config.duration); // this.msgIsShow = true\n      // this._ErrorTimer = setTimeout(() => {\n      //   this.msgIsShow = false\n      //   message.error(config.content, config.duration)\n      // }, 2000)\n    }\n  }\n};",{"version":3,"sources":["/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/app/plugin/components#/form.mixin.js"],"names":["typeOf","merge","isEqual","message","resolve","model","props","event","value","type","Object","default","formCheck","isPass","loading","result","isSubmit","Number","defalut","isEdit","Boolean","computed","formValue","get","watch","deep","handler","newVal","oldVal","$emit","_uid","validator","validate","then","flag","console","log","$vnode","tag","_onSubmit","catch","err","data","_DelayTimer","_ErrorTimer","methods","onSubmit","values","$nextTick","clearTimeout","setTimeout","keys","map","formId","validateFields","fields","customDecorators","checkList","field","item","validateField","push","Promise","reject","all","filter","length","getValue","msg","apply","validateStatus","help","checkResult","formValueChange","key","val","arg1","arg2","cb","target","setValue","setFieldsValue","form","keyArr","split","len","reduce","cur","index","_isAMomentObject","k","messageError","config","content","error","duration"],"mappings":"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","sourcesContent":["import { typeOf } from '@/utils/type'\nimport { merge, isEqual } from 'lodash-es'\nimport { message } from 'ant-design-vue'\nimport { resolve } from 'core-js/fn/promise'\n/**\n * formValue 数据源，\n * formCheck 数据源校验状态，{ isPass, loading, [id], [id], ...} isPass 所有表单组件是否通过校验， loading 所有组件是否校验完毕， [id] 对应组件的校验状态，id标识为组件的_uid\n * isEdit 是否是编辑状态\n * isSubmit 提交标识，保存提交按钮点击事件 修改isSubmit ,isSubmit发生变更 触发当前组件的校验方法，校验完成后执行当前组件的onSubmit方法 进而触发submit事件\n * form、decorators 可由父级传入 form、decorators，也可以在组件内部定义 _form、_decorators 来设置\n * 以上属性必传 必须要在根form组件或之上 定义并往下传\n *    page组件 ==> form父组件 ==> form子组件 ==> form孙子组件 或 form父组件 ==> form子组件 ==> form孙子组件\n *\n * 校验、提交方法\n * onSubmit submit事件专用方法，承接子组件的submit事件，输出自己的submit事件\n * validate 需要自己定义，定义自己组件校验方法，可以是 promise 返回校验状态\n * messageError 自定义校验 message抛错 公共方法\n *\n * 数据源 与 表单 的数据同步方法\n * 使用 formValueChange 同步表单数据 到 v-model\n * 使用 setFieldsValue 同步 v-model数据 到 表单\n * 使用 setValue 更新组件属性值 支持 this.setValue('formValue.product_type', 2) 和 this.setValue('{'formValue.product_type': 2, formValue.product_id: 1}) 两种调用方式\n *\n */\nexport default {\n  model: {\n    props: 'value',\n    event: 'change'\n  },\n  props: {\n    value: {\n      type: Object,\n      default: () => {}\n    },\n    formCheck: {\n      type: Object,\n      default: () => ({\n        isPass: false,\n        loading: false,\n        result: {}\n      })\n    },\n    isSubmit: {\n      type: Number,\n      defalut: 0\n    },\n    isEdit: {\n      type: Boolean,\n      defalut: false\n    }\n  },\n  computed: {\n    // 双向绑定值\n    formValue: {\n      get() {\n        return this.value\n      }\n    }\n  },\n  watch: {\n    // 监听数据源变更，向外抛出change事件\n    formValue: {\n      deep: true,\n      handler(newVal, oldVal) {\n        if (!newVal || isEqual(newVal, oldVal)) return\n        this.$emit('change', newVal)\n      }\n    },\n    // isSubmit 保存提交按钮点击事件 修改isSubmit,触发校验、进而触发submit事件\n    isSubmit: {\n      handler(newVal, oldVal) {\n        if (isEqual(newVal, oldVal)) return\n        if (!this.formCheck.result) this.formCheck.result = {}\n        // 检验前重置当前组件的校验状态\n        this.formCheck.result[this._uid] = false\n        // submit前 先执行校验方法，校验方法执行完成后执行onSubmit触发submit事件\n        const validator = this.validate && this.validate()\n        if (validator && validator.then) {\n          // 异步校验设置loading状态\n          this.formCheck.result[this._uid] = 'loading'\n          validator\n            .then(flag => {\n              console.log(this.$vnode.tag + '  组件触发校验, 结果为' + flag)\n              this.formCheck.result[this._uid] = flag\n              this._onSubmit(this.formValue, this.formCheck)\n            })\n            .catch(err => {\n              console.log(this.$vnode.tag + '  组件触发校验, 结果为' + false)\n              this.formCheck.result[this._uid] = false\n              this._onSubmit(this.formValue, this.formCheck)\n            })\n        } else {\n          console.log(this.$vnode.tag + '  组件触发校验, 结果为' + validator)\n          this.formCheck.result[this._uid] = validator\n          this._onSubmit(this.formValue, this.formCheck)\n        }\n      }\n    }\n  },\n  data() {\n    return {\n      _DelayTimer: null,\n      _ErrorTimer: null\n    }\n  },\n  methods: {\n    /**\n     * onSubmit 除了本组件validate执行后会执行， 也是子组件的submit事件的方法\n     * 即 孙子的submit事件 --> 子组件的onSumit方法, 触发子组件submit事件 --> 父组件的onSumbit方法\n     * @param values 数据源\n     * @param formCheck 所有表单组件的校验状态以及所有状态汇总后的最终状态，\n     * { isPass, loading, [id], [id], ...} isPass 所有表单组件是否通过校验， loading 所有组件是否校验完毕， [id] 对应组件的校验状态，id标识为组件的_uid\n     */\n    // 子组件的submit事件绑定方法，合并子组件的校验结果后 再向外抛本组件的submit事件\n    onSubmit(values, formCheck) {\n      merge(this.formCheck.result, formCheck.result)\n      this._onSubmit(values, this.formCheck)\n    },\n    _onSubmit(values, formCheck) {\n      console.log(this.formCheck)\n      // if (!formCheck.isPass) return\n      this.$nextTick(() => {\n        clearTimeout(this._DelayTimer)\n        this._DelayTimer = setTimeout(() => {\n          let loading = false\n          let isPass = true\n          this.formCheck.result &&\n            Object.keys(this.formCheck.result).map(formId => {\n              if (\n                formId !== 'isPass' &&\n                formId !== 'loading' &&\n                (!this.formCheck.result[formId] ||\n                  this.formCheck.result[formId] === 'loading')\n              )\n                isPass = false\n              if (this.formCheck.result[formId] === 'loading') loading = true\n            })\n          this.formCheck.loading = loading\n          this.formCheck.isPass = isPass\n          this.$emit('submit', values, this.formCheck)\n        })\n      })\n    },\n    validateFields(fields) {\n      if (!fields) fields = Object.keys(this.customDecorators)\n      let checkList = []\n      fields.map(field => {\n        if (\n          !this.customDecorators[field] ||\n          !this.customDecorators[field].validator\n        ) {\n          console.log(`${field} validator不存在`)\n        } else {\n          const item = this.validateField(field)\n          checkList.push(item)\n        }\n      })\n      return new Promise((resolve, reject) => {\n        Promise.all(checkList).then(err => {\n          err = err.filter(item => !!item)\n          resolve(err.length ? err : null)\n        })\n      })\n    },\n    validateField(field, value) {\n      return new Promise((resolve, reject) => {\n        if (\n          !this.customDecorators[field] ||\n          !this.customDecorators[field].validator\n        ) {\n          console.log(`${field} validator不存在`)\n          resolve(true)\n          return\n        }\n        this.$nextTick(() => {\n          console.log(this.getValue(field))\n          const msg = this.customDecorators[field].validator.apply(this, [\n            field,\n            value || this.getValue(field),\n            this.formValue\n          ])\n          const result = {\n            validateStatus: msg ? 'error' : '',\n            help: msg || ''\n          }\n          this.customDecorators[field].checkResult = result\n          resolve(msg ? result : null)\n        })\n      })\n    },\n    /**\n     * @param key 表单绑定的值的 key\n     * @param e   表单值\n     * @param arg1 可以是 cb 也可以是target\n     * @param arg2 是target 默认为this\n     * @param cb  处理当前表单逻辑的回调\n     * @param target  数据源，默认设置、更新this上 key对应的属性\n     * 用于使用 v-decorator 绑定表单的 change事件，在其值发生变更后也同步一份到 formValue 上\n     * 用法：@change=\"valueChange('formValue.product_id', $event, onMemberChange, formValue)\"\n     */\n    formValueChange(key, val, arg1 = null, arg2 = this) {\n      console.log(key, val, arg1, arg2)\n      let cb = null,\n        target = this\n      if (arg1 && typeOf(arg1) !== 'function') target = arg1\n      if (arg1 && typeOf(arg1) === 'function')\n        (cb = arg1), (target = arg2 || this)\n      this.setValue(key, val, target)\n      cb && cb(val, key)\n    },\n    /**\n     * formValue 集联更新值 需要用 此方法同步 form属性和v-model绑定值\n     * 如：v-decorators=\"formValue.product_type\" 与 v-decorators=\"formValue.product_id\" product_type 变更需要 更新product_id的值\n     * 更新product_id的值 需要更新form表单，也需要更新formValue\n     * @param key 字符串 或 对象\n     * @param value\n     * 用法：this.setFieldsValue('formValue.product_type', 2) 或 this.setFieldsValue({'formValue.product_type': 2, formValue.product_id: 1})\n     */\n    setFieldsValue(key, value) {\n      this.setValue(key, value, this.formValue)\n      console.log('setFieldsValue', key, value)\n      this.$nextTick(() => {\n        setTimeout(() => {\n          if (!this.form) throw `form 不存在`\n          this.form &&\n            this.form.setFieldsValue(\n              typeOf(key) === 'string' ? { [key]: value } : key\n            )\n        })\n      })\n    },\n    /**\n     * 更新组件属性值，支持类似 form 的 setFieldsValue 方式\n     * 如：this.setValue('formValue.product_type', 2)   ===>   this.formValue.product_type = 2\n     * 如：this.setValue('{'formValue.product_type': 2, formValue.product_id: 1})   ===>   this.formValue.product_type = 2; this.formValue.product_id = 1\n     */\n    setValue(key, value, target = this) {\n      console.log('single-formValue-change', key, value)\n      if (typeOf(key) === 'string') {\n        const keyArr = key.split('.')\n        const len = keyArr.length - 1\n        keyArr.reduce((cur, key, index) => {\n          if (!cur[key] && index < len) {\n            throw `${key}不存在`\n          }\n          if (index === len) {\n            // 如果 要更新的值， 新值都是对象且不是moment对象则合并， 否则直接覆盖\n            if (\n              typeOf(cur[key]) === 'object' &&\n              typeOf(value) === 'object' &&\n              !cur[key]._isAMomentObject &&\n              !value._isAMomentObject\n            ) {\n              merge(cur[key], value)\n            } else {\n              cur[key] = value\n            }\n          }\n          return cur[key]\n        }, target)\n      } else {\n        Object.keys(key).map(k => {\n          this.setValue(k, key[k])\n        })\n      }\n    },\n    getValue(key) {\n      const keyArr = key.split('.')\n      const len = keyArr.length - 1\n      return keyArr.reduce((cur, key, index) => {\n        if (!cur[key] && index < len) {\n          throw `${key}不存在`\n        }\n        return cur[key]\n      }, this)\n    },\n    messageError(config = {}) {\n      // TODO: 可添加 msgIsShow 判断控制 一次只抛第一个错误信息\n      if (!config.content) return\n      message.error(config.content, config.duration)\n      // this.msgIsShow = true\n      // this._ErrorTimer = setTimeout(() => {\n      //   this.msgIsShow = false\n      //   message.error(config.content, config.duration)\n      // }, 2000)\n    }\n  }\n}\n"]}]}