{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/product/course/mini-schedule/inbatch-add.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/product/course/mini-schedule/inbatch-add.vue","mtime":1600926556397},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport moment from 'moment'\nimport AddCourse from './add-course'\nimport CourseCardPopover from './course-card-popover'\nimport { SmallCourseScheduleService } from '@/views/pages/shop/product/course/schedule/small-course/service#/schedule.service'\nimport { SmallCourseScheduleCommonService } from '@/views/pages/shop/product/course/schedule/small-course/service#/common.service'\nimport { InbatchAddService } from './inbatch-add.service'\nimport ScheduleSmallCourseEditCourse from '@/views/biz-modals/schedule/small-course/edit-course'\nimport ScheduleSmallCourseSubmitCourse from '@/views/biz-modals/schedule/small-course/submit-course'\nimport { MessageService } from '@/services/message.service'\nimport { DELETE_TYPE } from '@/constants/stat/course'\nimport { SCHEDULE_CODE } from '@/constants/course/small-course'\nimport { cloneDeep } from 'lodash-es'\nimport { ruleOptions } from './inbatch-add.config'\nexport default {\n  name: 'AddScheduleInBatch',\n  bem: {\n    b: 'page-shop-schedule-inbatch-add'\n  },\n  modals: {\n    ScheduleSmallCourseEditCourse,\n    ScheduleSmallCourseSubmitCourse\n  },\n  serviceInject() {\n    return {\n      inbatchAddService: InbatchAddService,\n      smallCourseScheduleService: SmallCourseScheduleService,\n      smallCourseScheduleCommonService: SmallCourseScheduleCommonService,\n      msg: MessageService\n    }\n  },\n  rxState() {\n    const scsc = this.smallCourseScheduleCommonService\n    return {\n      courseSmallCourseOptions: scsc.courseSmallCourseOptions$\n    }\n  },\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      SCHEDULE_CODE,\n      showList: false,\n      form,\n      decorators,\n      moment: moment,\n      customizeShow: false,\n      disabledAddCourseBtn: true,\n      disabledCustomBtn: true,\n      coachId: undefined,\n      editScheduleCycleFlag: false,\n      courseId: '',\n      cycle_type: 1,\n      select_cycle_type: 1,\n      start_date: '',\n      end_date: '',\n      picker_start_date: '',\n      picker_end_date: '',\n      smallPickerList: [],\n      pickerList: [],\n      disabledDate: [],\n      tipsText: [],\n      tipsCourseNum: [],\n      scheduleIdList: [],\n      smallCourseInfo: {},\n      weekList: [\n        { weekId: 'week1', week: 1, date: '周一' },\n        { weekId: 'week2', week: 2, date: '周二' },\n        { weekId: 'week3', week: 3, date: '周三' },\n        { weekId: 'week4', week: 4, date: '周四' },\n        { weekId: 'week5', week: 5, date: '周五' },\n        { weekId: 'week6', week: 6, date: '周六' },\n        { weekId: 'week0', week: 0, date: '周日' }\n      ],\n      filterDate: {},\n      scheduleList: [\n        {\n          course_time: []\n        }\n      ],\n      customizeScheduleList: []\n    }\n  },\n  computed: {\n    addScheduleFlag() {\n      return this.end_date !== this.picker_end_date\n    }\n  },\n  created() {\n    this.filterDateList(this.scheduleList)\n    this.pickerList.push([moment(), moment()])\n  },\n  methods: {\n    dealScheduleDate() {\n      this.pickerList = []\n      this.scheduleList.forEach((item, index) => {\n        this.pickerList.push([\n          moment(item.cycle_start_date),\n          moment(item.cycle_end_date)\n        ])\n      })\n      this.picker_end_date = this.scheduleList[\n        this.scheduleList.length - 1\n      ].cycle_end_date\n    },\n    initScheduleDate() {\n      const smallCourseInfo = this.smallCourseInfo\n      this.pickerList = []\n      this.pickerList.push([\n        moment(smallCourseInfo.course_begin_time),\n        moment(smallCourseInfo.course_end_time)\n      ])\n      this.end_date = moment(smallCourseInfo.course_end_time).format(\n        'YYYY-MM-DD'\n      )\n      this.picker_end_date = moment(smallCourseInfo.course_end_time).format(\n        'YYYY-MM-DD'\n      )\n    },\n    initScheduleCourse() {\n      this.customizeScheduleList = []\n      this.scheduleList = [\n        {\n          course_time: []\n        }\n      ]\n      this.filterDateList(this.scheduleList)\n    },\n    onChangeCourse(value) {\n      this.getCourseInfo(value)\n    },\n    getCourseInfo(value) {\n      this.courseSmallCourseOptions.forEach((item, index) => {\n        if (item.course_id === value) {\n          this.smallCourseInfo = item\n        }\n      })\n      console.log('课程信息')\n      console.log(this.smallCourseInfo)\n      this.start_date = this.smallCourseInfo.course_begin_time\n      this.end_date = this.smallCourseInfo.course_end_time\n      const start_date = this.start_date\n      const end_date = this.end_date\n      this.smallPickerList = [moment(start_date), moment(end_date)]\n      this.courseId = value\n      const params = {}\n      params.course_id = this.courseId\n      this.getScheduleInBatch(params)\n      this.smallCourseScheduleCommonService.getBindCoachList(value).subscribe()\n    },\n    onChangeScheduleType(value) {\n      if (!this.courseId) {\n        this.select_cycle_type = value\n        this.cycle_type = value\n        return\n      }\n      const params = {\n        course_id: this.courseId,\n        cycle_type: value\n      }\n      let hasCoursesFlag = false\n      if (this.cycle_type === 1) {\n        this.scheduleList.forEach((item, index) => {\n          if (item.course_time.length > 0) {\n            hasCoursesFlag = true\n          }\n        })\n      }\n      if (hasCoursesFlag) {\n        this.$confirm({\n          title: '提示',\n          content: `切换为自定义排课方式后，若需切换回周期排课，已排课程无法保存，确认切换？`,\n          onCancel: () => {\n            this.select_cycle_type = 1\n          },\n          onOk: () => {\n            this.getScheduleInBatch(params, value)\n          }\n        })\n      } else {\n        this.getScheduleInBatch(params, value)\n      }\n    },\n    getScheduleInBatch(params, changeTyps) {\n      this.smallCourseScheduleService.getScheduleInBatch(params).subscribe(\n        res => {\n          this.disabledAddCourseBtn = false\n          this.disabledCustomBtn = false\n          this.initScheduleList(res.list, res.cycle_type, changeTyps)\n        },\n        err => {\n          if (err.response.code === SCHEDULE_CODE.ERR) {\n            this.select_cycle_type = 2\n            this.$warning({\n              title: '提示',\n              okText: '我知道了',\n              content: `已有排课信息，无法切换为周期排课，若需切换，请先删除排课信息`,\n              onOk: () => {}\n            })\n          }\n        }\n      )\n    },\n    initScheduleList(list, type, changeTyps) {\n      if (type) {\n        this.cycle_type = type\n        this.select_cycle_type = type\n      }\n      if (changeTyps) {\n        this.cycle_type = changeTyps\n        this.select_cycle_type = changeTyps\n      }\n      if (!type && !changeTyps) {\n        this.cycle_type = 1\n        this.select_cycle_type = 1\n      }\n      if (!list.length && type === 0) {\n        this.initScheduleDate()\n        this.initScheduleCourse()\n        return\n      }\n      if (list.length && this.cycle_type === 1) {\n        this.scheduleList = list\n        this.dealScheduleDate(this.scheduleList)\n        this.filterDateList(this.scheduleList)\n      } else if (!list.length && this.cycle_type === 1) {\n        this.initScheduleDate()\n        this.initScheduleCourse()\n      } else if (this.cycle_type === 2 && list.length) {\n        this.initScheduleCourse()\n        this.customizeScheduleList = list\n      }\n    },\n    onChangeRangePicker(date, dateString, pickerIndex) {\n      if (!this.courseId) {\n        return\n      }\n      let pickerFlag = false\n      this.pickerList.forEach((item, index) => {\n        if (pickerIndex === index) {\n          return\n        } else {\n          if (\n            (date[0] >= item[0] && date[0] <= item[1]) ||\n            (date[1] >= item[0] && date[1] <= item[1])\n          ) {\n            this.msg.error({ content: '排课周期时间不能有交叉重叠！' })\n            pickerFlag = true\n            return false\n          }\n        }\n      })\n      if (!pickerFlag) {\n        if (\n          this.cycle_type === 1 &&\n          this.scheduleList[pickerIndex].course_time.length > 0\n        ) {\n          this.$confirm({\n            title: '提示',\n            content: `修改后会清空当前周期下的已有${this.$c(\n              'small_course'\n            )}排期，请确认修改`,\n            onCancel: () => {\n              const oldDate = this.pickerList[pickerIndex]\n              this.pickerList.splice(pickerIndex, 1, oldDate)\n            },\n            onOk: () => {\n              this.onDeleteCourseScheduleCycle([date[0], date[1]], pickerIndex)\n            }\n          })\n        } else {\n          this.picker_end_date = date[1].format('YYYY-MM-DD')\n          this.pickerList.splice(pickerIndex, 1, date)\n        }\n      }\n    },\n    disabledEndDate(current) {\n      return (\n        (current && current > moment(this.end_date)) ||\n        current < moment(this.start_date)\n      )\n    },\n    getScheduleTips(index, text, courseNum) {\n      this.tipsText[index] = text\n      this.tipsCourseNum[index] = courseNum\n    },\n    filterDateList(dateList) {\n      let list = []\n      dateList.forEach((item, dateIndex) => {\n        let listItemCard = {}\n        let courseNum = 0\n        let text = ''\n        item.course_time.forEach((weekItem, index) => {\n          if (weekItem.week || weekItem.week == 0) {\n            if (weekItem.week == 0) {\n              text += this.weekList[this.weekList.length - 1].date\n            } else {\n              text += this.weekList[weekItem.week - 1].date\n            }\n            weekItem.list.forEach((courseItem, index) => {\n              courseItem.show = false\n              if (!courseItem.conflict) {\n                courseItem.conflict = 0\n                courseItem.conflictList = []\n                text += courseItem.start_time + ','\n                courseNum += courseItem.schedule_ids.split(',').length\n              }\n            })\n            listItemCard[weekItem.week] = weekItem.list\n            listItemCard[weekItem.week][0].show = false\n          }\n        })\n        this.getScheduleTips(dateIndex, text, courseNum)\n        for (let i = 0; i <= 6; i++) {\n          if (!listItemCard[i]) {\n            listItemCard[i] = []\n            let item = {}\n            item.show = false\n            listItemCard[i].push(item)\n          }\n        }\n        list.push(listItemCard)\n      })\n      this.filterDate = list\n    },\n    dealCourtSiteName(courtName, CourtSiteName) {\n      return CourtSiteName ? courtName + ' / ' + CourtSiteName : courtName\n    },\n    createCourseWeek(courseItem, cycleIndex) {\n      let courseWeek = {}\n      courseWeek.week = courseItem.week\n      courseWeek.list = []\n      courseWeek.list.push(courseItem)\n      this.scheduleList[cycleIndex].course_time.push(courseWeek)\n      this.filterDateList(this.scheduleList)\n    },\n    pushCourseInfo(cycleIndex, conflict, info, list) {\n      let courseItem = cloneDeep(info)\n      courseItem.court_site_id = info.court_site_id || 0\n      courseItem.conflict = conflict\n      courseItem.conflictList = list\n      if (!this.scheduleList[cycleIndex].course_time.length) {\n        this.createCourseWeek(courseItem, cycleIndex)\n        return\n      }\n      let findWeekFlag = false\n      this.scheduleList[cycleIndex].course_time.forEach((item, index) => {\n        if (item.week == courseItem.week) {\n          findWeekFlag = true\n          item.list.push(courseItem)\n          this.filterDateList(this.scheduleList)\n        }\n      })\n      if (!findWeekFlag) {\n        this.createCourseWeek(courseItem, cycleIndex)\n      }\n    },\n    pushCustomCourseInfo(info) {\n      const courseInfo = cloneDeep(info)\n      this.customizeScheduleList.push(courseInfo)\n    },\n    onEditCourseSchedule(item, cycleIndex, positionIndex) {\n      const cycle = this.pickerList[cycleIndex]\n      const cycle_type = this.cycle_type\n      const courseInfo = this.smallCourseInfo\n      this.$modalRouter.push({\n        name: 'schedule-small-course-edit-course',\n        props: {\n          item,\n          cycleIndex,\n          cycle,\n          positionIndex,\n          cycle_type,\n          courseInfo\n        },\n        on: {\n          editCourse: (cycleIndex, positionIndex, conflict, info, list) => {\n            info.conflictList = list\n            info.conflict = conflict\n            this.scheduleList[cycleIndex].course_time.forEach(\n              (dayItems, index) => {\n                if (dayItems.week == info.week) {\n                  dayItems.list.splice(positionIndex, 1, info)\n                  this.filterDateList(this.scheduleList)\n                  return\n                }\n              }\n            )\n          }\n        }\n      })\n    },\n    onEditCustomSchedule(item, positionIndex) {\n      const cycle = this.pickerList[0]\n      const cycle_type = this.cycle_type\n      const courseInfo = this.smallCourseInfo\n      this.$modalRouter.push({\n        name: 'schedule-small-course-edit-course',\n        props: { item, cycle, positionIndex, cycle_type, courseInfo },\n        on: {\n          editCustomCourse: (positionIndex, info) => {\n            this.customizeScheduleList.splice(positionIndex, 1, info)\n            return\n          }\n        }\n      })\n    },\n    onDeleteCourseSchedule(item, cycleIndex, positionIndex) {\n      let params = {}\n      params = item\n      params.del_type = DELETE_TYPE.SINGLE\n      this.smallCourseScheduleService.cancelCycle(params).subscribe(res => {\n        this.scheduleList[cycleIndex].course_time.forEach((dayItems, index) => {\n          if (dayItems.week == item.week) {\n            dayItems.list.splice(positionIndex, 1)\n            if (dayItems.list.length === 0) {\n              this.scheduleList[cycleIndex].course_time.splice(index, 1)\n            }\n            this.filterDateList(this.scheduleList)\n            return\n          }\n        })\n      })\n    },\n    onDeleteCourseScheduleCycle(dateList, cycleIndex) {\n      let params = {}\n      const cycleDate = this.pickerList[cycleIndex]\n      params.cycle_start_date = moment(cycleDate[0]).format('YYYY-MM-DD')\n      params.cycle_end_date = moment(cycleDate[1]).format('YYYY-MM-DD')\n      params.course_id = this.smallCourseInfo.course_id\n      params.del_type = DELETE_TYPE.CYCLE\n      this.smallCourseScheduleService.cancelCycle(params).subscribe(res => {\n        this.scheduleList[cycleIndex].course_time = []\n        this.pickerList.splice(cycleIndex, 1, dateList)\n        this.picker_end_date = this.pickerList[\n          this.pickerList.length - 1\n        ][1].format('YYYY-MM-DD')\n        this.filterDateList(this.scheduleList)\n        this.resetCourseNumTips('single', cycleIndex)\n      })\n    },\n    onDealDeleteResult(cycleIndex) {\n      this.scheduleList.splice(cycleIndex, 1)\n      this.pickerList.splice(cycleIndex, 1)\n      this.picker_end_date = this.pickerList[\n        this.pickerList.length - 1\n      ][1].format('YYYY-MM-DD')\n    },\n    onDeleteCycleSchedule(cycleIndex) {\n      if (this.scheduleList.length <= 1) {\n        return\n      }\n      if (this.scheduleList[cycleIndex].course_time.length <= 0) {\n        this.onDealDeleteResult(cycleIndex)\n        return\n      } else {\n        this.$confirm({\n          title: '提示',\n          content: `修改后会清空当前周期下的已有${this.$c(\n            'coach'\n          )}排期，请确认修改`,\n          onCancel: () => {},\n          onOk: () => {\n            let params = {}\n            const cycleDate = this.pickerList[cycleIndex]\n            params.cycle_start_date = moment(cycleDate[0]).format('YYYY-MM-DD')\n            params.cycle_end_date = moment(cycleDate[1]).format('YYYY-MM-DD')\n            params.course_id = this.smallCourseInfo.course_id\n            params.del_type = DELETE_TYPE.CYCLE\n            this.smallCourseScheduleService\n              .cancelCycle(params)\n              .subscribe(res => {\n                this.onDealDeleteResult(cycleIndex)\n              })\n            this.resetCourseNumTips('single', cycleIndex)\n          }\n        })\n      }\n    },\n    onDeleteCustomSchedule(item, index) {\n      this.smallCourseScheduleService.cancelCustom(item.id).subscribe(res => {\n        this.customizeScheduleList.splice(index, 1)\n      })\n    },\n    onDeleteScheduleAll() {\n      let hasCoursesFlag = false\n      if (this.cycle_type === 2 && this.customizeScheduleList > 0) {\n        hasCoursesFlag = true\n      }\n      if (this.cycle_type === 1) {\n        this.scheduleList.forEach((item, index) => {\n          if (item.course_time.length > 0) {\n            hasCoursesFlag = true\n          }\n        })\n      }\n      if (!hasCoursesFlag) {\n        this.onClickGoBack()\n        return\n      } else {\n        this.$confirm({\n          title: '提示',\n          content: `取消后会清空当前课程下所有未发布的排期，请确认已完成排课`,\n          onCancel: () => {},\n          onOk: () => {\n            if (this.cycle_type === 1) {\n              let params = {}\n              params.course_id = this.smallCourseInfo.course_id\n              params.del_type = DELETE_TYPE.ALL_CYCLE\n              this.smallCourseScheduleService\n                .cancelCycle(params)\n                .subscribe(res => {\n                  this.resetCourseNumTips('all')\n                  this.onClickGoBack()\n                })\n            } else if (this.cycle_type === 2) {\n              const params = {}\n              params.course_id = this.smallCourseInfo.course_id\n              params.schedule_ids = []\n              this.customizeScheduleList.forEach((item, index) => {\n                params.schedule_ids.push(item.id)\n              })\n              this.smallCourseScheduleService\n                .cancelCustomAll(params)\n                .subscribe(res => {\n                  this.onClickGoBack()\n                })\n            } else {\n              this.onClickGoBack()\n            }\n          }\n        })\n      }\n    },\n    resetCourseNumTips(type, index) {\n      if (type === 'all') {\n        this.tipsCourseNum.splice(0, this.tipsCourseNum.length)\n      } else {\n        this.tipsCourseNum.splice(index, 1)\n      }\n    },\n    addScheduleWeek() {\n      this.pickerList.push([\n        moment(this.picker_end_date).add(1, 'days'),\n        moment(this.end_date)\n      ])\n      this.picker_end_date = this.end_date\n      let item = {}\n      item.course_time = []\n      this.scheduleList.push(item)\n      this.filterDateList(this.scheduleList)\n    },\n    onClickSaveSchedule() {\n      if (\n        (this.cycle_type === 1 &&\n          this.scheduleList[0].course_time.length <= 0) ||\n        (this.cycle_type === 2 && this.customizeScheduleList <= 0)\n      ) {\n        this.msg.warning({\n          content: '请先新增排期'\n        })\n        return\n      }\n      const cycle_type = this.cycle_type\n      const courseInfo = this.smallCourseInfo\n      let scheduleList\n      if (cycle_type === 1) {\n        scheduleList = this.tipsCourseNum\n      } else {\n        scheduleList = this.customizeScheduleList\n      }\n      this.$modalRouter.push({\n        name: 'schedule-small-course-submit-course',\n        props: { scheduleList, cycle_type, courseInfo }\n      })\n    },\n    onClickGoBack() {\n      let weekOfday = moment().format('E')\n      let start_date = moment()\n        .subtract(weekOfday - 1, 'days')\n        .format('YYYY-MM-DD')\n      let end_date = moment()\n        .add(7 - weekOfday, 'days')\n        .format('YYYY-MM-DD')\n      this.$router.push({\n        path: '/shop/product/course/schedule/small-course/small-course',\n        query: {\n          start_date,\n          end_date\n        }\n      })\n    }\n  },\n  components: {\n    AddCourse,\n    CourseCardPopover\n  }\n}\n",{"version":3,"sources":["inbatch-add.vue"],"names":[],"mappingsfile":"inbatch-add.vue","sourceRoot":"src/views/pages/shop/product/course/mini-schedule","sourcesContent":["<template>\n  <st-panel app>\n    <div :class=\"b()\">\n      <st-form :class=\"b('head')\" labelWidth=\"80px\" :form=\"form\">\n        <st-form-item :label=\"`${$c('small_course')}`\" required>\n          <a-select\n            placeholder=\"请选择\"\n            @change=\"onChangeCourse\"\n            v-decorator=\"decorators.course_id\"\n          >\n            <a-select-option\n              v-for=\"course in courseSmallCourseOptions\"\n              :key=\"course.course_id\"\n              :value=\"+course.course_id\"\n            >\n              {{ course.course_name }}\n            </a-select-option>\n          </a-select>\n        </st-form-item>\n        <st-form-item\n          label=\"开班时间\"\n          v-if=\"smallCourseInfo.course_time_show_str\"\n        >\n          {{ smallCourseInfo.course_time_show_str }}\n        </st-form-item>\n        <st-form-item required label=\"排课方式\">\n          <a-select\n            placeholder=\"请选择\"\n            @change=\"onChangeScheduleType\"\n            v-model=\"select_cycle_type\"\n          >\n            <a-select-option :key=\"1\" :value=\"1\">\n              周排课方式\n            </a-select-option>\n            <a-select-option :key=\"2\" :value=\"2\">\n              自定义排课方式\n            </a-select-option>\n          </a-select>\n        </st-form-item>\n      </st-form>\n      <div :class=\"b('schedule')\">\n        <div v-if=\"cycle_type == 1\">\n          <st-container v-for=\"(scheduleItem, i) in scheduleList\" :key=\"i\">\n            <st-form labelWidth=\"80px\">\n              <st-form-item\n                required\n                label=\"上课周期\"\n                :class=\"b('select__date')\"\n              >\n                <a-range-picker\n                  @change=\"onChangeRangePicker($event, $event, i)\"\n                  :value=\"pickerList[i]\"\n                  :disabledDate=\"disabledEndDate\"\n                  format=\"YYYY-MM-DD\"\n                ></a-range-picker>\n              </st-form-item>\n              <div\n                :class=\"\n                  scheduleList.length > 1\n                    ? [b('delete-btn'), b('delete')]\n                    : [b('delete-btn'), b('disabled-delete')]\n                \"\n                @click=\"onDeleteCycleSchedule(i)\"\n              >\n                <st-icon type=\"delete\" class=\"delete-course-btn\"></st-icon>\n                删除排期\n              </div>\n            </st-form>\n            <div :class=\"b('schedule__table')\">\n              <div\n                :class=\"b('schedule__item')\"\n                v-for=\"item in weekList\"\n                :key=\"item.weekId\"\n              >\n                <st-t4 class=\"mg-b12\">{{ item.date }}</st-t4>\n                <div\n                  v-if=\"\n                    filterDate[i][item.week][0].week ||\n                      filterDate[i][item.week][0].week == 0\n                  \"\n                >\n                  <div\n                    :class=\"b('schedule__card')\"\n                    v-for=\"(cardItem, index) in filterDate[i][item.week]\"\n                    :key=\"cardItem.schedule_ids\"\n                  >\n                    <course-card-popover\n                      :cardItem=\"cardItem\"\n                      @onEditCourse=\"onEditCourseSchedule(cardItem, i, index)\"\n                      @onDeleteCourse=\"\n                        onDeleteCourseSchedule(cardItem, i, index)\n                      \"\n                    ></course-card-popover>\n                  </div>\n                </div>\n                <add-course\n                  @addCourse=\"pushCourseInfo\"\n                  :item=\"filterDate[i][item.week]\"\n                  :disabledAddCourseBtn=\"disabledAddCourseBtn\"\n                  :cycleIndex=\"i\"\n                  :week=\"item.week\"\n                  :cycle=\"pickerList[i]\"\n                  :cycle_type=\"cycle_type\"\n                  :courseInfo=\"smallCourseInfo\"\n                  :editScheduleCycleFlag=\"editScheduleCycleFlag\"\n                ></add-course>\n              </div>\n            </div>\n            <div :class=\"b('schedule__tips')\" v-if=\"pickerList.length\">\n              即：上课时间为\n              <span class=\"schedule__tips-date\">\n                {{ pickerList[i][0].format('YYYY/MM/DD') }}~{{\n                  pickerList[i][1].format('YYYY/MM/DD')\n                }}\n              </span>\n              <span class=\"schedule__tips-time\">{{ tipsText[i] }}</span>\n              共\n              <span class=\"schedule__tips-num\" v-if=\"tipsCourseNum[i]\">\n                {{ tipsCourseNum[i] }}\n              </span>\n              节\n            </div>\n          </st-container>\n          <div :class=\"b('add-schedule-btn')\">\n            <a v-if=\"addScheduleFlag\" @click=\"addScheduleWeek\">\n              新增上课周期\n            </a>\n            <span v-else>新增上课周期</span>\n          </div>\n        </div>\n        <div v-else>\n          <st-container>\n            <st-form labelWidth=\"80px\">\n              <st-form-item\n                required\n                label=\"上课周期\"\n                :class=\"b('select__date')\"\n              >\n                <span>\n                  {{ smallCourseInfo.course_begin_time }} ~\n                  {{ smallCourseInfo.course_end_time }}\n                </span>\n              </st-form-item>\n            </st-form>\n            <div :class=\"b('schedule__table-custom')\">\n              <div\n                :class=\"b('schedule__item-custom')\"\n                v-for=\"(item, index) in customizeScheduleList\"\n                :key=\"item.id\"\n              >\n                <div class=\"eidt-current-course-btns\">\n                  <a @click=\"onEditCustomSchedule(item, index)\">\n                    <st-icon type=\"edit\" class=\"edit-course-btn\"></st-icon>\n                  </a>\n                  <a @click=\"onDeleteCustomSchedule(item, index)\">\n                    <st-icon type=\"delete\" class=\"delete-course-btn\"></st-icon>\n                  </a>\n                </div>\n                <span class=\"time\">\n                  <st-icon type=\"timer\"></st-icon>\n                  {{ item.start_time }} -\n                  {{ item.end_time }}\n                </span>\n                <st-t3 class=\"course__name\">\n                  {{ item.current_course_name }}\n                </st-t3>\n                <div class=\"course-message\">\n                  <p class=\"course__coach\">\n                    {{ $c('coach') }}：\n                    <span>{{ item.coach_name }}</span>\n                  </p>\n                  <p class=\"course__scene mg-l16\">\n                    场地：\n                    <span>\n                      {{\n                        dealCourtSiteName(item.court_name, item.court_site_name)\n                      }}\n                    </span>\n                  </p>\n                </div>\n              </div>\n              <add-course\n                :customizeShow=\"customizeShow\"\n                :disabledCustomBtn=\"disabledCustomBtn\"\n                @addCustomCourse=\"pushCustomCourseInfo\"\n                :cycle=\"smallPickerList\"\n                :cycle_type=\"cycle_type\"\n                :courseInfo=\"smallCourseInfo\"\n                :editScheduleCycleFlag=\"editScheduleCycleFlag\"\n              ></add-course>\n            </div>\n          </st-container>\n        </div>\n        <div :class=\"b('save-schedule-btn')\">\n          <st-button @click=\"onDeleteScheduleAll\">\n            取消\n          </st-button>\n          <st-button type=\"primary\" @click=\"onClickSaveSchedule\" class=\"mg-l12\">\n            完成排课\n          </st-button>\n        </div>\n      </div>\n    </div>\n  </st-panel>\n</template>\n\n<script>\nimport moment from 'moment'\nimport AddCourse from './add-course'\nimport CourseCardPopover from './course-card-popover'\nimport { SmallCourseScheduleService } from '@/views/pages/shop/product/course/schedule/small-course/service#/schedule.service'\nimport { SmallCourseScheduleCommonService } from '@/views/pages/shop/product/course/schedule/small-course/service#/common.service'\nimport { InbatchAddService } from './inbatch-add.service'\nimport ScheduleSmallCourseEditCourse from '@/views/biz-modals/schedule/small-course/edit-course'\nimport ScheduleSmallCourseSubmitCourse from '@/views/biz-modals/schedule/small-course/submit-course'\nimport { MessageService } from '@/services/message.service'\nimport { DELETE_TYPE } from '@/constants/stat/course'\nimport { SCHEDULE_CODE } from '@/constants/course/small-course'\nimport { cloneDeep } from 'lodash-es'\nimport { ruleOptions } from './inbatch-add.config'\nexport default {\n  name: 'AddScheduleInBatch',\n  bem: {\n    b: 'page-shop-schedule-inbatch-add'\n  },\n  modals: {\n    ScheduleSmallCourseEditCourse,\n    ScheduleSmallCourseSubmitCourse\n  },\n  serviceInject() {\n    return {\n      inbatchAddService: InbatchAddService,\n      smallCourseScheduleService: SmallCourseScheduleService,\n      smallCourseScheduleCommonService: SmallCourseScheduleCommonService,\n      msg: MessageService\n    }\n  },\n  rxState() {\n    const scsc = this.smallCourseScheduleCommonService\n    return {\n      courseSmallCourseOptions: scsc.courseSmallCourseOptions$\n    }\n  },\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      SCHEDULE_CODE,\n      showList: false,\n      form,\n      decorators,\n      moment: moment,\n      customizeShow: false,\n      disabledAddCourseBtn: true,\n      disabledCustomBtn: true,\n      coachId: undefined,\n      editScheduleCycleFlag: false,\n      courseId: '',\n      cycle_type: 1,\n      select_cycle_type: 1,\n      start_date: '',\n      end_date: '',\n      picker_start_date: '',\n      picker_end_date: '',\n      smallPickerList: [],\n      pickerList: [],\n      disabledDate: [],\n      tipsText: [],\n      tipsCourseNum: [],\n      scheduleIdList: [],\n      smallCourseInfo: {},\n      weekList: [\n        { weekId: 'week1', week: 1, date: '周一' },\n        { weekId: 'week2', week: 2, date: '周二' },\n        { weekId: 'week3', week: 3, date: '周三' },\n        { weekId: 'week4', week: 4, date: '周四' },\n        { weekId: 'week5', week: 5, date: '周五' },\n        { weekId: 'week6', week: 6, date: '周六' },\n        { weekId: 'week0', week: 0, date: '周日' }\n      ],\n      filterDate: {},\n      scheduleList: [\n        {\n          course_time: []\n        }\n      ],\n      customizeScheduleList: []\n    }\n  },\n  computed: {\n    addScheduleFlag() {\n      return this.end_date !== this.picker_end_date\n    }\n  },\n  created() {\n    this.filterDateList(this.scheduleList)\n    this.pickerList.push([moment(), moment()])\n  },\n  methods: {\n    dealScheduleDate() {\n      this.pickerList = []\n      this.scheduleList.forEach((item, index) => {\n        this.pickerList.push([\n          moment(item.cycle_start_date),\n          moment(item.cycle_end_date)\n        ])\n      })\n      this.picker_end_date = this.scheduleList[\n        this.scheduleList.length - 1\n      ].cycle_end_date\n    },\n    initScheduleDate() {\n      const smallCourseInfo = this.smallCourseInfo\n      this.pickerList = []\n      this.pickerList.push([\n        moment(smallCourseInfo.course_begin_time),\n        moment(smallCourseInfo.course_end_time)\n      ])\n      this.end_date = moment(smallCourseInfo.course_end_time).format(\n        'YYYY-MM-DD'\n      )\n      this.picker_end_date = moment(smallCourseInfo.course_end_time).format(\n        'YYYY-MM-DD'\n      )\n    },\n    initScheduleCourse() {\n      this.customizeScheduleList = []\n      this.scheduleList = [\n        {\n          course_time: []\n        }\n      ]\n      this.filterDateList(this.scheduleList)\n    },\n    onChangeCourse(value) {\n      this.getCourseInfo(value)\n    },\n    getCourseInfo(value) {\n      this.courseSmallCourseOptions.forEach((item, index) => {\n        if (item.course_id === value) {\n          this.smallCourseInfo = item\n        }\n      })\n      console.log('课程信息')\n      console.log(this.smallCourseInfo)\n      this.start_date = this.smallCourseInfo.course_begin_time\n      this.end_date = this.smallCourseInfo.course_end_time\n      const start_date = this.start_date\n      const end_date = this.end_date\n      this.smallPickerList = [moment(start_date), moment(end_date)]\n      this.courseId = value\n      const params = {}\n      params.course_id = this.courseId\n      this.getScheduleInBatch(params)\n      this.smallCourseScheduleCommonService.getBindCoachList(value).subscribe()\n    },\n    onChangeScheduleType(value) {\n      if (!this.courseId) {\n        this.select_cycle_type = value\n        this.cycle_type = value\n        return\n      }\n      const params = {\n        course_id: this.courseId,\n        cycle_type: value\n      }\n      let hasCoursesFlag = false\n      if (this.cycle_type === 1) {\n        this.scheduleList.forEach((item, index) => {\n          if (item.course_time.length > 0) {\n            hasCoursesFlag = true\n          }\n        })\n      }\n      if (hasCoursesFlag) {\n        this.$confirm({\n          title: '提示',\n          content: `切换为自定义排课方式后，若需切换回周期排课，已排课程无法保存，确认切换？`,\n          onCancel: () => {\n            this.select_cycle_type = 1\n          },\n          onOk: () => {\n            this.getScheduleInBatch(params, value)\n          }\n        })\n      } else {\n        this.getScheduleInBatch(params, value)\n      }\n    },\n    getScheduleInBatch(params, changeTyps) {\n      this.smallCourseScheduleService.getScheduleInBatch(params).subscribe(\n        res => {\n          this.disabledAddCourseBtn = false\n          this.disabledCustomBtn = false\n          this.initScheduleList(res.list, res.cycle_type, changeTyps)\n        },\n        err => {\n          if (err.response.code === SCHEDULE_CODE.ERR) {\n            this.select_cycle_type = 2\n            this.$warning({\n              title: '提示',\n              okText: '我知道了',\n              content: `已有排课信息，无法切换为周期排课，若需切换，请先删除排课信息`,\n              onOk: () => {}\n            })\n          }\n        }\n      )\n    },\n    initScheduleList(list, type, changeTyps) {\n      if (type) {\n        this.cycle_type = type\n        this.select_cycle_type = type\n      }\n      if (changeTyps) {\n        this.cycle_type = changeTyps\n        this.select_cycle_type = changeTyps\n      }\n      if (!type && !changeTyps) {\n        this.cycle_type = 1\n        this.select_cycle_type = 1\n      }\n      if (!list.length && type === 0) {\n        this.initScheduleDate()\n        this.initScheduleCourse()\n        return\n      }\n      if (list.length && this.cycle_type === 1) {\n        this.scheduleList = list\n        this.dealScheduleDate(this.scheduleList)\n        this.filterDateList(this.scheduleList)\n      } else if (!list.length && this.cycle_type === 1) {\n        this.initScheduleDate()\n        this.initScheduleCourse()\n      } else if (this.cycle_type === 2 && list.length) {\n        this.initScheduleCourse()\n        this.customizeScheduleList = list\n      }\n    },\n    onChangeRangePicker(date, dateString, pickerIndex) {\n      if (!this.courseId) {\n        return\n      }\n      let pickerFlag = false\n      this.pickerList.forEach((item, index) => {\n        if (pickerIndex === index) {\n          return\n        } else {\n          if (\n            (date[0] >= item[0] && date[0] <= item[1]) ||\n            (date[1] >= item[0] && date[1] <= item[1])\n          ) {\n            this.msg.error({ content: '排课周期时间不能有交叉重叠！' })\n            pickerFlag = true\n            return false\n          }\n        }\n      })\n      if (!pickerFlag) {\n        if (\n          this.cycle_type === 1 &&\n          this.scheduleList[pickerIndex].course_time.length > 0\n        ) {\n          this.$confirm({\n            title: '提示',\n            content: `修改后会清空当前周期下的已有${this.$c(\n              'small_course'\n            )}排期，请确认修改`,\n            onCancel: () => {\n              const oldDate = this.pickerList[pickerIndex]\n              this.pickerList.splice(pickerIndex, 1, oldDate)\n            },\n            onOk: () => {\n              this.onDeleteCourseScheduleCycle([date[0], date[1]], pickerIndex)\n            }\n          })\n        } else {\n          this.picker_end_date = date[1].format('YYYY-MM-DD')\n          this.pickerList.splice(pickerIndex, 1, date)\n        }\n      }\n    },\n    disabledEndDate(current) {\n      return (\n        (current && current > moment(this.end_date)) ||\n        current < moment(this.start_date)\n      )\n    },\n    getScheduleTips(index, text, courseNum) {\n      this.tipsText[index] = text\n      this.tipsCourseNum[index] = courseNum\n    },\n    filterDateList(dateList) {\n      let list = []\n      dateList.forEach((item, dateIndex) => {\n        let listItemCard = {}\n        let courseNum = 0\n        let text = ''\n        item.course_time.forEach((weekItem, index) => {\n          if (weekItem.week || weekItem.week == 0) {\n            if (weekItem.week == 0) {\n              text += this.weekList[this.weekList.length - 1].date\n            } else {\n              text += this.weekList[weekItem.week - 1].date\n            }\n            weekItem.list.forEach((courseItem, index) => {\n              courseItem.show = false\n              if (!courseItem.conflict) {\n                courseItem.conflict = 0\n                courseItem.conflictList = []\n                text += courseItem.start_time + ','\n                courseNum += courseItem.schedule_ids.split(',').length\n              }\n            })\n            listItemCard[weekItem.week] = weekItem.list\n            listItemCard[weekItem.week][0].show = false\n          }\n        })\n        this.getScheduleTips(dateIndex, text, courseNum)\n        for (let i = 0; i <= 6; i++) {\n          if (!listItemCard[i]) {\n            listItemCard[i] = []\n            let item = {}\n            item.show = false\n            listItemCard[i].push(item)\n          }\n        }\n        list.push(listItemCard)\n      })\n      this.filterDate = list\n    },\n    dealCourtSiteName(courtName, CourtSiteName) {\n      return CourtSiteName ? courtName + ' / ' + CourtSiteName : courtName\n    },\n    createCourseWeek(courseItem, cycleIndex) {\n      let courseWeek = {}\n      courseWeek.week = courseItem.week\n      courseWeek.list = []\n      courseWeek.list.push(courseItem)\n      this.scheduleList[cycleIndex].course_time.push(courseWeek)\n      this.filterDateList(this.scheduleList)\n    },\n    pushCourseInfo(cycleIndex, conflict, info, list) {\n      let courseItem = cloneDeep(info)\n      courseItem.court_site_id = info.court_site_id || 0\n      courseItem.conflict = conflict\n      courseItem.conflictList = list\n      if (!this.scheduleList[cycleIndex].course_time.length) {\n        this.createCourseWeek(courseItem, cycleIndex)\n        return\n      }\n      let findWeekFlag = false\n      this.scheduleList[cycleIndex].course_time.forEach((item, index) => {\n        if (item.week == courseItem.week) {\n          findWeekFlag = true\n          item.list.push(courseItem)\n          this.filterDateList(this.scheduleList)\n        }\n      })\n      if (!findWeekFlag) {\n        this.createCourseWeek(courseItem, cycleIndex)\n      }\n    },\n    pushCustomCourseInfo(info) {\n      const courseInfo = cloneDeep(info)\n      this.customizeScheduleList.push(courseInfo)\n    },\n    onEditCourseSchedule(item, cycleIndex, positionIndex) {\n      const cycle = this.pickerList[cycleIndex]\n      const cycle_type = this.cycle_type\n      const courseInfo = this.smallCourseInfo\n      this.$modalRouter.push({\n        name: 'schedule-small-course-edit-course',\n        props: {\n          item,\n          cycleIndex,\n          cycle,\n          positionIndex,\n          cycle_type,\n          courseInfo\n        },\n        on: {\n          editCourse: (cycleIndex, positionIndex, conflict, info, list) => {\n            info.conflictList = list\n            info.conflict = conflict\n            this.scheduleList[cycleIndex].course_time.forEach(\n              (dayItems, index) => {\n                if (dayItems.week == info.week) {\n                  dayItems.list.splice(positionIndex, 1, info)\n                  this.filterDateList(this.scheduleList)\n                  return\n                }\n              }\n            )\n          }\n        }\n      })\n    },\n    onEditCustomSchedule(item, positionIndex) {\n      const cycle = this.pickerList[0]\n      const cycle_type = this.cycle_type\n      const courseInfo = this.smallCourseInfo\n      this.$modalRouter.push({\n        name: 'schedule-small-course-edit-course',\n        props: { item, cycle, positionIndex, cycle_type, courseInfo },\n        on: {\n          editCustomCourse: (positionIndex, info) => {\n            this.customizeScheduleList.splice(positionIndex, 1, info)\n            return\n          }\n        }\n      })\n    },\n    onDeleteCourseSchedule(item, cycleIndex, positionIndex) {\n      let params = {}\n      params = item\n      params.del_type = DELETE_TYPE.SINGLE\n      this.smallCourseScheduleService.cancelCycle(params).subscribe(res => {\n        this.scheduleList[cycleIndex].course_time.forEach((dayItems, index) => {\n          if (dayItems.week == item.week) {\n            dayItems.list.splice(positionIndex, 1)\n            if (dayItems.list.length === 0) {\n              this.scheduleList[cycleIndex].course_time.splice(index, 1)\n            }\n            this.filterDateList(this.scheduleList)\n            return\n          }\n        })\n      })\n    },\n    onDeleteCourseScheduleCycle(dateList, cycleIndex) {\n      let params = {}\n      const cycleDate = this.pickerList[cycleIndex]\n      params.cycle_start_date = moment(cycleDate[0]).format('YYYY-MM-DD')\n      params.cycle_end_date = moment(cycleDate[1]).format('YYYY-MM-DD')\n      params.course_id = this.smallCourseInfo.course_id\n      params.del_type = DELETE_TYPE.CYCLE\n      this.smallCourseScheduleService.cancelCycle(params).subscribe(res => {\n        this.scheduleList[cycleIndex].course_time = []\n        this.pickerList.splice(cycleIndex, 1, dateList)\n        this.picker_end_date = this.pickerList[\n          this.pickerList.length - 1\n        ][1].format('YYYY-MM-DD')\n        this.filterDateList(this.scheduleList)\n        this.resetCourseNumTips('single', cycleIndex)\n      })\n    },\n    onDealDeleteResult(cycleIndex) {\n      this.scheduleList.splice(cycleIndex, 1)\n      this.pickerList.splice(cycleIndex, 1)\n      this.picker_end_date = this.pickerList[\n        this.pickerList.length - 1\n      ][1].format('YYYY-MM-DD')\n    },\n    onDeleteCycleSchedule(cycleIndex) {\n      if (this.scheduleList.length <= 1) {\n        return\n      }\n      if (this.scheduleList[cycleIndex].course_time.length <= 0) {\n        this.onDealDeleteResult(cycleIndex)\n        return\n      } else {\n        this.$confirm({\n          title: '提示',\n          content: `修改后会清空当前周期下的已有${this.$c(\n            'coach'\n          )}排期，请确认修改`,\n          onCancel: () => {},\n          onOk: () => {\n            let params = {}\n            const cycleDate = this.pickerList[cycleIndex]\n            params.cycle_start_date = moment(cycleDate[0]).format('YYYY-MM-DD')\n            params.cycle_end_date = moment(cycleDate[1]).format('YYYY-MM-DD')\n            params.course_id = this.smallCourseInfo.course_id\n            params.del_type = DELETE_TYPE.CYCLE\n            this.smallCourseScheduleService\n              .cancelCycle(params)\n              .subscribe(res => {\n                this.onDealDeleteResult(cycleIndex)\n              })\n            this.resetCourseNumTips('single', cycleIndex)\n          }\n        })\n      }\n    },\n    onDeleteCustomSchedule(item, index) {\n      this.smallCourseScheduleService.cancelCustom(item.id).subscribe(res => {\n        this.customizeScheduleList.splice(index, 1)\n      })\n    },\n    onDeleteScheduleAll() {\n      let hasCoursesFlag = false\n      if (this.cycle_type === 2 && this.customizeScheduleList > 0) {\n        hasCoursesFlag = true\n      }\n      if (this.cycle_type === 1) {\n        this.scheduleList.forEach((item, index) => {\n          if (item.course_time.length > 0) {\n            hasCoursesFlag = true\n          }\n        })\n      }\n      if (!hasCoursesFlag) {\n        this.onClickGoBack()\n        return\n      } else {\n        this.$confirm({\n          title: '提示',\n          content: `取消后会清空当前课程下所有未发布的排期，请确认已完成排课`,\n          onCancel: () => {},\n          onOk: () => {\n            if (this.cycle_type === 1) {\n              let params = {}\n              params.course_id = this.smallCourseInfo.course_id\n              params.del_type = DELETE_TYPE.ALL_CYCLE\n              this.smallCourseScheduleService\n                .cancelCycle(params)\n                .subscribe(res => {\n                  this.resetCourseNumTips('all')\n                  this.onClickGoBack()\n                })\n            } else if (this.cycle_type === 2) {\n              const params = {}\n              params.course_id = this.smallCourseInfo.course_id\n              params.schedule_ids = []\n              this.customizeScheduleList.forEach((item, index) => {\n                params.schedule_ids.push(item.id)\n              })\n              this.smallCourseScheduleService\n                .cancelCustomAll(params)\n                .subscribe(res => {\n                  this.onClickGoBack()\n                })\n            } else {\n              this.onClickGoBack()\n            }\n          }\n        })\n      }\n    },\n    resetCourseNumTips(type, index) {\n      if (type === 'all') {\n        this.tipsCourseNum.splice(0, this.tipsCourseNum.length)\n      } else {\n        this.tipsCourseNum.splice(index, 1)\n      }\n    },\n    addScheduleWeek() {\n      this.pickerList.push([\n        moment(this.picker_end_date).add(1, 'days'),\n        moment(this.end_date)\n      ])\n      this.picker_end_date = this.end_date\n      let item = {}\n      item.course_time = []\n      this.scheduleList.push(item)\n      this.filterDateList(this.scheduleList)\n    },\n    onClickSaveSchedule() {\n      if (\n        (this.cycle_type === 1 &&\n          this.scheduleList[0].course_time.length <= 0) ||\n        (this.cycle_type === 2 && this.customizeScheduleList <= 0)\n      ) {\n        this.msg.warning({\n          content: '请先新增排期'\n        })\n        return\n      }\n      const cycle_type = this.cycle_type\n      const courseInfo = this.smallCourseInfo\n      let scheduleList\n      if (cycle_type === 1) {\n        scheduleList = this.tipsCourseNum\n      } else {\n        scheduleList = this.customizeScheduleList\n      }\n      this.$modalRouter.push({\n        name: 'schedule-small-course-submit-course',\n        props: { scheduleList, cycle_type, courseInfo }\n      })\n    },\n    onClickGoBack() {\n      let weekOfday = moment().format('E')\n      let start_date = moment()\n        .subtract(weekOfday - 1, 'days')\n        .format('YYYY-MM-DD')\n      let end_date = moment()\n        .add(7 - weekOfday, 'days')\n        .format('YYYY-MM-DD')\n      this.$router.push({\n        path: '/shop/product/course/schedule/small-course/small-course',\n        query: {\n          start_date,\n          end_date\n        }\n      })\n    }\n  },\n  components: {\n    AddCourse,\n    CourseCardPopover\n  }\n}\n</script>\n"]}]}