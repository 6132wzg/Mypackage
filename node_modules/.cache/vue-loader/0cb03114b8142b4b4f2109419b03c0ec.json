{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/multi-line/multi-line.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/multi-line/multi-line.vue","mtime":1598250255716},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { View } from 'st-data-set'\nimport { Chart } from '@antv/g2'\nimport {\n  toKFilter,\n  thousandsFilter,\n  setColorMap,\n  colorToRgba\n} from '../filters'\nimport chartMixin from '../mixin'\n\nexport default {\n  name: 'MultiLine',\n  mixins: [chartMixin],\n  props: {\n    /**\n     * @example\n     * fold 为false [{date:'05-28', key: 2, name: '私教课', value: 20}, {date:'05-28', key: 3, name: '团体课', value: 50}]\n     * fold 为true [{date:'05-28', 私教课:20, 团体课:50, 储值卡:78}]\n     * fold 为true [{date:'05-28', 2:20, 3:50, 5:78}]          2、3、5 分别为 私教课 团体课 储值卡，需通过自定义dataItem 格式化\n     * fold 为true时 fields不能为空, 用于展开数据\n     */\n    fold: {\n      type: Boolean,\n      default: false\n    },\n    data: {\n      type: Array,\n      default: () => []\n    },\n    dataItem: {\n      type: Function,\n      default: row => row\n    },\n    // 设置 图例、x轴、y轴 对应的key值\n    dataItemKeyMap: {\n      type: Object,\n      default: () => {\n        return {\n          name: 'name', // 图例名\n          key: 'key', // 图例name对应key值\n          value: 'value', // y轴值\n          date: 'date' // x轴值\n        }\n      }\n    },\n    height: {\n      type: Number,\n      default: 280\n    },\n    // 数组排序对应颜色顺序，设置对应字段的颜色；当fold为true时 fields又作为展开字段集,用于字段的展开\n    fields: {\n      type: [Boolean, Array],\n      default: () => []\n    },\n    fieldKey: {\n      type: String,\n      default: 'key'\n    },\n    // 颜色配置数组\n    colors: {\n      type: Array,\n      default: () => [\n        '#3F66F6',\n        '#798AFF',\n        '#06DB8C',\n        '#77FF74',\n        '#B8F10F',\n        '#FFE679',\n        '#FFB946',\n        '#FF6466',\n        '#C87FFF',\n        '#484F83'\n      ]\n    },\n    // 是否按照颜色数组的顺序 循环设置图例颜色（即图例顺序与colors顺序一一对应），默认为false，根据图例key设置图例颜色\n    colorIsQueue: {\n      type: Boolean,\n      default: false\n    },\n    colorMap: {\n      type: [Object, Array, Boolean],\n      default: false\n    },\n    max: {\n      type: Number,\n      default: 4000\n    }\n  },\n  data() {\n    return {\n      type: 'MultiLine',\n      dv: new View()\n      // MAX: 0\n    }\n  },\n  computed: {\n    isEmpty() {\n      return !this.data || !this.data.length\n    },\n    dataSource() {\n      // 数据为空时，默认添加一项空数据，保证空统计图的绘制\n      if (!this.data || !this.data.length) {\n        return [{ key: 0, name: '', value: 0, date: '' }, ...this.data]\n      }\n      return this.data\n    },\n    /**\n     * 图例枚举配置获取\n     * fieldsKey  为图例名对应的key值数组\n     * fieldsName 为图例名 数组                用于数据展开的依据\n     * fieldsObj  为图例名与其key值 的对应关系\n     * */\n    $fieldsOpts() {\n      let fieldsKey = []\n      let fieldsName = []\n      let fieldsObj = {}\n      const data = this.fold ? this.dv.rows : this.dataSource\n      data.map(item => {\n        fieldsKey.push(item[this.fieldKey])\n        fieldsName.push(item.name)\n        fieldsObj[item[this.fieldKey]] = item.name\n      })\n      if (this.fields.length) {\n        fieldsKey = [...this.fields, ...fieldsKey]\n      }\n      fieldsKey = [...new Set(fieldsKey)]\n      fieldsName = [...new Set(fieldsName)]\n\n      return {\n        colorMap: this.colorMap,\n        fieldsKey,\n        fieldsName,\n        fieldsObj\n      }\n    },\n    // 构造颜色map\n    $colorMap() {\n      // 根据 图例枚举，以图例name为key值，生成图例颜色map对应关系\n      return setColorMap(this.$fieldsOpts, this.colors, this.colorIsQueue)\n    },\n    // 构造阴影颜色map\n    shadowColors() {\n      const shadowColorMap = {}\n      for (let key in this.$colorMap) {\n        shadowColorMap[key] = colorToRgba(this.$colorMap[key], 0.4)\n      }\n      return shadowColorMap\n    },\n    // y轴 最大值设置\n    MAX() {\n      const maxValue = this.dv.rows.length ? this.dv.max('value') : this.max\n      return maxValue > this.max ? maxValue : this.max\n    }\n  },\n  methods: {\n    toKFilter(val, unit = '') {\n      const n = toKFilter(val)\n      return n.toString().indexOf('万') >= 0 ? n : n + unit\n    },\n    thousandsFilter,\n    initDv() {\n      this.dv.source(this.dataSource)\n      if (this.fold) {\n        this.dv.transform({\n          type: 'fold',\n          fields: this.$fieldsOpts.fieldsName,\n          key: 'name',\n          value: 'value'\n        })\n      }\n      this.dv.transform({\n        type: 'map',\n        callback: (row, index) => {\n          // 根据自定义配置项 格式化数据\n          for (let key in this.dataItemKeyMap) {\n            const itemDt = row[this.dataItemKeyMap[key]]\n            if (itemDt) row[key] = itemDt\n          }\n          ;(row.$idx = index), (row.value = +row.value)\n          return this.dataItem ? this.dataItem(row) : row\n        }\n      })\n    },\n    renderChart() {\n      console.log('chart init', this.dv.rows)\n      this.chart = new Chart({\n        ...this.opts,\n        container: this.$el,\n        data: this.dv,\n        forceFit: true,\n        height: this.height,\n        padding: [8, 160, 'auto', 'auto'],\n        renderer: 'svg'\n      })\n      if (this.isEmpty) {\n        this.chart.tooltip(false)\n        this.chart.legend('name', false)\n      }\n      this.chart.render()\n    },\n    // 更新opts配置 需要重新计算最新的opts、并重新渲染\n    changeData() {\n      this.chart.destroy()\n      this.renderChart()\n    }\n  }\n}\n",null]}