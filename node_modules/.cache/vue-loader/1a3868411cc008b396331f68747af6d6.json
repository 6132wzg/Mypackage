{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/app/venue/booking.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/shop/app/venue/booking.vue","mtime":1591147717376},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { BookingService } from './booking.service'\nimport { swiper, swiperSlide } from 'vue-awesome-swiper'\nimport 'swiper/dist/css/swiper.css'\nimport moment from 'moment'\nimport bookingTable from './components#/booking-table'\nimport memberSearch from '@/views/biz-components/member-search/member-search'\nimport { ruleOptions, columns } from './booking.config'\nimport SoldDealGatheringTip from '@/views/biz-modals/sold/deal/gathering-tip'\nimport SoldDealGathering from '@/views/biz-modals/sold/deal/gathering'\nimport { PatternService } from '@/services/pattern.service'\nimport { debounce } from 'lodash-es'\nexport default {\n  name: 'PageShopAppVenueBooking',\n  bem: {\n    b: 'page-shop-app-venue-booking',\n    calendar: 'calendar',\n    list: 'list',\n    right: 'right'\n  },\n  serviceInject() {\n    return {\n      bookingService: BookingService,\n      pattern: PatternService\n    }\n  },\n  rxState() {\n    return {\n      venueList: this.bookingService.venueList$,\n      loading: this.bookingService.loading$,\n      auth: this.bookingService.auth$,\n      hasNext: this.bookingService.hasNext$\n    }\n  },\n  modals: {\n    SoldDealGatheringTip,\n    SoldDealGathering\n  },\n  components: {\n    swiper,\n    swiperSlide,\n    bookingTable,\n    memberSearch\n  },\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      sum: 0,\n      finalAmount: 0,\n      reduce_price: '',\n      form,\n      decorators,\n      selectedList: [],\n      columns,\n      sliderOptions: {\n        autoplay: false,\n        navigation: {\n          nextEl: '.swiper-booking-button-next',\n          prevEl: '.swiper-booking-button-prev'\n        },\n        slidesPerView: 7,\n        slidesPerGroup: 7,\n        centeredSlides: false,\n        normalizeSlideIndex: false\n      },\n      calendarData: [],\n      query: {\n        venues_id: '',\n        page: 1,\n        size: 10,\n        reserve_day: ''\n      },\n      pickedIndex: 0,\n      bookingList: [],\n      siteX: [],\n      siteY: []\n    }\n  },\n  mounted() {\n    this.calendarData = Array(28)\n      .fill()\n      .map((item, index) => {\n        return {\n          week: moment()\n            .add(index, 'days')\n            .format('ddd'),\n          date: moment()\n            .add(index, 'days')\n            .format('YYYY-MM-DD'),\n          day: moment()\n            .add(index, 'days')\n            .format('MM/DD')\n        }\n      })\n    this.query.venues_id = this.venueList[0].venues_id\n    this.pickDate(this.calendarData[0], 0)\n  },\n  watch: {\n    reduce_price: debounce(function(val) {\n      if (!this.selectedList.length) return\n      this.calcPrice()\n    }, 500)\n  },\n  methods: {\n    onNextPage() {\n      if (!this.hasNext) return\n      this.query.page++\n      this.bookingService.getBookingList(this.query).subscribe(res => {\n        this.bookingList = this.bookingList.concat(res.list)\n        this.siteX = this.siteX.concat(res.site_x)\n        this.siteY = res.site_y\n      })\n    },\n    resetPage() {\n      this.form.resetFields()\n      this.reduce_price = ''\n      this.getList()\n    },\n    createdOrderPay(props) {\n      this.$modalRouter.push({\n        name: 'sold-deal-gathering',\n        props,\n        on: {\n          success: res => {\n            this.payCallBack(props.order_id, res.type)\n          },\n          cancel: () => {\n            this.resetPage()\n          }\n        }\n      })\n    },\n    payCallBack(orderId, callBackType) {\n      switch (callBackType) {\n        case 'cancel':\n          this.resetPage()\n          break\n        case 'pay':\n          this.createdGatheringTip({\n            message: '收款成功',\n            order_id: orderId,\n            needPay: false,\n            needContract: false,\n            needTicket: false\n          })\n          break\n      }\n    },\n    tipCallBack({ orderId, type }) {\n      switch (type) {\n        case 'cancel':\n          this.resetPage()\n          break\n        case 'ViewOrder':\n          this.createdOrderViewOrder(orderId)\n          break\n        case 'Pay':\n          this.createdOrderPay({ order_id: orderId, type: 'venues' })\n          break\n      }\n    },\n    createdGatheringTip(props) {\n      this.$modalRouter.push({\n        name: 'sold-deal-gathering-tip',\n        props,\n        on: {\n          success: this.tipCallBack\n        }\n      })\n    },\n    createdOrderViewOrder(order_id) {\n      this.$router.push({\n        name: 'shop-finance-order-info-collection-details',\n        query: {\n          id: order_id\n        }\n      })\n    },\n    createOrder() {\n      return new Promise((resolve, reject) => {\n        this.form.validate().then(values => {\n          console.log(values)\n          const venues_data = this.selectedList.map(item => {\n            return {\n              time_start: item.start_time,\n              time_end: item.end_time,\n              venues_site_id: +item.id.replace(/\\-.*/, ''),\n              price: item.price,\n              venues_site_name: item.site_name\n            }\n          })\n          values.mobile = values.mobile ? values.mobile.phone : undefined\n          values.country_prefix = values.mobile\n            ? values.mobile.code_id\n            : undefined\n          values.parent_mobile = values.parent_mobile\n            ? values.parent_mobile.phone\n            : undefined\n          values.parent_country_prefix = values.parent_mobile\n            ? values.parent_mobile.code_id\n            : undefined\n          this.bookingService\n            .createOrder({\n              venues_id: this.query.venues_id,\n              venues_name: this.query.venues_name,\n              reduce_price: this.reduce_price,\n              actual_amount: this.finalAmount,\n              order_amount: this.sum,\n              reserve_day: this.query.reserve_day,\n              venues_data: venues_data,\n              ...values\n            })\n            .subscribe(result => {\n              resolve(result)\n            })\n        })\n      })\n    },\n    onCreateOrder() {\n      this.createOrder().then(result => {\n        const props = {\n          order_id: result.info.order_id,\n          message: '订单创建成功',\n          needPay: true,\n          needContract: false,\n          needTicket: false\n        }\n        this.createdGatheringTip(props)\n      })\n    },\n    onPay() {\n      this.createOrder().then(result => {\n        this.createdOrderPay({\n          order_id: result.info.order_id,\n          type: 'venues'\n        })\n      })\n    },\n    deleteRow(row) {\n      let index\n      this.selectedList.forEach((item, inx) => {\n        if (item.id === row.id) {\n          index = inx\n        }\n      })\n      this.$refs.bookingTable.deleteRow(index)\n    },\n    calcPrice() {\n      const list = this.selectedList\n      const venues_site_time = list.map(item => {\n        return {\n          start_time: item.start_time,\n          end_time: item.end_time,\n          site_id: +item.id.replace(/\\-.*/, '')\n        }\n      })\n      const params = {\n        venues_id: this.query.venues_id,\n        date: this.query.reserve_day,\n        reduce_price: this.reduce_price || 0,\n        venues_site_time\n      }\n      this.bookingService.calcPrice(params).subscribe(res => {\n        this.sum = res.total_price\n        this.finalAmount = res.price\n      })\n    },\n    getSelectedList(list) {\n      this.selectedList = list\n      if (list.length === 0) {\n        this.sum = 0\n        this.finalAmount = 0\n        return\n      }\n      this.calcPrice()\n    },\n    pickDate(dateObj, index) {\n      this.calendarData.forEach(item => (item.ispick = false))\n      this.pickedIndex = index\n      this.query.reserve_day = dateObj.date\n      this.resetPagination()\n      this.getList()\n    },\n    selectHandler(e) {\n      this.query.venues_id = e.target.value\n      this.resetPagination()\n      this.getList()\n    },\n    resetPagination() {\n      this.query.page = 1\n      this.$refs.bookingTable.resetScroll()\n    },\n    getList() {\n      this.bookingService.getBookingList(this.query).subscribe(res => {\n        this.$refs.bookingTable.deleteAll()\n        this.bookingList = res.list\n        this.siteX = res.site_x\n        this.siteY = res.site_y\n      })\n    }\n  }\n}\n",null]}