{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/brand-stat-course-ring.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/brand-stat-course-ring.vue","mtime":1600912105530},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport { Chart } from '@antv/g2'\nimport { View } from 'st-data-set'\nimport chartMixin from './mixin'\nimport { decimalFilter } from './filters'\nimport StHelpTooltip from '@/views/components/help-tooltip/help-tooltip'\n\nexport default {\n  name: 'BrandStatCourseRing',\n  mixins: [chartMixin],\n  data() {\n    return {\n      intervalStack: {},\n      resize: -99\n    }\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    height: {\n      type: Number,\n      default: 198\n    },\n    name: {\n      type: String,\n      default: ''\n    },\n    tooltipId: {\n      type: String,\n      default: ''\n    },\n    total: {\n      type: Number,\n      default: 0\n    },\n    colors: {\n      type: Array,\n      default: () => ['#4679F9', '#894BFF']\n    },\n    unit: {\n      type: String,\n      default: '节'\n    },\n    options: {\n      type: Object,\n      default: () => {\n        return {\n          height: 198,\n          totalName: '',\n          color: ['#4679F9', '#894BFF'],\n          totalCount: 0,\n          unit: ''\n        }\n      }\n    }\n  },\n  watch: {\n    // 当浏览器窗口变小时，tooltip会消失问题\n    resize() {\n      this.$nextTick(() => {\n        const $s = this.$el.querySelector.bind(this.$el)\n        const component = new Vue({\n          components: {\n            StHelpTooltip\n          },\n          render: h => <st-help-tooltip id={this.tooltipId} />\n        }).$mount()\n        $s(`#guide-name-tooltip${this.tooltipId}`).appendChild(component.$el)\n      })\n    }\n  },\n  computed: {\n    dataSource() {\n      //传入的总计为0时，多一个环形图为0的灰色环形图\n      if (this.total === 0) {\n        return [...this.data, { name: 'empty', value: 1 }]\n      }\n      return this.data\n    }\n  },\n  methods: {\n    initDv() {\n      this.dv = new View()\n      this.dv.source(this.dataSource)\n      this.dv.transform({\n        type: 'map',\n        callback(row) {\n          row.value = +row.value\n          return row\n        }\n      })\n    },\n    initChart() {\n      // chart初始化实例\n      this.getChartInstance()\n      // 加载数据\n      this.chart.source(this.dv, {\n        value: {\n          formatter: v => v + this.unit\n        }\n      })\n      // 设置坐标系\n      this.setCoord()\n      // 设置提示信息\n      this.setTooltip()\n      // 设置图例\n      this.setLegend()\n      // 设置复制元素\n      this.setGuideHtml()\n      // 设置渲染环形图\n      this.getintervalStack()\n    },\n    getintervalStack() {\n      // 环形图初始化\n      this.intervalStack = this.chart\n        .intervalStack()\n        .style({\n          fillOpacity: 1,\n          cursor: 'pointer'\n        })\n        .tooltip('name*percent', function(item, percent, a) {\n          return {\n            name: item,\n            value: percent + '%'\n          }\n        })\n        .position('value')\n        .color('name', [...this.colors, '#e9edf2'])\n        .select(false)\n        .active({\n          style: {\n            fillOpacity: 1,\n            lineWidth: 8\n          }\n        })\n      this.chart.render()\n      // 自定义监听环形图事件\n      this.chartEvent()\n    },\n    getChartInstance() {\n      this.chart = new Chart({\n        container: this.$el,\n        forceFit: true,\n        padding: ['auto', 160, 'auto', 'auto'],\n        height: this.height\n      })\n    },\n    setTooltip() {\n      this.chart.tooltip({\n        showTitle: false,\n        itemTpl: `<li class=\"tooltip-item-{name}\">\n                    <span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>\n                    {name}\n                    <span class=\"st-g2-tooltip-value\">| {value}</span>\n                  </li>`\n      })\n    },\n    setCoord() {\n      this.chart.coord('theta', {\n        innerRadius: 0.65\n      })\n    },\n    setLegend() {\n      this.chart.legend({\n        position: 'right-center',\n        useHtml: true,\n        itemTpl: (name, color, checked, index) => {\n          const row = this.dv.findRow({ name })\n          const value = row.value\n          return `<li class=\"g2-legend-list-item item-{originValue} item-{index} {checked}\" data-color=\"{originColor}\" data-value=\"{originValue}\">\n                    <i class=\"g2-legend-marker\" style=\"background-color:{color};\"></i>\n                    <span class=\"g2-legend-text\">${name}</span>\n                    <div class='legend-right mg-l24'>\n                      <span class='legend-percent'>${value}${this.unit}</span>\n                    </div>\n                  </li>`\n        },\n        onHover: ev => {\n          // 总计为 0 是执行hover\n          // if (this.total === 0) return\n          const $s = this.$el.querySelector.bind(this.$el)\n          const name = ev.item.value\n          const row = this.dv.findRow({ name })\n          const shapes = ev.shapes\n          const geom = ev.geom\n          const legend = ev.currentTarget\n          // 选中对应单元\n          this.total !== 0 && geom.setShapesActived(shapes)\n          legend.addEventListener('mouseleave', () => {\n            this.resetTotal()\n          })\n          $s('.guide-value').textContent = row.value\n          $s('.guide-name-text').textContent = row.name\n          $s('.guide-name-tooltip').setAttribute('style', 'display: none')\n        }\n      })\n    },\n    setGuideHtml() {\n      // 总计的自定义DOM\n      this.chart.guide().html({\n        position: ['50%', '50%'],\n        html: () => {\n          this.resize = Math.random()\n          return `<div class='guide'>\n                    <div class='guide-name'>\n                      <span class=\"guide-name-text\">${this.name}</span>\n                      <span class=\"guide-name-tooltip\" id=\"guide-name-tooltip${this.tooltipId}\"></span>\n                    </div>\n                    <div class='guide-title'>\n                      <span class='guide-value'>${this.total}</span>\n                      <span class='guide-unit'>${this.unit}</span>\n                    </div>\n                  </div>`\n        }\n      })\n    },\n    resetTotal() {\n      const $s = this.$el.querySelector.bind(this.$el)\n      $s('.guide-value').textContent = this.total\n      // 总计的时候显示tooltip\n      $s('.guide-name-tooltip').setAttribute('style', 'display: inline') //.style({ display: 'inline' })\n      $s('.guide-name-text').textContent = this.name\n    },\n    setUnit(e) {\n      const $s = this.$el.querySelector.bind(this.$el)\n      // 当环形图总计都是零的时候隐藏tooltip\n      if (e.data._origin.name === 'empty') {\n        $s('.g2-tooltip').setAttribute('style', 'display: none')\n        return\n      }\n      const origin = e.data._origin\n      const shapes = e.shapes\n      const geom = e.geom\n\n      $s('.guide-value').textContent = origin.value\n      $s('.guide-name-text').textContent = origin.name\n      // 不是总计的时候隐藏tooltip\n      $s('.guide-name-tooltip').setAttribute('style', 'display: none')\n    },\n    chartEvent() {\n      // 鼠标进入环形显示相关的值\n      this.chart.on('interval:mouseenter', ev => {\n        const shape = ev.shape\n        const origin = ev.data._origin\n        if (origin.name === 'empty') {\n          this.intervalStack.clearActivedShapes(shape)\n        }\n        this.setUnit(ev)\n      })\n      // 鼠标离开显示总值\n      this.chart.on('interval:mouseleave', e => {\n        this.resetTotal()\n      })\n    }\n  },\n  beforeDestroy() {\n    if (this.chart) {\n      // 注销图形所有事件\n      this.chart.off()\n    }\n  }\n}\n",{"version":3,"sources":["brand-stat-course-ring.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"brand-stat-course-ring.vue","sourceRoot":"src/views/biz-components/stat","sourcesContent":["<template>\n  <div class=\"brand-stat-course-ring\"></div>\n</template>\n\n<script>\nimport { Chart } from '@antv/g2'\nimport { View } from 'st-data-set'\nimport chartMixin from './mixin'\nimport { decimalFilter } from './filters'\nimport StHelpTooltip from '@/views/components/help-tooltip/help-tooltip'\n\nexport default {\n  name: 'BrandStatCourseRing',\n  mixins: [chartMixin],\n  data() {\n    return {\n      intervalStack: {},\n      resize: -99\n    }\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    height: {\n      type: Number,\n      default: 198\n    },\n    name: {\n      type: String,\n      default: ''\n    },\n    tooltipId: {\n      type: String,\n      default: ''\n    },\n    total: {\n      type: Number,\n      default: 0\n    },\n    colors: {\n      type: Array,\n      default: () => ['#4679F9', '#894BFF']\n    },\n    unit: {\n      type: String,\n      default: '节'\n    },\n    options: {\n      type: Object,\n      default: () => {\n        return {\n          height: 198,\n          totalName: '',\n          color: ['#4679F9', '#894BFF'],\n          totalCount: 0,\n          unit: ''\n        }\n      }\n    }\n  },\n  watch: {\n    // 当浏览器窗口变小时，tooltip会消失问题\n    resize() {\n      this.$nextTick(() => {\n        const $s = this.$el.querySelector.bind(this.$el)\n        const component = new Vue({\n          components: {\n            StHelpTooltip\n          },\n          render: h => <st-help-tooltip id={this.tooltipId} />\n        }).$mount()\n        $s(`#guide-name-tooltip${this.tooltipId}`).appendChild(component.$el)\n      })\n    }\n  },\n  computed: {\n    dataSource() {\n      //传入的总计为0时，多一个环形图为0的灰色环形图\n      if (this.total === 0) {\n        return [...this.data, { name: 'empty', value: 1 }]\n      }\n      return this.data\n    }\n  },\n  methods: {\n    initDv() {\n      this.dv = new View()\n      this.dv.source(this.dataSource)\n      this.dv.transform({\n        type: 'map',\n        callback(row) {\n          row.value = +row.value\n          return row\n        }\n      })\n    },\n    initChart() {\n      // chart初始化实例\n      this.getChartInstance()\n      // 加载数据\n      this.chart.source(this.dv, {\n        value: {\n          formatter: v => v + this.unit\n        }\n      })\n      // 设置坐标系\n      this.setCoord()\n      // 设置提示信息\n      this.setTooltip()\n      // 设置图例\n      this.setLegend()\n      // 设置复制元素\n      this.setGuideHtml()\n      // 设置渲染环形图\n      this.getintervalStack()\n    },\n    getintervalStack() {\n      // 环形图初始化\n      this.intervalStack = this.chart\n        .intervalStack()\n        .style({\n          fillOpacity: 1,\n          cursor: 'pointer'\n        })\n        .tooltip('name*percent', function(item, percent, a) {\n          return {\n            name: item,\n            value: percent + '%'\n          }\n        })\n        .position('value')\n        .color('name', [...this.colors, '#e9edf2'])\n        .select(false)\n        .active({\n          style: {\n            fillOpacity: 1,\n            lineWidth: 8\n          }\n        })\n      this.chart.render()\n      // 自定义监听环形图事件\n      this.chartEvent()\n    },\n    getChartInstance() {\n      this.chart = new Chart({\n        container: this.$el,\n        forceFit: true,\n        padding: ['auto', 160, 'auto', 'auto'],\n        height: this.height\n      })\n    },\n    setTooltip() {\n      this.chart.tooltip({\n        showTitle: false,\n        itemTpl: `<li class=\"tooltip-item-{name}\">\n                    <span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>\n                    {name}\n                    <span class=\"st-g2-tooltip-value\">| {value}</span>\n                  </li>`\n      })\n    },\n    setCoord() {\n      this.chart.coord('theta', {\n        innerRadius: 0.65\n      })\n    },\n    setLegend() {\n      this.chart.legend({\n        position: 'right-center',\n        useHtml: true,\n        itemTpl: (name, color, checked, index) => {\n          const row = this.dv.findRow({ name })\n          const value = row.value\n          return `<li class=\"g2-legend-list-item item-{originValue} item-{index} {checked}\" data-color=\"{originColor}\" data-value=\"{originValue}\">\n                    <i class=\"g2-legend-marker\" style=\"background-color:{color};\"></i>\n                    <span class=\"g2-legend-text\">${name}</span>\n                    <div class='legend-right mg-l24'>\n                      <span class='legend-percent'>${value}${this.unit}</span>\n                    </div>\n                  </li>`\n        },\n        onHover: ev => {\n          // 总计为 0 是执行hover\n          // if (this.total === 0) return\n          const $s = this.$el.querySelector.bind(this.$el)\n          const name = ev.item.value\n          const row = this.dv.findRow({ name })\n          const shapes = ev.shapes\n          const geom = ev.geom\n          const legend = ev.currentTarget\n          // 选中对应单元\n          this.total !== 0 && geom.setShapesActived(shapes)\n          legend.addEventListener('mouseleave', () => {\n            this.resetTotal()\n          })\n          $s('.guide-value').textContent = row.value\n          $s('.guide-name-text').textContent = row.name\n          $s('.guide-name-tooltip').setAttribute('style', 'display: none')\n        }\n      })\n    },\n    setGuideHtml() {\n      // 总计的自定义DOM\n      this.chart.guide().html({\n        position: ['50%', '50%'],\n        html: () => {\n          this.resize = Math.random()\n          return `<div class='guide'>\n                    <div class='guide-name'>\n                      <span class=\"guide-name-text\">${this.name}</span>\n                      <span class=\"guide-name-tooltip\" id=\"guide-name-tooltip${this.tooltipId}\"></span>\n                    </div>\n                    <div class='guide-title'>\n                      <span class='guide-value'>${this.total}</span>\n                      <span class='guide-unit'>${this.unit}</span>\n                    </div>\n                  </div>`\n        }\n      })\n    },\n    resetTotal() {\n      const $s = this.$el.querySelector.bind(this.$el)\n      $s('.guide-value').textContent = this.total\n      // 总计的时候显示tooltip\n      $s('.guide-name-tooltip').setAttribute('style', 'display: inline') //.style({ display: 'inline' })\n      $s('.guide-name-text').textContent = this.name\n    },\n    setUnit(e) {\n      const $s = this.$el.querySelector.bind(this.$el)\n      // 当环形图总计都是零的时候隐藏tooltip\n      if (e.data._origin.name === 'empty') {\n        $s('.g2-tooltip').setAttribute('style', 'display: none')\n        return\n      }\n      const origin = e.data._origin\n      const shapes = e.shapes\n      const geom = e.geom\n\n      $s('.guide-value').textContent = origin.value\n      $s('.guide-name-text').textContent = origin.name\n      // 不是总计的时候隐藏tooltip\n      $s('.guide-name-tooltip').setAttribute('style', 'display: none')\n    },\n    chartEvent() {\n      // 鼠标进入环形显示相关的值\n      this.chart.on('interval:mouseenter', ev => {\n        const shape = ev.shape\n        const origin = ev.data._origin\n        if (origin.name === 'empty') {\n          this.intervalStack.clearActivedShapes(shape)\n        }\n        this.setUnit(ev)\n      })\n      // 鼠标离开显示总值\n      this.chart.on('interval:mouseleave', e => {\n        this.resetTotal()\n      })\n    }\n  },\n  beforeDestroy() {\n    if (this.chart) {\n      // 注销图形所有事件\n      this.chart.off()\n    }\n  }\n}\n</script>\n"]}]}