{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/product/card/member/period/edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/product/card/member/period/edit.vue","mtime":1597396799962},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { UserService } from '@/services/user.service'\nimport moment from 'moment'\nimport { PatternService } from '@/services/pattern.service'\nimport SelectShop from '@/views/fragments/shop/select-shop'\nimport { cloneDeep, remove } from 'lodash-es'\nimport { EditService } from './edit.service'\nimport MemberCard from '@/views/biz-components/h5/pages/member-card'\nimport H5Container from '@/views/biz-components/h5/h5-container'\nimport h5mixin from './h5mixin'\nimport { MEMBER_CARD } from '@/views/biz-components/h5/pages/member-card.config'\nimport CardBgRadio from '@/views/biz-components/card-bg-radio/card-bg-radio'\nimport FormBanner from '@/views/biz-components/card/form-banner.vue'\nimport {\n  ADMISSION_RANGE,\n  SELL_TYPE,\n  PRICE_SETTING,\n  SUPPORT_SALES,\n  UNIT,\n  CARD_TYPE\n} from '@/constants/card/member'\nimport { ruleOptions } from './period.config'\nimport StEditor from '@/views/biz-components/st/editor/editor.vue'\nexport default {\n  name: 'BrandPeriodCardEdit',\n  mixins: [h5mixin],\n  serviceInject() {\n    return {\n      pattern: PatternService,\n      editService: EditService,\n      userService: UserService\n    }\n  },\n  rxState() {\n    return {\n      addLoading: this.editService.loading$,\n      cardInfo: this.editService.cardInfo$,\n      cardBgList: this.editService.cardBgList$,\n      admissionRange: this.editService.admissionRange$,\n      priceSetting: this.editService.priceSetting$,\n      supportSales: this.editService.supportSales$,\n      unit: this.editService.unit$,\n      sellType: this.editService.sellType$,\n      isShelfCard: this.editService.isShelfCard$,\n      supportMemberNums: this.editService.supportMemberNums$\n    }\n  },\n  bem: {\n    b: 'st-help-popover'\n  },\n  components: {\n    StEditor,\n    SelectShop,\n    MemberCard,\n    H5Container,\n    CardBgRadio,\n    FormBanner\n  },\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      // cardData\n      form,\n      decorators,\n      ADMISSION_RANGE,\n      SELL_TYPE,\n      PRICE_SETTING,\n      SUPPORT_SALES,\n      UNIT,\n      cardType: MEMBER_CARD.PERIOD_CARD,\n      MEMBER_CARD,\n      cardData: {\n        // 卡id\n        id: null,\n        // 会员卡类型1-次卡 2-期限卡\n        card_type: this.isFamilyCard ? CARD_TYPE.MORE_PERIOD : CARD_TYPE.PERIOD,\n        // 会员卡名称\n        card_name: '',\n        // 特殊说明\n        special_note: '',\n        // 支持入场范围 1-单店 2-多店 3-全店\n        admission_range: ADMISSION_RANGE.ONLY_STORE,\n        // 支持入场门店\n        admission_shop_list: [],\n        // 价格设置类型 1-统一定价 2-门店定价\n        price_setting: PRICE_SETTING.UNIFORM_PRICE,\n        // 价格梯度\n        price_gradient: [],\n        // 支持售卖场馆类型 1-全部门店 2-指定门店\n        support_sales: SUPPORT_SALES.ALL_STORE,\n        // 支持售卖门店\n        sell_shop_list: [],\n        // 上架门店数量\n        shelf_shop_num: 0,\n        // 支持售卖时间\n        start_time: '',\n        end_time: '',\n        // 结束时间面板是否显示\n        endOpen: false,\n        // 是否支持转让\n        _is_transfer: false,\n        is_transfer: 0,\n        // 转让单位\n        unit: UNIT.RMB,\n        // 转让手续费\n        num: undefined,\n        // 售卖方式\n        sell_type: [SELL_TYPE.OFFLINE],\n        // 卡背景\n        card_bg: {\n          image_id: 0,\n          image_key: this.cardBgList[0].image_key,\n          image_url: '',\n          index: 1\n        },\n        // 是否配置了用户端\n        appConfig: true,\n        // 卡介绍\n        card_introduction: '',\n        // 备注\n        card_contents: ''\n      },\n      transfer_unit_is_first: true,\n      // 品牌统一定价-价格梯度\n      rallyPriceList: [],\n      // 门店自主定价-价格梯度\n      shopPriceList: [],\n      // 售卖时间\n      start_time: null,\n      end_time: null,\n      unit_list: [\n        {\n          value: 2,\n          label: '天'\n        },\n        {\n          value: 3,\n          label: '月'\n        },\n        {\n          value: 4,\n          label: '年'\n        }\n      ],\n      // 校验价格的help文本\n      priceValidatorText: '',\n      // 卡背景的help文本\n      cardBgValidatorText: '',\n      // 是否禁止选择开始时间,如果卡状态是可售卖，则需要禁止修改开始时间\n      startTimeIsDisabled: false\n    }\n  },\n  mounted() {\n    this.init()\n  },\n  methods: {\n    // init\n    init() {\n      this.form.setFieldsValue({\n        'cardData.special_note': this.cardInfo.special_note,\n        'cardData.admission_range': this.cardInfo.admission_range,\n        'cardData.price_setting': this.cardInfo.price_setting,\n        'cardData.support_sales': this.cardInfo.support_sales,\n        start_time: moment(this.cardInfo.start_time * 1000),\n        end_time: moment(this.cardInfo.end_time * 1000),\n        'cardData.num': this.cardInfo.transfer_num\n      })\n      if (this.isFamilyCard) {\n        this.form.setFieldsValue({\n          'cardData.support_member_num': this.cardInfo.support_member_num\n        })\n      }\n      // 入场门店\n      this.cardData.admission_range = this.cardInfo.admission_range\n      this.cardData.admission_shop_list = this.cardInfo.admission_shop_list\n      // 价格设置\n      this.cardData.price_setting = this.cardInfo.price_setting\n      if (this.cardInfo.price_setting === PRICE_SETTING.UNIFORM_PRICE) {\n        // 品牌定价\n        this.cardInfo.price_gradient.forEach(i => {\n          let key = parseInt(Math.random() * 999999).toString()\n          this.rallyPriceList.push({\n            key,\n            time: {\n              unit: +i.unit,\n              num: +i.num\n            },\n            rally_price: +i.rally_price,\n            frozen_day: +i.frozen_day,\n            gift_unit: +i.gift_unit\n          })\n        })\n      } else {\n        // 门店定价\n        this.cardInfo.price_gradient.forEach(i => {\n          let key = parseInt(Math.random() * 999999).toString()\n          this.shopPriceList.push({\n            key,\n            time: {\n              unit: +i.unit,\n              num: +i.num\n            },\n            frozen_day: +i.frozen_day,\n            gift_unit: +i.gift_unit,\n            rally_price: {\n              min_price: +i.min_price,\n              max_price: +i.max_price\n            }\n          })\n        })\n      }\n      // 支持售卖门店\n      this.cardData.support_sales = this.cardInfo.support_sales\n      this.cardData.sell_shop_list =\n        this.cardData.support_sales === SUPPORT_SALES.SPECIFIED_STORE\n          ? cloneDeep(this.cardInfo.sell_shop_list)\n          : []\n      // 支持售卖时间\n      this.start_time = moment(this.cardInfo.start_time * 1000)\n      this.end_time = moment(this.cardInfo.end_time * 1000)\n      this.startTimeIsDisabled =\n        this.cardInfo.start_time * 1000 <\n          moment()\n            .startOf('day')\n            .valueOf() && this.cardInfo.end_time * 1000 > moment().valueOf()\n      // 转让设置\n      this.cardData._is_transfer = !!this.cardInfo.is_transfer\n      this.cardData.unit = this.cardInfo.transfer_unit\n      this.cardData.num = this.cardInfo.transfer_num\n      // 售卖方式\n      this.cardData.sell_type = this.cardInfo.sell_type\n      // 卡背景\n      this.cardData.card_bg = cloneDeep(this.cardInfo.card_bg)\n      // 卡介绍\n      this.cardData.card_introduction = this.cardInfo.card_introduction\n      // 卡备注\n      this.cardData.card_contents = this.cardInfo.card_contents\n      this.initH5CardInfo()\n    },\n    // 保存\n    onHandleSubmit(e) {\n      e.preventDefault()\n      // 校验价格\n      this.priceValidator(this.cardData.price_setting)\n      // 校验卡背景\n      this.cardBgValidator()\n      this.form.validateFieldsAndScroll((err, values) => {\n        if (!err && this.priceIsOk && this.cardBgIsOk) {\n          // 入场门店\n          if (this.cardData.admission_range !== ADMISSION_RANGE.GENERAL_STORE) {\n            // 不是多门店\n            this.cardData.admission_shop_list = []\n          }\n          // 售卖门店\n          if (this.cardData.support_sales !== SUPPORT_SALES.SPECIFIED_STORE) {\n            // 不是多门店\n            this.cardData.sell_shop_list = []\n          }\n          // 售卖门店\n          if (\n            this.cardData.admission_range === ADMISSION_RANGE.GENERAL_STORE &&\n            this.cardData.support_sales === SUPPORT_SALES.ENTRY_STORE\n          ) {\n            // 多门店 && 支持入场门店\n            this.cardData.sell_shop_list = cloneDeep(\n              this.cardData.admission_shop_list\n            )\n          }\n          // 价格梯度\n          let p = []\n          switch (this.cardData.price_setting) {\n            case PRICE_SETTING.UNIFORM_PRICE:\n              // 品牌统一定价\n              this.rallyPriceList.forEach(i => {\n                p.push({\n                  unit: +i.time.unit,\n                  num: +i.time.num,\n                  rally_price: +i.rally_price,\n                  frozen_day: +i.frozen_day,\n                  gift_unit: +i.gift_unit\n                })\n              })\n              break\n            case PRICE_SETTING.SHOP_PRICE:\n              // 门店自主定价\n              this.shopPriceList.forEach(i => {\n                p.push({\n                  unit: +i.time.unit,\n                  num: +i.time.num,\n                  min_price: +i.rally_price.min_price,\n                  max_price: +i.rally_price.max_price,\n                  frozen_day: +i.frozen_day,\n                  gift_unit: +i.gift_unit\n                })\n              })\n              break\n          }\n          this.cardData.special_note = values.cardData.special_note\n          this.cardData.price_gradient = cloneDeep(p)\n          // 时间\n          this.cardData.start_time = `${this.start_time.format('YYYY-MM-DD')}`\n          this.cardData.end_time = `${this.end_time.format('YYYY-MM-DD')}`\n          // 卡id\n          this.cardData.id = +this.$searchQuery.id\n          // 转让\n          this.cardData.num = this.cardData._is_transfer\n            ? +values.cardData.num\n            : undefined\n          if (!this.isFamilyCard) {\n            this.cardData.support_member_num = 1\n            this.cardData.card_type = CARD_TYPE.PERIOD\n          } else {\n            this.cardData.support_member_num =\n              values.cardData.support_member_num\n            this.cardData.card_type = CARD_TYPE.MORE_PERIOD\n          }\n          this.editService.editCard(this.cardData).subscribe(res => {\n            this.$router.push({\n              name: 'brand-product-card-member-list-all'\n            })\n          })\n        }\n      })\n    },\n    // 增加入场门店\n    admission_range_change(data) {\n      this.cardData.admission_shop_list = cloneDeep(data)\n      this.syncAdmissionShop()\n    },\n    // 入场门店支持方式change\n    admission_range(data) {\n      this.cardData.admission_range = data.target.value\n      // 入场门店变化时，售卖门店同时变化\n      this.form.setFieldsValue({\n        'cardData.support_sales': SUPPORT_SALES.ALL_STORE,\n        'cardData.price_setting': PRICE_SETTING.UNIFORM_PRICE\n      })\n      this.cardData.support_sales = SUPPORT_SALES.ALL_STORE\n      this.cardData.price_setting = PRICE_SETTING.UNIFORM_PRICE\n      this.priceValidatorText = ''\n      this.syncAdmission()\n    },\n    // 价格设置方式change\n    price_range(data) {\n      this.cardData.price_setting = data.target.value\n    },\n    // 增加品牌价格\n    brand_price_add() {\n      let key = parseInt(Math.random() * 999999).toString()\n      this.rallyPriceList.push({\n        key,\n        time: {\n          unit: 2,\n          num: null\n        },\n        rally_price: null,\n        frozen_day: null,\n        gift_unit: null\n      })\n    },\n    // 删除品牌价格\n    brand_price_delete(index) {\n      this.rallyPriceList.splice(index, 1)\n    },\n    // 品牌价格梯度-期限\n    brandPriceSettingHandleChange({ value, key, col, prop }) {\n      if (prop !== undefined) {\n        this.rallyPriceList[key][col][prop] = value\n      } else {\n        this.rallyPriceList[key][col] = value\n      }\n    },\n    // 增加门店价格\n    shop_price_add() {\n      let key = parseInt(Math.random() * 999999).toString()\n      this.shopPriceList.push({\n        key,\n        time: {\n          unit: 2,\n          num: null\n        },\n        rally_price: {\n          min_price: null,\n          max_price: null\n        },\n        frozen_day: null,\n        gift_unit: null\n      })\n    },\n    // 删除门店价格\n    shop_price_delete(index) {\n      this.shopPriceList.splice(index, 1)\n    },\n    // 门店价格梯度-期限\n    shopPriceSettingHandleChange({ value, key, col, prop }) {\n      if (prop !== undefined) {\n        this.shopPriceList[key][col][prop] = value\n      } else {\n        this.shopPriceList[key][col] = value\n      }\n    },\n    // 支持售卖门店change\n    support_range(data) {\n      this.cardData.support_sales = data.target.value\n    },\n    // 增加售卖门店\n    sales_shop_change(data) {\n      this.cardData.sell_shop_list = cloneDeep(data)\n    },\n    // 售卖时间-start\n    disabledStartDate(startValue) {\n      const endValue = this.end_time\n      if (!endValue) {\n        // 结束时间未选择\n        return (\n          startValue.valueOf() <\n          moment()\n            .startOf('day')\n            .valueOf()\n        )\n      }\n      let start =\n        endValue.valueOf() >\n        moment()\n          .add(30, 'y')\n          .valueOf()\n          ? moment(endValue)\n              .subtract(30, 'y')\n              .valueOf()\n          : moment()\n              .startOf('day')\n              .valueOf()\n      return (\n        startValue.valueOf() < start ||\n        startValue.valueOf() > moment(endValue).valueOf()\n      )\n    },\n    start_time_change(data) {\n      this.start_time = cloneDeep(data)\n    },\n    handleStartOpenChange(open) {\n      if (!open) {\n        this.cardData.endOpen = true\n      }\n    },\n    // 售卖时间-end\n    end_time_change(data) {\n      this.end_time = cloneDeep(data)\n    },\n    handleEndOpenChange(open) {\n      this.cardData.endOpen = open\n    },\n    disabledEndDate(endValue) {\n      const startValue = this.start_time\n      if (!startValue) {\n        // 开始时间未选择\n        return (\n          endValue.valueOf() <\n          moment()\n            .startOf('day')\n            .valueOf()\n        )\n      }\n      return (\n        endValue.valueOf() >=\n          moment(startValue)\n            .add(30, 'y')\n            .valueOf() ||\n        endValue.valueOf() < moment(startValue).valueOf() ||\n        endValue.valueOf() <\n          moment()\n            .startOf('day')\n            .valueOf()\n      )\n    },\n    // moment\n    moment,\n    range(start, end) {\n      const result = []\n      for (let i = start; i < end; i++) {\n        result.push(i)\n      }\n      return result\n    },\n    // 转让\n    transfer(e) {\n      this.cardData._is_transfer = e.target.checked\n      // 重置转让费用的校验\n      this.form.resetFields(['cardData.num'])\n    },\n    // 价格梯度校验\n    priceValidator(type) {\n      let fnName =\n        type === PRICE_SETTING.UNIFORM_PRICE\n          ? 'brandPriceValidataArray'\n          : 'shopPriceValidataArray'\n      let validata = this[fnName].length\n        ? this[fnName].every(i =>\n            this.pattern.NUM_FLOAT(1).test(i.split('-')[1])\n          )\n        : false\n      this.priceValidatorText = validata ? '' : '请输入正确的价格'\n    },\n    onCardBgChange(e) {\n      this.cardBgValidatorText = ''\n    },\n    // 卡背景校验\n    cardBgValidator() {\n      let validata = this.cardData.card_bg.image_key !== ''\n      this.cardBgValidatorText = validata ? '' : '请上传卡背景'\n    }\n  },\n  watch: {\n    'cardData._is_transfer': {\n      deep: true,\n      handler(newVal, oldVal) {\n        this.cardData.is_transfer = +newVal\n      }\n    },\n    'cardData.unit': {\n      deep: true,\n      handler() {\n        if (!this.transfer_unit_is_first) {\n          this.form.resetFields(['cardData.num'])\n        }\n        this.transfer_unit_is_first = false\n      }\n    },\n    'cardData.admission_shop_list': {\n      deep: true,\n      handler() {\n        let v = this.cardData.admission_range\n        this.cardData.admission_range = v\n        this.form.setFieldsValue({\n          'cardData.admission_range': v\n        })\n      }\n    },\n    'cardData.sell_shop_list': {\n      deep: true,\n      handler() {\n        let v = this.cardData.support_sales\n        this.cardData.support_sales = v\n        this.form.setFieldsValue({\n          'cardData.support_sales': v\n        })\n      }\n    }\n  },\n  computed: {\n    // 支持售卖门店\n    support_sales_list() {\n      let arr = cloneDeep(this.supportSales)\n      let index =\n        this.cardData.admission_range === ADMISSION_RANGE.GENERAL_STORE\n          ? 999\n          : 2\n      arr.splice(index, 1)\n      return arr\n    },\n    // 售卖方式\n    sell_type_list() {\n      let sell_type = cloneDeep(this.sellType)\n      let arr = []\n      sell_type.forEach(i => {\n        arr.push({\n          value: i.value,\n          label: i.label\n        })\n      })\n      if (!this.cardData.appConfig) {\n        remove(arr, i => i.value === SELL_TYPE.CLIENT)\n      }\n      return arr\n    },\n    // 品牌统一定价-价格梯度校验数组\n    brandPriceValidataArray() {\n      let array = []\n      this.rallyPriceList.forEach(i => {\n        Object.keys(i).forEach(o => {\n          array.push(o === 'time' ? `time-${i.time.num}` : `${o}-${i[o]}`)\n        })\n      })\n      return array\n    },\n    // 门店自主定价-价格梯度校验数组\n    shopPriceValidataArray() {\n      let array = []\n      this.shopPriceList.forEach(i => {\n        Object.keys(i).forEach(o => {\n          let value = []\n          if (o === 'time') {\n            value = [`time-${i.time.num}`]\n          } else if (o === 'rally_price') {\n            value = [\n              `min_price-${i.rally_price.min_price}`,\n              `max_price-${i.rally_price.max_price}`\n            ]\n          } else {\n            value = [`${o}-${i[o]}`]\n          }\n          array.push(...value)\n        })\n      })\n      return array\n    },\n    // 价格是否校验通过\n    priceIsOk() {\n      return this.priceValidatorText === ''\n    },\n    // 卡背景是否校验通过\n    cardBgIsOk() {\n      return this.cardBgValidatorText === ''\n    },\n    // 转让设置的min\n    transferMin() {\n      // return this.cardData.transfer_unit === 1 ? 1 : 0.1\n      return 0\n    },\n    // 转让设置的max\n    transferMax() {\n      return this.cardData.unit === UNIT.PERCENT ? 100 : 999999.9\n    },\n    // 是否是多人卡\n    isFamilyCard() {\n      return this.$searchQuery.type === 'family-card'\n    }\n  }\n}\n",null]}