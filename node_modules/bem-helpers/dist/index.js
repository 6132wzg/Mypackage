"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Joins a BEM block with an element.
 * @param block The BEM block on the left side of the join.
 * @param element The BEM element on the right side of the join.
 */
function joinBEMElement(
    /**
     * BEM block.
     */
    block, 
    /**
     * BEM element.
     */
    element, 
    /**
     * Appears between the BEM block and element (e.g., block__element).
     */
    separator) {
    /**
     * Appears between the BEM block and element (e.g., block__element).
     */
    if (separator === void 0) { separator = '__'; }
    if (!block) {
        throw new Error('Required BEM block is missing or empty');
    }
    if (!element) {
        throw new Error('Required BEM element is missing or empty');
    }
    return [block, element].join(separator);
}
exports.joinBEMElement = joinBEMElement;
/**
 * Joins a BEM block or element with any number of modifiers.
 */
exports.joinBEMModifiers = function (blockOrElement, modifiers, separator) {
    if (modifiers === void 0) { modifiers = {}; }
    if (separator === void 0) { separator = '--'; }
    return ([blockOrElement]
        .concat(Object.keys(modifiers)
        .filter(function (m) { return modifiers[m]; })
        .map(function (m) { return [blockOrElement, m].join(separator); })));
};
/**
 * Returns a function that can be used to construct BEM class names.
 */
function BEMBlock(
    /**
     * The name of the BEM block that will prefix all class names.
     */
    blockName, 
    /**
     * Options for constructing BEM class names.
     */
    _a) {
    var 
    /**
     * Options for constructing BEM class names.
     */
    _b = _a === void 0 ? {} : _a, _c = _b.elementSeparator, elementSeparator = _c === void 0 ? '__' : _c, _d = _b.modifierSeparator, modifierSeparator = _d === void 0 ? '--' : _d;
    return (function (elementOrModifiers, modifiers) {
        if (modifiers === void 0) { modifiers = {}; }
        return ((typeof elementOrModifiers !== 'string')
            ? exports.joinBEMModifiers(blockName, elementOrModifiers, modifierSeparator)
            : exports.joinBEMModifiers(joinBEMElement(blockName, elementOrModifiers, elementSeparator), modifiers, modifierSeparator)).join(' ');
    });
}
exports.BEMBlock = BEMBlock;
