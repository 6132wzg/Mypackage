{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/ring/ring.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/chart/ring/ring.vue","mtime":1600926555670},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport \"core-js/modules/es6.function.name\";\nimport _toConsumableArray from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { View } from 'st-data-set';\nimport { Chart } from '@antv/g2';\nimport { toKFilter, thousandsFilter, setColorMap, colorToRgba } from \"../filters\";\nimport chartMixin from \"../mixin\";\nimport { chartConfig } from \"./ring.config\";\nexport default {\n  name: 'MultiLine',\n  mixins: [chartMixin],\n  props: {\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    dataItem: {\n      type: Function,\n      default: function _default(row) {\n        return row;\n      }\n    },\n    // 设置 图例、x轴、y轴 对应的key值\n    dataItemKeyMap: {\n      type: Object,\n      default: function _default() {\n        return {\n          name: 'name',\n          // 图例名\n          key: 'key',\n          // 图例name对应key值\n          value: 'value',\n          // y轴值\n          x: 'date' // x轴值\n\n        };\n      }\n    },\n    total: {\n      type: [Number, String],\n      default: 0\n    },\n    unitBack: {\n      type: Boolean,\n      default: false\n    },\n    unit: {\n      type: String,\n      default: '¥'\n    },\n    totalName: {\n      type: String,\n      default: ''\n    },\n    tooltipId: {\n      type: String,\n      default: ''\n    },\n    tooltipMap: {\n      type: Object,\n      default: function _default() {}\n    },\n    // 数组排序对应颜色顺序，设置对应字段的颜色；当fold为true时 fields又作为展开字段集,用于字段的展开\n    fields: {\n      type: [Boolean, Array],\n      default: function _default() {\n        return [];\n      }\n    },\n    fieldKey: {\n      type: String,\n      default: 'key'\n    },\n    // 颜色配置数组\n    colors: {\n      type: Array,\n      default: function _default() {\n        return ['#3F66F6', '#798AFF', '#06DB8C', '#77FF74', '#B8F10F', '#FFE679', '#FFB946', '#FF6466', '#C87FFF', '#484F83'];\n      }\n    },\n    // 是否按照颜色数组的顺序 循环设置图例颜色（即图例顺序与colors顺序一一对应），默认为false，根据图例key设置图例颜色\n    colorIsQueue: {\n      type: Boolean,\n      default: false\n    },\n    colorMap: {\n      type: [Object, Array, Boolean],\n      default: false\n    },\n    height: {\n      type: Number,\n      default: 210\n    },\n    padding: {\n      type: [Array, Number],\n      default: function _default() {\n        return ['auto', 185, 'auto', 'auto'];\n      }\n    }\n  },\n  watch: {\n    // 当浏览器窗口变小时，tooltip会消失问题\n    resize: function resize() {\n      var _this = this;\n\n      var h = this.$createElement;\n      this.$nextTick(function () {\n        var tooltipMap = _this.tooltipMap;\n\n        var _loop = function _loop(key) {\n          tooltipMap[key] && new Vue({\n            components: {\n              StHelpTooltip: StHelpTooltip\n            },\n            render: function render(h) {\n              return h(\"st-help-tooltip\", {\n                \"attrs\": {\n                  \"id\": tooltipMap[key]\n                }\n              });\n            }\n          }).$mount(\"#legend-\".concat(key));\n        };\n\n        for (var key in tooltipMap) {\n          _loop(key);\n        }\n\n        if (_this.tooltipId) {\n          var $s = _this.$el.querySelector.bind(_this.$el);\n\n          var component = new Vue({\n            components: {\n              StHelpTooltip: StHelpTooltip\n            },\n            render: function render(h) {\n              return h(\"st-help-tooltip\", {\n                \"attrs\": {\n                  \"id\": _this.tooltipId\n                }\n              });\n            }\n          }).$mount();\n          $s(\"#guide-name-tooltip\".concat(_this.tooltipId)).appendChild(component.$el);\n        }\n      });\n    }\n  },\n  data: function data() {\n    return {\n      type: 'Ring',\n      dv: new View()\n    };\n  },\n  computed: {\n    dataSource: function dataSource() {\n      //传入的总计为0时，多一个环形图为0的灰色环形图\n      if (this.total == 0 || !this.total) {\n        return [{\n          key: 0,\n          name: 'empty',\n          value: 1,\n          percent: 1\n        }].concat(_toConsumableArray(this.data));\n      }\n\n      return [{\n        key: 0,\n        name: 'empty',\n        value: 0,\n        percent: 0\n      }].concat(_toConsumableArray(this.data));\n    },\n\n    /**\n     * 图例枚举配置获取\n     * fieldsKey  为图例名对应的key值数组\n     * fieldsName 为图例名 数组                用于数据展开的依据\n     * fieldsObj  为图例名与其key值 的对应关系\n     * */\n    $fieldsOpts: function $fieldsOpts() {\n      var _this2 = this;\n\n      var fieldsKey = [];\n      var fieldsName = [];\n      var fieldsObj = {};\n      var data = this.dataSource;\n      data.map(function (item) {\n        fieldsKey.push(item[_this2.fieldKey]);\n        fieldsName.push(item.name);\n        fieldsObj[item[_this2.fieldKey]] = item.name;\n      });\n\n      if (this.fields.length) {\n        fieldsKey = [].concat(_toConsumableArray(this.fields), _toConsumableArray(fieldsKey));\n      }\n\n      fieldsKey = _toConsumableArray(new Set(fieldsKey));\n      fieldsName = _toConsumableArray(new Set(fieldsName));\n      return {\n        colorMap: this.colorMap,\n        fieldsKey: fieldsKey,\n        fieldsName: fieldsName,\n        fieldsObj: fieldsObj\n      };\n    },\n    // 构造颜色map\n    $colorMap: function $colorMap() {\n      // 根据 图例枚举，以图例name为key值，生成图例颜色map对应关系\n      return setColorMap(this.$fieldsOpts, this.colors, this.colorIsQueue);\n    },\n    opt$: function opt$() {\n      var _this$$attrs = this.$attrs,\n          _this$$attrs$legend = _this$$attrs.legend,\n          legend = _this$$attrs$legend === void 0 ? {} : _this$$attrs$legend,\n          _this$$attrs$guide = _this$$attrs.guide,\n          guide = _this$$attrs$guide === void 0 ? {} : _this$$attrs$guide;\n      return {\n        legend: _objectSpread({\n          position: 'right-center',\n          layout: 'line'\n        }, legend),\n        guide: _objectSpread({\n          layout: ''\n        }, guide)\n      };\n    }\n  },\n  methods: {\n    initDv: function initDv() {\n      var _this3 = this;\n\n      this.dv.source(this.dataSource);\n      this.dv.transform({\n        type: 'map',\n        callback: function callback(row, index) {\n          // 根据自定义配置项 格式化数据\n          for (var key in _this3.dataItemKeyMap) {\n            var itemDt = row[_this3.dataItemKeyMap[key]];\n            if (itemDt) row[key] = itemDt;\n          }\n\n          ;\n          row.$idx = index, row.value = +(row.value || 0);\n          return _this3.dataItem ? _this3.dataItem(row) : row;\n        }\n      }).transform({\n        type: 'percent',\n        field: 'value',\n        // 统计销量\n        dimension: 'name',\n        // 每年的占比\n        as: 'percent' // 结果存储在 percent 字段\n\n      });\n    },\n    renderChart: function renderChart() {\n      console.log('chart init', this.dv.rows);\n      this.chart = new Chart(_objectSpread({}, this.opts, {\n        container: this.$el,\n        data: this.dv,\n        forceFit: true,\n        height: this.height,\n        padding: ['auto', 185, 'auto', 'auto']\n      }));\n\n      if (this.isEmpty) {\n        this.chart.tooltip(false);\n        this.chart.legend('name', false);\n      }\n\n      this.chart.render();\n      this.chartEvent();\n    },\n    // 如果配置参数在单独的配置文件中这个方法必须设置\n    getChartConfig: function getChartConfig() {\n      // chartConfig 输出配置参数的方法\n      return chartConfig(this);\n    },\n    // 更新opts配置 需要重新计算最新的opts、并重新渲染\n    changeData: function changeData() {\n      this.chart.destroy();\n      this.renderChart();\n    },\n    valFormat: function valFormat(val) {\n      return Number((+val).toFixed(1)).toLocaleString();\n    },\n    resetTotal: function resetTotal() {\n      var $s = this.$el.querySelector.bind(this.$el);\n      $s('.guide-value').textContent = this.valFormat(this.total) || 0; // 总计的时候显示tooltip\n\n      $s('.guide-name-tooltip').setAttribute('style', this.tooltipId ? 'display: inline' : 'display: none');\n      $s('.guide-name-text').textContent = this.totalName;\n    },\n    setUnit: function setUnit(e) {\n      var $s = this.$el.querySelector.bind(this.$el); // 当环形图总计都是零的时候隐藏tooltip\n\n      if (e.data._origin.name === 'empty') {\n        $s('.g2-tooltip').setAttribute('style', 'display: none');\n        return;\n      }\n\n      var origin = e.data._origin;\n      var shapes = e.shapes;\n      var geom = e.geom;\n      $s('.guide-value').textContent = this.valFormat(origin.value);\n      $s('.guide-name-text').textContent = origin.name; // 不是总计的时候隐藏tooltip\n\n      $s('.guide-name-tooltip').setAttribute('style', 'display: none');\n    },\n    chartEvent: function chartEvent() {\n      var _this4 = this;\n\n      // 鼠标进入环形显示相关的值\n      this.chart.on('interval:mouseenter', function (ev) {\n        var shape = ev.shape;\n        var origin = ev.data._origin;\n\n        if (origin.name === 'empty') {\n          _this4.chart.getAllGeoms()[0].clearActivedShapes(shape);\n        }\n\n        _this4.setUnit(ev);\n      }); // 鼠标离开显示总值\n\n      this.chart.on('interval:mouseleave', function (e) {\n        _this4.resetTotal();\n      });\n    }\n  }\n};",{"version":3,"sources":["ring.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- 多维度曲线统计图\n  数据格式：\n    data[]\n      item{}\n        name  图例名\n        key   图例name对应key值\n        value y轴值\n        x     x轴值\n  或 fold属性 为 true 代表数据格式为折叠形式，需通过自定义 dataItem 格式化展开后的数据 以组成上面格式的数据\n    data[]\n      item{}\n        name: value 组合\n        key:  value 组合\n        x     x轴值\n  -->\n\n<template>\n  <div class=\"chart-ring\"></div>\n</template>\n\n<script>\nimport { View } from 'st-data-set'\nimport { Chart } from '@antv/g2'\nimport {\n  toKFilter,\n  thousandsFilter,\n  setColorMap,\n  colorToRgba\n} from '../filters'\nimport chartMixin from '../mixin'\nimport { chartConfig } from './ring.config'\n\nexport default {\n  name: 'MultiLine',\n  mixins: [chartMixin],\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    dataItem: {\n      type: Function,\n      default: row => row\n    },\n    // 设置 图例、x轴、y轴 对应的key值\n    dataItemKeyMap: {\n      type: Object,\n      default: () => {\n        return {\n          name: 'name', // 图例名\n          key: 'key', // 图例name对应key值\n          value: 'value', // y轴值\n          x: 'date' // x轴值\n        }\n      }\n    },\n    total: {\n      type: [Number, String],\n      default: 0\n    },\n    unitBack: {\n      type: Boolean,\n      default: false\n    },\n    unit: {\n      type: String,\n      default: '¥'\n    },\n    totalName: {\n      type: String,\n      default: ''\n    },\n    tooltipId: {\n      type: String,\n      default: ''\n    },\n    tooltipMap: {\n      type: Object,\n      default: () => {}\n    },\n    // 数组排序对应颜色顺序，设置对应字段的颜色；当fold为true时 fields又作为展开字段集,用于字段的展开\n    fields: {\n      type: [Boolean, Array],\n      default: () => []\n    },\n    fieldKey: {\n      type: String,\n      default: 'key'\n    },\n    // 颜色配置数组\n    colors: {\n      type: Array,\n      default: () => [\n        '#3F66F6',\n        '#798AFF',\n        '#06DB8C',\n        '#77FF74',\n        '#B8F10F',\n        '#FFE679',\n        '#FFB946',\n        '#FF6466',\n        '#C87FFF',\n        '#484F83'\n      ]\n    },\n    // 是否按照颜色数组的顺序 循环设置图例颜色（即图例顺序与colors顺序一一对应），默认为false，根据图例key设置图例颜色\n    colorIsQueue: {\n      type: Boolean,\n      default: false\n    },\n    colorMap: {\n      type: [Object, Array, Boolean],\n      default: false\n    },\n    height: {\n      type: Number,\n      default: 210\n    },\n    padding: {\n      type: [Array, Number],\n      default: () => ['auto', 185, 'auto', 'auto']\n    }\n  },\n  watch: {\n    // 当浏览器窗口变小时，tooltip会消失问题\n    resize() {\n      this.$nextTick(() => {\n        const tooltipMap = this.tooltipMap\n        for (let key in tooltipMap) {\n          tooltipMap[key] &&\n            new Vue({\n              components: {\n                StHelpTooltip\n              },\n              render: h => <st-help-tooltip id={tooltipMap[key]} />\n            }).$mount(`#legend-${key}`)\n        }\n        if (this.tooltipId) {\n          const $s = this.$el.querySelector.bind(this.$el)\n          const component = new Vue({\n            components: {\n              StHelpTooltip\n            },\n            render: h => <st-help-tooltip id={this.tooltipId} />\n          }).$mount()\n          $s(`#guide-name-tooltip${this.tooltipId}`).appendChild(component.$el)\n        }\n      })\n    }\n  },\n  data() {\n    return {\n      type: 'Ring',\n      dv: new View()\n    }\n  },\n  computed: {\n    dataSource() {\n      //传入的总计为0时，多一个环形图为0的灰色环形图\n      if (this.total == 0 || !this.total) {\n        return [{ key: 0, name: 'empty', value: 1, percent: 1 }, ...this.data]\n      }\n      return [{ key: 0, name: 'empty', value: 0, percent: 0 }, ...this.data]\n    },\n    /**\n     * 图例枚举配置获取\n     * fieldsKey  为图例名对应的key值数组\n     * fieldsName 为图例名 数组                用于数据展开的依据\n     * fieldsObj  为图例名与其key值 的对应关系\n     * */\n    $fieldsOpts() {\n      let fieldsKey = []\n      let fieldsName = []\n      let fieldsObj = {}\n      const data = this.dataSource\n      data.map(item => {\n        fieldsKey.push(item[this.fieldKey])\n        fieldsName.push(item.name)\n        fieldsObj[item[this.fieldKey]] = item.name\n      })\n      if (this.fields.length) {\n        fieldsKey = [...this.fields, ...fieldsKey]\n      }\n      fieldsKey = [...new Set(fieldsKey)]\n      fieldsName = [...new Set(fieldsName)]\n\n      return {\n        colorMap: this.colorMap,\n        fieldsKey,\n        fieldsName,\n        fieldsObj\n      }\n    },\n    // 构造颜色map\n    $colorMap() {\n      // 根据 图例枚举，以图例name为key值，生成图例颜色map对应关系\n      return setColorMap(this.$fieldsOpts, this.colors, this.colorIsQueue)\n    },\n    opt$() {\n      const { legend = {}, guide = {} } = this.$attrs\n      return {\n        legend: {\n          position: 'right-center',\n          layout: 'line', // line 同行  vertical 分上下两行\n          ...legend\n        },\n        guide: {\n          layout: '', // reverse 上下文案反转\n          ...guide\n        }\n      }\n    }\n  },\n  methods: {\n    initDv() {\n      this.dv.source(this.dataSource)\n      this.dv\n        .transform({\n          type: 'map',\n          callback: (row, index) => {\n            // 根据自定义配置项 格式化数据\n            for (let key in this.dataItemKeyMap) {\n              const itemDt = row[this.dataItemKeyMap[key]]\n              if (itemDt) row[key] = itemDt\n            }\n            ;(row.$idx = index), (row.value = +(row.value || 0))\n            return this.dataItem ? this.dataItem(row) : row\n          }\n        })\n        .transform({\n          type: 'percent',\n          field: 'value', // 统计销量\n          dimension: 'name', // 每年的占比\n          as: 'percent' // 结果存储在 percent 字段\n        })\n    },\n\n    renderChart() {\n      console.log('chart init', this.dv.rows)\n      this.chart = new Chart({\n        ...this.opts,\n        container: this.$el,\n        data: this.dv,\n        forceFit: true,\n        height: this.height,\n        padding: ['auto', 185, 'auto', 'auto']\n      })\n      if (this.isEmpty) {\n        this.chart.tooltip(false)\n        this.chart.legend('name', false)\n      }\n      this.chart.render()\n      this.chartEvent()\n    },\n    // 如果配置参数在单独的配置文件中这个方法必须设置\n    getChartConfig() {\n      // chartConfig 输出配置参数的方法\n      return chartConfig(this)\n    },\n    // 更新opts配置 需要重新计算最新的opts、并重新渲染\n    changeData() {\n      this.chart.destroy()\n      this.renderChart()\n    },\n    valFormat(val) {\n      return Number((+val).toFixed(1)).toLocaleString()\n    },\n    resetTotal() {\n      const $s = this.$el.querySelector.bind(this.$el)\n      $s('.guide-value').textContent = this.valFormat(this.total) || 0\n      // 总计的时候显示tooltip\n      $s('.guide-name-tooltip').setAttribute(\n        'style',\n        this.tooltipId ? 'display: inline' : 'display: none'\n      )\n      $s('.guide-name-text').textContent = this.totalName\n    },\n    setUnit(e) {\n      const $s = this.$el.querySelector.bind(this.$el)\n      // 当环形图总计都是零的时候隐藏tooltip\n      if (e.data._origin.name === 'empty') {\n        $s('.g2-tooltip').setAttribute('style', 'display: none')\n        return\n      }\n      const origin = e.data._origin\n      const shapes = e.shapes\n      const geom = e.geom\n\n      $s('.guide-value').textContent = this.valFormat(origin.value)\n      $s('.guide-name-text').textContent = origin.name\n      // 不是总计的时候隐藏tooltip\n      $s('.guide-name-tooltip').setAttribute('style', 'display: none')\n    },\n    chartEvent() {\n      // 鼠标进入环形显示相关的值\n      this.chart.on('interval:mouseenter', ev => {\n        const shape = ev.shape\n        const origin = ev.data._origin\n        if (origin.name === 'empty') {\n          this.chart.getAllGeoms()[0].clearActivedShapes(shape)\n        }\n        this.setUnit(ev)\n      })\n      // 鼠标离开显示总值\n      this.chart.on('interval:mouseleave', e => {\n        this.resetTotal()\n      })\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views/biz-components/chart/ring"}]}