{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/app/plugin/seckill/components#/product-setting.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/app/plugin/seckill/components#/product-setting.vue","mtime":1599215338694},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  memberCardColumns,\n  depositCardColumns,\n  personalCourseLevelColumns,\n  personalCourseColumns\n} from './product-setting.config'\nimport { ProductSettingService } from './product-setting.service'\nimport { isEqual, merge } from 'lodash-es'\nimport { typeOf } from '@/utils/type'\nimport { listToMap } from '@/utils/list-to-map'\n\nexport default {\n  name: 'BrandAppPluginDiscountAdd',\n  bem: {\n    b: 'brand-app-plugin-discount-add'\n  },\n  model: {\n    props: 'value',\n    event: 'change'\n  },\n  props: {\n    value: {\n      type: Object,\n      default: () => {}\n    },\n    form: {\n      type: Object,\n      default: () => {}\n    },\n    decorators: {\n      type: Object,\n      default: () => {}\n    },\n    isEdit: {\n      type: Boolean,\n      defalut: false\n    }\n  },\n  serviceInject() {\n    return {\n      service: ProductSettingService\n    }\n  },\n  rxState() {\n    return {\n      loading: this.service.loading$,\n      memberList: this.service.memberList$,\n      depositList: this.service.depositList$,\n      personalList: this.service.personalList$,\n      coachLevelList: this.service.coachLevelList$,\n      brand: this.service.brand$\n    }\n  },\n  data() {\n    return {\n      selectedRowKeys: []\n    }\n  },\n  watch: {\n    'info.product_type': {\n      handler(newVal, oldVal) {\n        if (isEqual(newVal, oldVal)) return\n        if (newVal === 3) {\n          this.service.getPersonalList().subscribe()\n        }\n      }\n    },\n  },\n  computed: {\n    // 双向绑定值\n    info: {\n      get() {\n        return this.value\n      },\n      set(newVal) {\n        console.log('product-setting-info-change', { ...newVal })\n        this.$emit('change', newVal)\n      }\n    },\n    tableList: {\n      get() {\n        let list = []\n        if (this.info.product_type === 1) {\n          const itemArr = this.memberList.filter(item => {\n            return item.id === this.info.product_id\n          })\n          list = itemArr.length ? itemArr[0].product_spec : []\n        }\n        if (this.info.product_type === 2) {\n          const itemArr = this.depositList.filter(item => {\n            return item.id == this.info.product_id\n          })\n          list = itemArr.length ? itemArr[0].product_spec : []\n        }\n        list = list.map(item => ({\n          ...item,\n          product_sku_id: item.id,\n          discount_price: item.discount_price || null,\n          ...(this.discountInfoMap[item.id] || {})\n        }))\n        if (this.info.product_type === 3) {\n          if (this.brand.priceModel !== 2) {\n            list = [{\n              product_sku_id: 0,\n              hour: this.info.limit_course_num,\n            }]\n          }\n          list = this.coachLevelList.map(item => ({\n            ...item,\n            product_sku_id: item.id,\n            hour: this.info.limit_course_num || '--',\n            discount_price: item.discount_price || null,\n            ...(this.discountInfoMap[item.id] || {})\n          }))\n        }\n        return list || []\n      },\n      set(value) {\n        this.info.discount_info = value.map(item => ({\n          product_sku_id: item.id,\n          discount_price: item.discount_price || null\n        }))\n      }\n    },\n    discountInfoMap() {\n      return listToMap(this.discount_info, { keyField: 'product_sku_id'})\n    },\n    columns() {\n      if (this.info.product_type === 3) {\n        return this.brand.priceModel === 2\n          ? personalCourseLevelColumns(this)\n          : personalCourseColumns(this)\n      }\n      if (this.info.product_type === 2) {\n        return depositCardColumns(this)\n      }\n      if (this.info.product_type === 1) {\n        return memberCardColumns(this)\n      }\n      return []\n    }\n  },\n  mounted() {\n    this.service.getMemberList().subscribe()\n    this.service.getDepositList().subscribe()\n    this.service.getPersonalList().subscribe()\n  },\n  methods: {\n    onTypeChange(e) {\n      this.valueChange('info.product_type', e)\n      this.setFieldsValue('info.product_id', '')\n      this.setFieldsValue\n      this.selectedRowKeys = []\n    },\n    onTableChange(value) {\n      this.selectedRowKeys = value\n      console.log(value)\n    },\n    onTablePriceChange(index, val) {\n      console.log(index,val )\n      let list = this.tableList\n      list.splice(index, 1, {\n        ...this.tableList[index],\n        discount_price: val\n      })\n      this.tableList = list\n    },\n    onMemberChange() {\n      this.setFieldsValue('info.product_id', this.memberList[0].id)\n    },\n    onDepositChange(val) {\n      this.setFieldsValue('info.product_id', this.depositList[0].id)\n    },\n    onPersonalChange(val) {\n      this.setFieldsValue('info.product_id', this.personalList[0].id)\n      this.service.getCoachLevelList(val).subscribe()\n    },\n    // 将form表单变更的值更新到v-model上 （一些判断条件使用的是info，所以需要同步到info，并更新v-model）\n    valueChange(key, e, cb) {\n      console.log('product-setting-info-value-change', key, e)\n      // this.info[key] = e\n      this.setValue(key, e)\n      this.$emit('change', this.info)\n      cb && cb(e)\n    },\n    setFieldsValue(key, value) {\n      this.setValue(key, value)\n      this.$nextTick(() => {\n        this.form.setFieldsValue({ [key]: value })\n      })\n    },\n    // 更新组件属性值 (如：key = 'info.product_type',value = 2   ===>   this.info.product_type = 2)\n    setValue(key, value) {\n      if (typeOf(key) === 'string') {\n        const keyArr = key.split('.')\n        const len = keyArr.length - 1\n        keyArr.reduce((cur, key, index) => {\n          if (!cur[key] && index < len) {\n            throw `${key}不存在`\n          }\n          if (index === len) {\n            // 如果 要更新的值， 新值都是对象则合并， 否则直接覆盖\n            if (typeOf(cur[key]) === 'object' && typeOf(value) === 'object') {\n              merge(cur[key], value)\n            } else {\n              cur[key] = value\n            }\n          }\n          return cur[key]\n        }, this)\n      } else {\n        merge(this, key)\n      }\n    }\n  }\n}\n",{"version":3,"sources":["product-setting.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"product-setting.vue","sourceRoot":"src/views/pages/brand/app/plugin/components#","sourcesContent":["<template>\n  <div>\n    <st-form-item required label=\"请选择商品类型\">\n      <a-select\n        placeholder=\"请选择\"\n        style=\"width: 470px\"\n        v-decorator=\"decorators.info.product_type\"\n        @change=\"onTypeChange\"\n        :disabled=\"isEdit\"\n      >\n        <a-select-option :value=\"1\">会员卡</a-select-option>\n        <a-select-option :value=\"2\">储值卡</a-select-option>\n        <a-select-option :value=\"3\">私教课</a-select-option>\n      </a-select>\n    </st-form-item>\n    <!-- 会员卡 -->\n    <template v-if=\"info.product_type === 1\">\n      <st-form-item required label=\"请选择会员卡\">\n        <a-select\n          placeholder=\"请选择\"\n          style=\"width: 470px\"\n          showSearch\n          v-decorator=\"decorators.info.product_id\"\n          @change=\"valueChange('info.product_id', $event, onMemberChange)\"\n          :disabled=\"isEdit\"\n        >\n          <a-select-option\n            :value=\"item.id\"\n            v-for=\"(item, index) in memberList\"\n            :key=\"index\"\n          >\n            {{ item.product_name }}\n          </a-select-option>\n        </a-select>\n      </st-form-item>\n    </template>\n    <!-- 储值卡 -->\n    <template v-if=\"info.product_type === 2\">\n      <st-form-item required label=\"请选择储值卡\">\n        <a-select\n          placeholder=\"请选择\"\n          style=\"width: 470px\"\n          showSearch\n          v-decorator=\"decorators.info.product_id\"\n          @change=\"valueChange('info.product_id', $event, onDepositChange)\"\n          :disabled=\"isEdit\"\n        >\n          <a-select-option\n            :value=\"item.id\"\n            v-for=\"(item, index) in depositList\"\n            :key=\"index\"\n          >\n            {{ item.product_name }}\n          </a-select-option>\n        </a-select>\n      </st-form-item>\n    </template>\n    <!-- 私教课 -->\n    <template v-if=\"info.product_type === 3\">\n      <st-form-item required label=\"请选择私教课\">\n        <a-select\n          style=\"width: 470px\"\n          placeholder=\"请选择\"\n          showSearch\n          v-decorator=\"decorators.info.product_id\"\n          @change=\"valueChange('info.product_id', $event, onPersonalChange)\"\n          :disabled=\"isEdit\"\n        >\n          <a-select-option\n            :value=\"item.id\"\n            v-for=\"item in personalList\"\n            :key=\"item.id\"\n          >\n            {{ item.product_name }}\n          </a-select-option>\n        </a-select>\n      </st-form-item>\n      <st-form-item required label=\"限定课时\">\n        <st-input-number\n          v-model=\"info.limit_course_num\"\n          placeholder=\"\"\n          style=\"width: 150px\"\n          :min=\"1\"\n          :max=\"9999\"\n        >\n          <span slot=\"addonAfter\">节</span>\n        </st-input-number>\n      </st-form-item>\n    </template>\n    <st-form-item required label=\"优惠设置\">\n      <a-card size=\"small\" style=\"width: 470px\">\n        <st-table\n          emptyText=\"暂无数据\"\n          rowKey=\"id\"\n          :columns=\"columns\"\n          :dataSource=\"tableList\"\n          :page=\"false\"\n          :scroll=\"{ y: 230 }\"\n          :rowSelection=\"{\n            onChange: onTableChange,\n            selectedRowKeys: selectedRowKeys\n          }\"\n        >\n          <span slot=\"discount_price\" slot-scope=\"text, record, index\">\n            <st-input-number\n              style=\"width: 130px\"\n              :min=\"0\"\n              :max=\"999999.9\"\n              :disabled=\"!selectedRowKeys.includes(record.id)\"\n              @change=\"onTablePriceChange(index, $event)\"\n            >\n              <span slot=\"addonAfter\">元</span>\n            </st-input-number>\n          </span>\n        </st-table>\n      </a-card>\n    </st-form-item>\n  </div>\n</template>\n<script>\nimport {\n  memberCardColumns,\n  depositCardColumns,\n  personalCourseLevelColumns,\n  personalCourseColumns\n} from './product-setting.config'\nimport { ProductSettingService } from './product-setting.service'\nimport { isEqual, merge } from 'lodash-es'\nimport { typeOf } from '@/utils/type'\nimport { listToMap } from '@/utils/list-to-map'\n\nexport default {\n  name: 'BrandAppPluginDiscountAdd',\n  bem: {\n    b: 'brand-app-plugin-discount-add'\n  },\n  model: {\n    props: 'value',\n    event: 'change'\n  },\n  props: {\n    value: {\n      type: Object,\n      default: () => {}\n    },\n    form: {\n      type: Object,\n      default: () => {}\n    },\n    decorators: {\n      type: Object,\n      default: () => {}\n    },\n    isEdit: {\n      type: Boolean,\n      defalut: false\n    }\n  },\n  serviceInject() {\n    return {\n      service: ProductSettingService\n    }\n  },\n  rxState() {\n    return {\n      loading: this.service.loading$,\n      memberList: this.service.memberList$,\n      depositList: this.service.depositList$,\n      personalList: this.service.personalList$,\n      coachLevelList: this.service.coachLevelList$,\n      brand: this.service.brand$\n    }\n  },\n  data() {\n    return {\n      selectedRowKeys: []\n    }\n  },\n  watch: {\n    'info.product_type': {\n      handler(newVal, oldVal) {\n        if (isEqual(newVal, oldVal)) return\n        if (newVal === 3) {\n          this.service.getPersonalList().subscribe()\n        }\n      }\n    },\n  },\n  computed: {\n    // 双向绑定值\n    info: {\n      get() {\n        return this.value\n      },\n      set(newVal) {\n        console.log('product-setting-info-change', { ...newVal })\n        this.$emit('change', newVal)\n      }\n    },\n    tableList: {\n      get() {\n        let list = []\n        if (this.info.product_type === 1) {\n          const itemArr = this.memberList.filter(item => {\n            return item.id === this.info.product_id\n          })\n          list = itemArr.length ? itemArr[0].product_spec : []\n        }\n        if (this.info.product_type === 2) {\n          const itemArr = this.depositList.filter(item => {\n            return item.id == this.info.product_id\n          })\n          list = itemArr.length ? itemArr[0].product_spec : []\n        }\n        list = list.map(item => ({\n          ...item,\n          product_sku_id: item.id,\n          discount_price: item.discount_price || null,\n          ...(this.discountInfoMap[item.id] || {})\n        }))\n        if (this.info.product_type === 3) {\n          if (this.brand.priceModel !== 2) {\n            list = [{\n              product_sku_id: 0,\n              hour: this.info.limit_course_num,\n            }]\n          }\n          list = this.coachLevelList.map(item => ({\n            ...item,\n            product_sku_id: item.id,\n            hour: this.info.limit_course_num || '--',\n            discount_price: item.discount_price || null,\n            ...(this.discountInfoMap[item.id] || {})\n          }))\n        }\n        return list || []\n      },\n      set(value) {\n        this.info.discount_info = value.map(item => ({\n          product_sku_id: item.id,\n          discount_price: item.discount_price || null\n        }))\n      }\n    },\n    discountInfoMap() {\n      return listToMap(this.discount_info, { keyField: 'product_sku_id'})\n    },\n    columns() {\n      if (this.info.product_type === 3) {\n        return this.brand.priceModel === 2\n          ? personalCourseLevelColumns(this)\n          : personalCourseColumns(this)\n      }\n      if (this.info.product_type === 2) {\n        return depositCardColumns(this)\n      }\n      if (this.info.product_type === 1) {\n        return memberCardColumns(this)\n      }\n      return []\n    }\n  },\n  mounted() {\n    this.service.getMemberList().subscribe()\n    this.service.getDepositList().subscribe()\n    this.service.getPersonalList().subscribe()\n  },\n  methods: {\n    onTypeChange(e) {\n      this.valueChange('info.product_type', e)\n      this.setFieldsValue('info.product_id', '')\n      this.setFieldsValue\n      this.selectedRowKeys = []\n    },\n    onTableChange(value) {\n      this.selectedRowKeys = value\n      console.log(value)\n    },\n    onTablePriceChange(index, val) {\n      console.log(index,val )\n      let list = this.tableList\n      list.splice(index, 1, {\n        ...this.tableList[index],\n        discount_price: val\n      })\n      this.tableList = list\n    },\n    onMemberChange() {\n      this.setFieldsValue('info.product_id', this.memberList[0].id)\n    },\n    onDepositChange(val) {\n      this.setFieldsValue('info.product_id', this.depositList[0].id)\n    },\n    onPersonalChange(val) {\n      this.setFieldsValue('info.product_id', this.personalList[0].id)\n      this.service.getCoachLevelList(val).subscribe()\n    },\n    // 将form表单变更的值更新到v-model上 （一些判断条件使用的是info，所以需要同步到info，并更新v-model）\n    valueChange(key, e, cb) {\n      console.log('product-setting-info-value-change', key, e)\n      // this.info[key] = e\n      this.setValue(key, e)\n      this.$emit('change', this.info)\n      cb && cb(e)\n    },\n    setFieldsValue(key, value) {\n      this.setValue(key, value)\n      this.$nextTick(() => {\n        this.form.setFieldsValue({ [key]: value })\n      })\n    },\n    // 更新组件属性值 (如：key = 'info.product_type',value = 2   ===>   this.info.product_type = 2)\n    setValue(key, value) {\n      if (typeOf(key) === 'string') {\n        const keyArr = key.split('.')\n        const len = keyArr.length - 1\n        keyArr.reduce((cur, key, index) => {\n          if (!cur[key] && index < len) {\n            throw `${key}不存在`\n          }\n          if (index === len) {\n            // 如果 要更新的值， 新值都是对象则合并， 否则直接覆盖\n            if (typeOf(cur[key]) === 'object' && typeOf(value) === 'object') {\n              merge(cur[key], value)\n            } else {\n              cur[key] = value\n            }\n          }\n          return cur[key]\n        }, this)\n      } else {\n        merge(this, key)\n      }\n    }\n  }\n}\n</script>\n"]}]}