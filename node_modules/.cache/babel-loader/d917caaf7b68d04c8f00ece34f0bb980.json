{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js!/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js!/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/schedule/team/add-course-batch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/schedule/team/add-course-batch.vue","mtime":1594718339923},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/thread-loader/dist/cjs.js","mtime":1591062572352},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/wangzhigang/Desktop/styd/web/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { cloneDeep } from 'lodash-es';\nimport { TeamScheduleCommonService } from '@/views/pages/shop/product/course/schedule/team/service#/common.service';\nimport { TeamScheduleScheduleService } from '@/views/pages/shop/product/course/schedule/team/service#/schedule.service';\nimport { MessageService } from '@/services/message.service';\nimport { columns } from \"./add-course-batch.config\";\nexport default {\n  name: 'AddCourseScheduleBatch',\n  bem: {\n    b: 'modal-schedule-team-add-course-batch'\n  },\n  serviceInject: function serviceInject() {\n    return {\n      teamScheduleCommonService: TeamScheduleCommonService,\n      teamScheduleScheduleService: TeamScheduleScheduleService,\n      msg: MessageService\n    };\n  },\n  rxState: function rxState() {\n    var tss = this.teamScheduleCommonService;\n    return {\n      coachOptions: tss.coachOptions$,\n      courseOptions: tss.courseOptions$,\n      courtOptions: tss.courtOptions$\n    };\n  },\n  data: function data() {\n    var data = [];\n\n    for (var i = 0; i < 100; i++) {\n      if (i === 0) {\n        data.push({\n          key: 0,\n          editable: true,\n          start_time: moment(),\n          course_id: '',\n          coach_id: '',\n          limit_num: 0,\n          court_site_id: []\n        });\n      }\n    }\n\n    this.cacheData = data.map(function (item) {\n      return _objectSpread({}, item);\n    });\n    return {\n      data: data,\n      obj: {\n        key: 0,\n        editable: true,\n        start_time: '',\n        course_id: '',\n        coach_id: '',\n        court_site_id: '',\n        show: {}\n      },\n      show: false\n    };\n  },\n  filters: {\n    formatDate: function formatDate(val) {\n      return val ? moment(val) : undefined;\n    }\n  },\n  computed: {\n    columns: columns\n  },\n  methods: {\n    validateForm: function validateForm(form) {\n      if (!form.start_time) {\n        this.msg.error({\n          content: '排期开始时间不能为空'\n        });\n        return false;\n      }\n\n      if (!form.course_id) {\n        this.msg.error({\n          content: '请选择课程'\n        });\n        return false;\n      }\n\n      if (!form.coach_id) {\n        this.msg.error({\n          content: \"\\u8BF7\\u9009\\u62E9\\u8BFE\\u7A0B\".concat(this.$c('coach'))\n        });\n        return false;\n      }\n\n      if (!form.limit_num) {\n        this.msg.error({\n          content: '请输入上课人数'\n        });\n        return false;\n      }\n\n      if (!form.course_fee) {\n        this.msg.error({\n          content: '请输入课时费'\n        });\n        return false;\n      }\n\n      return true;\n    },\n    onOkSaveForm: function onOkSaveForm() {\n      var _this = this;\n\n      var data = cloneDeep(this.data);\n      data = data.filter(function (item, index) {\n        return index !== 0;\n      }).map(function (item) {\n        delete item.show;\n        delete item.key;\n        delete item.editable;\n        item.start_time = moment(item.start_time).format('YYYY-MM-DD HH:mm');\n        item.court_id = item.court_site_id[0];\n        item.court_site_id = item.court_site_id[1];\n        item.limit_num = +item.limit_num;\n        item.course_fee = +item.course_fee;\n        return item;\n      });\n      this.teamScheduleScheduleService.addScheduleInBatch(data).subscribe(function (res) {\n        _this.show = false;\n\n        _this.$emit('ok');\n      });\n    },\n    handleChange: function handleChange(value, key, column) {\n      var newData = _toConsumableArray(this.data);\n\n      var target = newData.filter(function (item) {\n        return key === item.key;\n      })[0];\n\n      if (target) {\n        target[column] = value;\n        this.data = newData;\n      }\n    },\n    edit: function edit(key) {\n      var newData = _toConsumableArray(this.data);\n\n      var target = newData.filter(function (item) {\n        return key === item.key;\n      })[0];\n\n      if (target) {\n        target.editable = true;\n        this.data = newData;\n      }\n    },\n    deleteData: function deleteData(key) {\n      var newData = _toConsumableArray(this.data);\n\n      var target = newData.filter(function (item) {\n        return key === item.key;\n      })[0];\n\n      if (target) {\n        target.editable = true;\n        this.data = newData.filter(function (item) {\n          return item.key !== key;\n        });\n      }\n    },\n    getShowTableData: function getShowTableData(data) {\n      data.key = Math.random();\n      data.show = {};\n      data.show.start_time_show = moment(data.start_time).format('YYYY-MM-DD HH:mm');\n      data.show.course_id_show = this.getOptionName(data.course_id, this.courseOptions, 'course_name');\n      data.show.coach_id_show = this.getOptionName(data.coach_id, this.coachOptions, 'staff_name');\n      data.show.court_site_id_show = this.getCourtSiteName(data.court_site_id, this.courtOptions);\n      return data;\n    },\n    getOptionName: function getOptionName(id, options, name) {\n      var option = '';\n      options.forEach(function (ele) {\n        if (ele.id === id) {\n          option = ele[name];\n        }\n      });\n      return option;\n    },\n    getCourtSiteName: function getCourtSiteName(ids, options) {\n      var id = ids[0];\n      var childrenId = ids[1];\n      var name = '';\n      options.forEach(function (item) {\n        if (item.id === id) {\n          name = item.name;\n\n          if (item.children && item.children.length && childrenId) {\n            item.children.forEach(function (ele) {\n              if (ele.id === childrenId) {\n                name = \"\".concat(name, \" - \").concat(ele.name);\n              }\n            });\n          }\n        }\n      });\n      return name;\n    },\n    save: function save(key) {\n      var _this2 = this;\n\n      var newData = _toConsumableArray(this.data);\n\n      var target = newData.filter(function (item) {\n        return key === item.key;\n      })[0];\n\n      if (!this.validateForm(target)) {\n        return '';\n      }\n\n      if (key === 0 && target) {\n        delete target.editable;\n        delete newData[0].editable;\n        newData[0] = this.getShowTableData(newData[0]);\n        newData.unshift({\n          key: 0,\n          editable: true,\n          start_time: moment(),\n          course_id: '',\n          coach_id: '',\n          limit_num: 0,\n          court_site_id: [],\n          show: {}\n        });\n        this.data = newData;\n        this.cacheData = newData.map(function (item) {\n          return _objectSpread({}, item);\n        });\n        return;\n      }\n\n      if (target) {\n        delete target.editable;\n        newData.forEach(function (item) {\n          if (item.key === key && key !== 0) {\n            item = _this2.getShowTableData(item);\n          }\n        });\n        this.data = newData;\n        this.cacheData = newData.map(function (item) {\n          return _objectSpread({}, item);\n        });\n      }\n    },\n    cancel: function cancel(key) {\n      var newData = _toConsumableArray(this.data);\n\n      var target = newData.filter(function (item) {\n        return key === item.key;\n      })[0];\n\n      if (target) {\n        Object.assign(target, this.cacheData.filter(function (item) {\n          return key === item.key;\n        })[0]);\n        delete target.editable;\n        this.data = newData;\n      }\n    }\n  }\n};",null]}