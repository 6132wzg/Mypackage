{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/components/clock/clock.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/components/clock/clock.vue","mtime":1600926556000},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nimport { typeOf } from '@/utils/type'\nexport default {\n  name: 'StClock',\n  props: {\n    // 倒计时显示格式， 使用 [] 括起来的当值小于等于0时隐藏, 如: [DD天]hh:mm:ss  如果天数小于等于0 则将其变为 hh:mm:ss\n    format: {\n      type: String,\n      default: 'DD天 hh小时 mm分钟 ss秒'\n    },\n    value: {\n      type: Number,\n      default: 0\n    },\n    // 倒计时刷新一次的时间间隔 单位为毫秒， 默认1000即1秒\n    sp: {\n      type: Number,\n      default: 1000\n    }\n  },\n  computed: {\n    timeUnitMap() {\n      return {\n        'Y+': 1000 * 60 * 60 * 24 * 30 * 365,\n        'M+': 1000 * 60 * 60 * 24 * 30,\n        'D+': 1000 * 60 * 60 * 24,\n        'h+': 1000 * 60 * 60,\n        'm+': 1000 * 60,\n        's+': 1000,\n        fs: 100,\n        ds: 10,\n        ms: 1\n      }\n    },\n    // 获取最大单位\n    unit() {\n      // 默认为天\n      let unit = 'D+'\n      let list = JSON.parse(JSON.stringify(this.timeFormatMap))\n      list.reverse().map(key => {\n        let ret = new RegExp('(' + key + ')').exec(this.format)\n        if (ret) unit = key\n      })\n      return unit\n    },\n    // 根据最大单位计算当前倒计时各单位对应的值\n    timeValue() {\n      const index = this.timeFormatMap.indexOf(this.unit)\n      const timeFormatMap = this.timeFormatMap.slice(index)\n      let time = this.time\n      let data = {}\n      timeFormatMap.map(key => {\n        data[key] =\n          time > this.timeUnitMap[key]\n            ? parseInt(time / this.timeUnitMap[key]) || 0\n            : 0\n        time = time - data[key] * this.timeUnitMap[key]\n      })\n      return data\n    },\n    timer() {\n      let format = this.format\n      format.trim()\n      for (let k in this.timeValue) {\n        let ret = new RegExp('(' + k + ')').exec(format)\n        let reg = new RegExp('(\\\\[.*' + k + '.*\\\\])').exec(format)\n        // 如果去除匹配项等于0并被[]括着的选项 如 [DD天] hh:mm:ss  如果天数小于等于0 则将其去掉 变为hh:mm:ss\n        if (reg) {\n          format = format.replace(\n            reg[0],\n            this.timeValue[k] <= 0 ? '' : reg[0].replace(/(^\\[|\\]$)/g, '')\n          )\n          format.trim()\n        }\n        if (ret) {\n          format = format.replace(\n            ret[1],\n            ret[1].length == 1 && !this.singleFormat.includes(k)\n              ? this.timeValue[k]\n              : (this.timeValue[k] || 0).toString().padStart(ret[1].length, '0')\n          )\n        }\n      }\n      return format\n    }\n  },\n  watch: {\n    // value 发生变更重置倒计时\n    value: {\n      handler(newVal, oldVal) {\n        if (newVal === oldVal) return\n        // 取整\n        this.time = Math.abs(newVal)\n        this.init()\n      }\n    }\n  },\n  data() {\n    return {\n      timerLoop: null,\n      timeFormatMap: ['Y+', 'M+', 'D+', 'h+', 'm+', 's+', 'fs', 'ds', 'ms'],\n      // 不需要补0的单位\n      singleFormat: ['fs', 'ds', 'ms'],\n      time: 0\n    }\n  },\n  mounted() {\n    clearInterval(this.timerLoop)\n    this.time = Math.abs(this.value)\n    this.init()\n  },\n  methods: {\n    init() {\n      clearInterval(this.timerLoop)\n      this.timerLoop = setInterval(() => {\n        this.time = this.time - this.sp\n        if (this.time <= 0) {\n          clearInterval(this.timerLoop)\n          this.$emit('end')\n        }\n      }, this.sp)\n    }\n  },\n  beforeDestroy() {\n    clearInterval(this.timerLoop)\n  }\n}\n",{"version":3,"sources":["clock.vue"],"names":[],"mappingsfile":"clock.vue","sourceRoot":"src/views/components/clock","sourcesContent":["<!-- 倒计时 -->\n<!-- 使用方式 <st-clock :value=\"time\" format=\"[DD天]hh:mm:ss\"></st-clock> -->\n<template>\n  <span>\n    <slot v-bind:timer=\"timeValue\" v-bind:timerFormat=\"timer\">{{ timer }}</slot>\n  </span>\n</template>\n\n<script>\nimport { typeOf } from '@/utils/type'\nexport default {\n  name: 'StClock',\n  props: {\n    // 倒计时显示格式， 使用 [] 括起来的当值小于等于0时隐藏, 如: [DD天]hh:mm:ss  如果天数小于等于0 则将其变为 hh:mm:ss\n    format: {\n      type: String,\n      default: 'DD天 hh小时 mm分钟 ss秒'\n    },\n    value: {\n      type: Number,\n      default: 0\n    },\n    // 倒计时刷新一次的时间间隔 单位为毫秒， 默认1000即1秒\n    sp: {\n      type: Number,\n      default: 1000\n    }\n  },\n  computed: {\n    timeUnitMap() {\n      return {\n        'Y+': 1000 * 60 * 60 * 24 * 30 * 365,\n        'M+': 1000 * 60 * 60 * 24 * 30,\n        'D+': 1000 * 60 * 60 * 24,\n        'h+': 1000 * 60 * 60,\n        'm+': 1000 * 60,\n        's+': 1000,\n        fs: 100,\n        ds: 10,\n        ms: 1\n      }\n    },\n    // 获取最大单位\n    unit() {\n      // 默认为天\n      let unit = 'D+'\n      let list = JSON.parse(JSON.stringify(this.timeFormatMap))\n      list.reverse().map(key => {\n        let ret = new RegExp('(' + key + ')').exec(this.format)\n        if (ret) unit = key\n      })\n      return unit\n    },\n    // 根据最大单位计算当前倒计时各单位对应的值\n    timeValue() {\n      const index = this.timeFormatMap.indexOf(this.unit)\n      const timeFormatMap = this.timeFormatMap.slice(index)\n      let time = this.time\n      let data = {}\n      timeFormatMap.map(key => {\n        data[key] =\n          time > this.timeUnitMap[key]\n            ? parseInt(time / this.timeUnitMap[key]) || 0\n            : 0\n        time = time - data[key] * this.timeUnitMap[key]\n      })\n      return data\n    },\n    timer() {\n      let format = this.format\n      format.trim()\n      for (let k in this.timeValue) {\n        let ret = new RegExp('(' + k + ')').exec(format)\n        let reg = new RegExp('(\\\\[.*' + k + '.*\\\\])').exec(format)\n        // 如果去除匹配项等于0并被[]括着的选项 如 [DD天] hh:mm:ss  如果天数小于等于0 则将其去掉 变为hh:mm:ss\n        if (reg) {\n          format = format.replace(\n            reg[0],\n            this.timeValue[k] <= 0 ? '' : reg[0].replace(/(^\\[|\\]$)/g, '')\n          )\n          format.trim()\n        }\n        if (ret) {\n          format = format.replace(\n            ret[1],\n            ret[1].length == 1 && !this.singleFormat.includes(k)\n              ? this.timeValue[k]\n              : (this.timeValue[k] || 0).toString().padStart(ret[1].length, '0')\n          )\n        }\n      }\n      return format\n    }\n  },\n  watch: {\n    // value 发生变更重置倒计时\n    value: {\n      handler(newVal, oldVal) {\n        if (newVal === oldVal) return\n        // 取整\n        this.time = Math.abs(newVal)\n        this.init()\n      }\n    }\n  },\n  data() {\n    return {\n      timerLoop: null,\n      timeFormatMap: ['Y+', 'M+', 'D+', 'h+', 'm+', 's+', 'fs', 'ds', 'ms'],\n      // 不需要补0的单位\n      singleFormat: ['fs', 'ds', 'ms'],\n      time: 0\n    }\n  },\n  mounted() {\n    clearInterval(this.timerLoop)\n    this.time = Math.abs(this.value)\n    this.init()\n  },\n  methods: {\n    init() {\n      clearInterval(this.timerLoop)\n      this.timerLoop = setInterval(() => {\n        this.time = this.time - this.sp\n        if (this.time <= 0) {\n          clearInterval(this.timerLoop)\n          this.$emit('end')\n        }\n      }, this.sp)\n    }\n  },\n  beforeDestroy() {\n    clearInterval(this.timerLoop)\n  }\n}\n</script>\n"]}]}