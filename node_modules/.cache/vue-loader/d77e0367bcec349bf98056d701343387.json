{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/staff/role/edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/pages/brand/staff/role/edit.vue","mtime":1591147717370},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { EditService } from './edit.service'\nimport { listToTree } from '@/utils/list-to-tree.js'\nimport { cloneDeep } from 'lodash-es'\nimport RoleDepartment from '@/views/biz-modals/role/department'\nconst getParentKey = (key, tree) => {\n  let parentKey\n  for (let i = 0; i < tree.length; i++) {\n    const node = tree[i]\n    if (node.children) {\n      if (node.children.some(item => item.name === key)) {\n        parentKey = node.key\n      } else if (getParentKey(key, node.children)) {\n        parentKey = getParentKey(key, node.children)\n      }\n    }\n  }\n  return parentKey\n}\nexport default {\n  name: 'EditRole',\n  modals: {\n    RoleDepartment\n  },\n  serviceInject() {\n    return {\n      editService: EditService\n    }\n  },\n  rxState() {\n    return {\n      loading: this.editService.loading$,\n      info: this.editService.info$,\n      departmentInfo: this.editService.departmentInfo$,\n      brandList: this.editService.brandList$,\n      shopList: this.editService.shopList$,\n      dataGrant: this.editService.dataGrant$\n    }\n  },\n  data() {\n    return {\n      expandedKeys: [],\n      searchValue: '',\n      autoExpandParent: true,\n      expandedKeysShop: [],\n      searchShopValue: '',\n      autoExpandParentShop: true,\n      form: this.$form.createForm(this),\n      brandIds: [],\n      department_ids: [],\n      shopIds: [],\n      brands: [],\n      shops: []\n    }\n  },\n  computed: {\n    id() {\n      return this.info.id\n    }\n  },\n  methods: {\n    a() {},\n    onCancel() {\n      this.$router.go(-1)\n    },\n    onExpand(expandedKeys) {\n      this.expandedKeys = expandedKeys\n      this.autoExpandParent = false\n    },\n    onExpandShop(expandedKeys) {\n      this.expandedKeysShop = expandedKeys\n      this.autoExpandParentShop = false\n    },\n    fileterBrandList(e) {\n      const value = e.target.value\n      const expandedKeys = this.brandList\n        .map(item => {\n          if (item.name.indexOf(value) > -1) {\n            return getParentKey(item.name, cloneDeep(this.brands))\n          }\n          return null\n        })\n        .filter((item, i, self) => item && self.indexOf(item) === i)\n      Object.assign(this, {\n        expandedKeys,\n        searchValue: value,\n        autoExpandParent: true\n      })\n    },\n    fileterShopList(e) {\n      const value = e.target.value\n      const expandedKeysShop = this.shopList\n        .map(item => {\n          if (item.name.indexOf(value) > -1) {\n            return getParentKey(item.name, cloneDeep(this.shops))\n          }\n          return null\n        })\n        .filter((item, i, self) => item && self.indexOf(item) === i)\n      Object.assign(this, {\n        expandedKeysShop,\n        searchShopValue: value,\n        autoExpandParentShop: true\n      })\n    },\n    onChangeDataRegion(val) {\n      const that = this\n      if (val.target.value === 3) {\n        this.$modalRouter.push({\n          name: 'role-department',\n          on: {\n            success(result) {\n              that.departmentInfo = result.label.join(',')\n              // that.departmentName = result.lable.join(',')\n              that.department_ids = result.value\n              if (that.department_ids.length === 0) {\n                that.form.setFieldsValue({\n                  data_grant: undefined\n                })\n              }\n            }\n          }\n        })\n      } else {\n        that.departmentInfo = ''\n        that.department_ids = []\n      }\n    },\n    getSelectIds(selectIds, count) {\n      const roleList = cloneDeep([...this.brandList, ...this.shopList])\n      const tempList = []\n      selectIds.map(id => {\n        roleList.forEach(ele => {\n          if (id === ele.id) {\n            tempList.push(ele.parent_id)\n          }\n        })\n      })\n      const reslutArr = Array.from(new Set([...selectIds, ...tempList]))\n      const length = reslutArr.length\n      return length === count ? reslutArr : this.getSelectIds(reslutArr, length)\n    },\n    onClickSubmit(e) {\n      e.preventDefault()\n      this.form.validateFields((err, values) => {\n        if (!err) {\n          const select_ids = this.getSelectIds(\n            cloneDeep([...this.brandIds, ...this.shopIds])\n          ).filter(item => item !== 'menu:0')\n          const form = {\n            id: this.id,\n            ...values,\n            select_ids,\n            department_ids: this.department_ids\n          }\n          this.editService.update(form).subscribe(res => {\n            this.$router.push({\n              name: 'brand-staff-role-info',\n              query: { id: this.id }\n            })\n          })\n        }\n      })\n    },\n    isParent(item, arr, dep) {\n      // 两种情况\n      // 第一种情况 当前节点有子节点且该节点没有匹配成功\n      // 第二种情况 当前节点没有子节点且该节点没有匹配成功\n      if (!Array.isArray(arr)) return\n      for (let i = 0; i < arr.length; i++) {\n        let current = arr[i]\n        if (item === current.key && !current.children) {\n          dep.push(item)\n        } else {\n          this.isParent(item, current.children, dep)\n        }\n      }\n    }\n  },\n  mounted() {\n    this.brands = listToTree(cloneDeep(this.brandList))\n    this.brandList\n      .filter(item => {\n        return this.info.select_ids.includes(item.id)\n      })\n      .map(item => {\n        return item.id\n      })\n      .map(item => {\n        return this.isParent(item, this.brands, this.brandIds)\n      })\n    // 初始化跨部门 部门id\n    this.department_ids = this.info.departments.map(item => item.id)\n    this.shops = listToTree(cloneDeep(this.shopList))\n    this.shopList\n      .filter(item => {\n        return (\n          this.info.select_ids.includes(item.id) &&\n          item.id.includes('permission')\n        )\n      })\n      .map(item => {\n        return item.id\n      })\n      .map(item => {\n        return this.isParent(item, this.shops, this.shopIds)\n      })\n  }\n}\n",null]}