{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/shop-staff/update-staff-position.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/shop-staff/update-staff-position.vue","mtime":1591147717202},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { UpdateStaffPositionService } from './update-staff-position.service'\nimport { MessageService } from '../../../services/message.service'\nimport StaffInfo from './staff-info'\nimport StaffModalTips from '@/views/biz-components/staff/staff-modal-tips'\nimport { ruleOptions } from './update-staff-position.config'\nimport { cloneDeep } from 'lodash-es'\n\nexport default {\n  serviceInject() {\n    return {\n      updateStaffPositionService: UpdateStaffPositionService,\n      msg: MessageService\n    }\n  },\n  rxState() {\n    return {\n      identityList: this.updateStaffPositionService.identityList$,\n      natureWork: this.updateStaffPositionService.natureWork$,\n      positionInfo: this.updateStaffPositionService.positionInfo$,\n      coachLevelList: this.updateStaffPositionService.coachLevelList$,\n      salaryBasic: this.updateStaffPositionService.salaryBasic$,\n      salarySale: this.updateStaffPositionService.salarySale$,\n      salaryCourse: this.updateStaffPositionService.salaryCourse$\n    }\n  },\n  name: 'UpdateStaffPosition',\n  data() {\n    const form = this.$stForm.create()\n    const decorators = form.decorators(ruleOptions)\n    return {\n      form,\n      decorators,\n      show: false,\n      isSalaryCourse: false,\n      tips: [],\n      operate: false,\n      canDeleteIdentity: true,\n      coach_level_required: false\n    }\n  },\n  props: {\n    staff: {\n      type: Object,\n      default: () => {}\n    }\n  },\n  filters: {\n    identityFilter(key) {\n      const identityTag = [\n        'role-staff',\n        'role-saler',\n        'coach-personal',\n        'coach-team',\n        'swimming-coach'\n      ]\n      return identityTag[key - 1]\n    }\n  },\n  watch: {\n    identity(newval) {\n      this.isSalaryCourse = newval.includes(3) || newval.includes(4)\n    }\n  },\n  components: {\n    StaffInfo,\n    StaffModalTips\n  },\n  computed: {\n    identity() {\n      return this.staff && this.staff.identity\n    }\n  },\n  mounted() {\n    this.updateStaffPositionService.init(this.staff.id).subscribe(res => {\n      this.initFormData()\n    })\n  },\n  methods: {\n    initFormData() {\n      let {\n        basic_salary,\n        coach_level_id,\n        course_percentage,\n        identity,\n        nature_work,\n        sale_percentage\n      } = this.positionInfo\n      if (!nature_work) {\n        nature_work = undefined\n      }\n      this.onChangeIdentity(identity)\n      let obj = {\n        coach_level_id,\n        sale_percentage,\n        course_percentage,\n        basic_salary,\n        identity,\n        nature_work\n      }\n      this.form.setFieldsValue(obj)\n    },\n    onChangeIdentity(value) {\n      this.isSalaryCourse = value.includes(3) || value.includes(4)\n      this.coach_level_required = value.includes(4)\n    },\n    onDeselectIndentity(value) {\n      this.updateStaffPositionService\n        .validatStaffPosition(this.staff.id, value)\n        .subscribe(res => {\n          let operate = res.operate\n          if (!operate) {\n            let obj = this.identity.filter(item => item.id === value)\n            let identity = [\n              ...obj.map(item => item.id),\n              ...this.form.getFieldValue('identity')\n            ]\n            this.form.setFieldsValue({\n              identity\n            })\n            this.tips = res.list\n            this.operate = res.operate\n            this.canDeleteIdentity = false\n          }\n        })\n    },\n    onSubmit(e) {\n      e.preventDefault()\n      this.form.validate().then(values => {\n        let form = cloneDeep(values)\n        // 如果选择职位从私人教练到其他职位时，将教练等级值置为 undefined\n        if (!this.coach_level_required && this.canDeleteIdentity) {\n          form.coach_level_id = undefined\n        }\n        this.updateStaffPositionService\n          .putStaffBindPosition({\n            id: this.staff.id,\n            ...values\n          })\n          .subscribe(() => {\n            this.show = false\n          })\n      })\n    }\n  }\n}\n",null]}