{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/brand-user-ring.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/brand-user-ring.vue","mtime":1594718339898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport { Chart } from '@antv/g2'\nimport { View } from 'st-data-set'\nimport chartMixin from './mixin'\nimport { decimalFilter } from './filters'\nimport { isEmpty } from 'lodash-es'\n\nexport default {\n  mixins: [chartMixin],\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    height: {\n      type: Number,\n      default: 200\n    },\n    colors: {\n      type: Array,\n      default: () => [\n        '#5C57FE',\n        '#6332D1',\n        '#009DFF',\n        '#00D0F0',\n        '#FFE679',\n        '#aFa679'\n      ]\n    },\n    unit: {\n      type: String,\n      default: '人'\n    }\n  },\n  computed: {\n    dataSource() {\n      if (this.data.length === 0) return this.data\n      const isEmpty = this.data\n        .map(item => item.value)\n        .reduce((value, total) => value + total)\n      const emptyItem = { name: 'empty', value: 1 }\n      return !isEmpty ? [...this.data, emptyItem] : this.data\n    }\n  },\n  methods: {\n    initDv() {\n      this.dv = new View()\n      this.dv.source(this.dataSource)\n      this.dv\n        .transform({\n          type: 'map',\n          callback(row) {\n            row.value = +row.value\n            return row\n          }\n        })\n        // 计算百分比\n        .transform({\n          type: 'percent',\n          field: 'value',\n          dimension: 'name',\n          as: 'percent'\n        })\n    },\n    initChart() {\n      this.chart = new Chart({\n        container: this.$el,\n        forceFit: true,\n        padding: ['auto', 140, 'auto', 'auto'],\n        height: this.height\n      })\n      this.chart.source(this.dv, {\n        value: {\n          formatter: v => v + this.unit\n        }\n      })\n      this.chart.coord('theta', {\n        innerRadius: 0.65\n      })\n      this.chart.legend({\n        position: 'right-center',\n        useHtml: true,\n        clickable: false,\n        itemTpl: (name, color, checked, index) => {\n          const row = this.dv.findRow({ name })\n          const percent = parseInt(row.percent * 100)\n          return (\n            `<li class=\"g2-legend-list-item item-{index} {checked}\" data-color=\"{originColor}\" data-value=\"{originValue}\">` +\n            `<i class=\"g2-legend-marker\" style=\"background-color:{color};\"></i>` +\n            `<span class=\"g2-legend-text\">${name}</span>` +\n            `<div class='legend-right'>` +\n            `<span class='legend-divider'>|</span>` +\n            `<span class='legend-percent'>${percent}%</span>` +\n            `</div>` +\n            `</li>`\n          )\n        },\n        onHover: ev => {\n          // 总计为 0 是执行hover\n\n          const $s = this.$el.querySelector.bind(this.$el)\n          const name = ev.item.value\n          const row = this.dv.findRow({ name })\n          const shapes = ev.shapes\n          const geom = ev.geom\n          const legend = ev.currentTarget\n          // 选中对应单元\n          row.value && geom.setShapesActived(shapes)\n          $s('.guide-value').textContent = row.value\n          $s('.guide-name').textContent = row.name\n        }\n      })\n      this.chart.guide().html({\n        position: ['50%', '50%'],\n        html: () => {\n          let initRow = this.data[0]\n          return (\n            `<div class='guide'>` +\n            `<div class='guide-title'><span class='guide-value'>${initRow.value}</span><span class='guide-unit'>人</span></div>` +\n            `<div class='guide-name'>${initRow.name}</div>` +\n            `</div>`\n          )\n        }\n      })\n      this.chart.tooltip({\n        showTitle: false\n      })\n\n      const interval = this.chart\n        .intervalStack()\n        .style({\n          fillOpacity: 1,\n          cursor: 'pointer'\n        })\n        .position('value')\n        .color('name', [...this.colors, '#e9edf2'])\n        .select(false)\n        .active({\n          style: {\n            fillOpacity: 1,\n            lineWidth: 8\n          }\n        })\n\n      this.chart.render()\n\n      const shapes = interval.getShapes()\n      // 默认显示第一个 当有empty时第一个为零 不需要\n      if (origin.name === 'empty') {\n        const firstShape = shapes[0]\n        interval.setShapesActived(firstShape)\n      }\n\n      const $s = this.$el.querySelector.bind(this.$el)\n\n      this.chart.on('interval:mouseenter', e => {\n        const shape = e.shape\n        const origin = e.data._origin\n        if (origin.name === 'empty') {\n          this.intervalStack.clearActivedShapes(shape)\n          return\n        }\n        $s('.guide-value').textContent = origin.value\n        $s('.guide-name').textContent = origin.name\n      })\n    }\n  },\n  beforeDestroy() {\n    if (this.chart) {\n      // 注销图形所有事件\n      this.chart.off()\n    }\n  }\n}\n",{"version":3,"sources":["brand-user-ring.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"brand-user-ring.vue","sourceRoot":"src/views/biz-components/stat","sourcesContent":["<template>\n  <div class=\"stat-brand-user-ring\"></div>\n</template>\n\n<script>\nimport { Chart } from '@antv/g2'\nimport { View } from 'st-data-set'\nimport chartMixin from './mixin'\nimport { decimalFilter } from './filters'\nimport { isEmpty } from 'lodash-es'\n\nexport default {\n  mixins: [chartMixin],\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    height: {\n      type: Number,\n      default: 200\n    },\n    colors: {\n      type: Array,\n      default: () => [\n        '#5C57FE',\n        '#6332D1',\n        '#009DFF',\n        '#00D0F0',\n        '#FFE679',\n        '#aFa679'\n      ]\n    },\n    unit: {\n      type: String,\n      default: '人'\n    }\n  },\n  computed: {\n    dataSource() {\n      if (this.data.length === 0) return this.data\n      const isEmpty = this.data\n        .map(item => item.value)\n        .reduce((value, total) => value + total)\n      const emptyItem = { name: 'empty', value: 1 }\n      return !isEmpty ? [...this.data, emptyItem] : this.data\n    }\n  },\n  methods: {\n    initDv() {\n      this.dv = new View()\n      this.dv.source(this.dataSource)\n      this.dv\n        .transform({\n          type: 'map',\n          callback(row) {\n            row.value = +row.value\n            return row\n          }\n        })\n        // 计算百分比\n        .transform({\n          type: 'percent',\n          field: 'value',\n          dimension: 'name',\n          as: 'percent'\n        })\n    },\n    initChart() {\n      this.chart = new Chart({\n        container: this.$el,\n        forceFit: true,\n        padding: ['auto', 140, 'auto', 'auto'],\n        height: this.height\n      })\n      this.chart.source(this.dv, {\n        value: {\n          formatter: v => v + this.unit\n        }\n      })\n      this.chart.coord('theta', {\n        innerRadius: 0.65\n      })\n      this.chart.legend({\n        position: 'right-center',\n        useHtml: true,\n        clickable: false,\n        itemTpl: (name, color, checked, index) => {\n          const row = this.dv.findRow({ name })\n          const percent = parseInt(row.percent * 100)\n          return (\n            `<li class=\"g2-legend-list-item item-{index} {checked}\" data-color=\"{originColor}\" data-value=\"{originValue}\">` +\n            `<i class=\"g2-legend-marker\" style=\"background-color:{color};\"></i>` +\n            `<span class=\"g2-legend-text\">${name}</span>` +\n            `<div class='legend-right'>` +\n            `<span class='legend-divider'>|</span>` +\n            `<span class='legend-percent'>${percent}%</span>` +\n            `</div>` +\n            `</li>`\n          )\n        },\n        onHover: ev => {\n          // 总计为 0 是执行hover\n\n          const $s = this.$el.querySelector.bind(this.$el)\n          const name = ev.item.value\n          const row = this.dv.findRow({ name })\n          const shapes = ev.shapes\n          const geom = ev.geom\n          const legend = ev.currentTarget\n          // 选中对应单元\n          row.value && geom.setShapesActived(shapes)\n          $s('.guide-value').textContent = row.value\n          $s('.guide-name').textContent = row.name\n        }\n      })\n      this.chart.guide().html({\n        position: ['50%', '50%'],\n        html: () => {\n          let initRow = this.data[0]\n          return (\n            `<div class='guide'>` +\n            `<div class='guide-title'><span class='guide-value'>${initRow.value}</span><span class='guide-unit'>人</span></div>` +\n            `<div class='guide-name'>${initRow.name}</div>` +\n            `</div>`\n          )\n        }\n      })\n      this.chart.tooltip({\n        showTitle: false\n      })\n\n      const interval = this.chart\n        .intervalStack()\n        .style({\n          fillOpacity: 1,\n          cursor: 'pointer'\n        })\n        .position('value')\n        .color('name', [...this.colors, '#e9edf2'])\n        .select(false)\n        .active({\n          style: {\n            fillOpacity: 1,\n            lineWidth: 8\n          }\n        })\n\n      this.chart.render()\n\n      const shapes = interval.getShapes()\n      // 默认显示第一个 当有empty时第一个为零 不需要\n      if (origin.name === 'empty') {\n        const firstShape = shapes[0]\n        interval.setShapesActived(firstShape)\n      }\n\n      const $s = this.$el.querySelector.bind(this.$el)\n\n      this.chart.on('interval:mouseenter', e => {\n        const shape = e.shape\n        const origin = e.data._origin\n        if (origin.name === 'empty') {\n          this.intervalStack.clearActivedShapes(shape)\n          return\n        }\n        $s('.guide-value').textContent = origin.value\n        $s('.guide-name').textContent = origin.name\n      })\n    }\n  },\n  beforeDestroy() {\n    if (this.chart) {\n      // 注销图形所有事件\n      this.chart.off()\n    }\n  }\n}\n</script>\n"]}]}