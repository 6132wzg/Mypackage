{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/brand-stat-ring.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-components/stat/brand-stat-ring.vue","mtime":1598321087621},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport { Chart } from '@antv/g2'\nimport { View } from 'st-data-set'\nimport chartMixin from './mixin'\nimport { decimalFilter, setColorMap } from './filters'\nimport StHelpTooltip from '@/views/components/help-tooltip/help-tooltip'\n\nexport default {\n  name: 'BrandStatRing',\n  mixins: [chartMixin],\n  data() {\n    return {\n      intervalStack: {},\n      resize: -99\n    }\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    total: {\n      type: Number,\n      default: 0\n    },\n    unitBack: {\n      type: Boolean,\n      default: false\n    },\n    unit: {\n      type: String,\n      default: '¥'\n    },\n    totalName: {\n      type: String,\n      default: ''\n    },\n    tooltipId: {\n      type: String,\n      default: ''\n    },\n    tooltipMap: {\n      type: Object,\n      default: () => {}\n    },\n    legend: {\n      type: Object,\n      default: () => {}\n    },\n    guide: {\n      type: Object,\n      default: () => {}\n    },\n    fields: {\n      type: [Array, Boolean],\n      default: () => [\n        '会员卡',\n        '私教课',\n        '团体课',\n        '储值卡',\n        '课程包',\n        '定金',\n        '押金',\n        '储物柜',\n        '云店',\n        '小班课',\n        '其他',\n        '全部'\n      ]\n    },\n    colors: {\n      type: Array,\n      default: () => [\n        '#3F66F6',\n        '#798AFF',\n        '#06DB8C',\n        '#77FF74',\n        '#B8F10F',\n        '#FFE679',\n        '#FFB946',\n        '#5E83AC',\n        '#FF6466',\n        '#04A0AF',\n        '#C87FFF',\n        '#484F83'\n      ]\n    },\n    colorKey: {\n      type: String,\n      default: 'name'\n    },\n    colorMap: {\n      type: [Object, Boolean],\n      default: false\n    },\n    height: {\n      type: Number,\n      default: 210\n    },\n    padding: {\n      type: [Array, Number],\n      default: () => ['auto', 185, 'auto', 'auto']\n    }\n  },\n  watch: {\n    // 当浏览器窗口变小时，tooltip会消失问题\n    resize() {\n      this.$nextTick(() => {\n        const tooltipMap = this.tooltipMap\n        for (let key in tooltipMap) {\n          tooltipMap[key] &&\n            new Vue({\n              components: {\n                StHelpTooltip\n              },\n              render: h => <st-help-tooltip id={tooltipMap[key]} />\n            }).$mount(`#legend-${key}`)\n        }\n        if (this.tooltipId) {\n          const $s = this.$el.querySelector.bind(this.$el)\n          const component = new Vue({\n            components: {\n              StHelpTooltip\n            },\n            render: h => <st-help-tooltip id={this.tooltipId} />\n          }).$mount()\n          $s(`#guide-name-tooltip${this.tooltipId}`).appendChild(component.$el)\n        }\n      })\n    }\n  },\n  computed: {\n    dataSource() {\n      //传入的总计为0时，多一个环形图为0的灰色环形图\n      if (this.total === 0 || !this.total) {\n        return [{ name: 'empty', value: 1 }, ...this.data]\n      }\n      return [{ name: 'empty', value: 0 }, ...this.data]\n    },\n    $fields() {\n      let fields = []\n      if (!this.fields) return [...new Set(this.data.map(item => item.name))]\n      if (this.fields.length) {\n        fields = [...this.fields, ...new Set(this.data.map(item => item.name))]\n      }\n      return fields\n    },\n    $colorMap() {\n      if (this.colorMap) return this.colorMap\n      // const colorMap = {}\n      // this.$fields.map((key, idx) => {\n      //   colorMap[key] = this.colors[idx % this.colors.length]\n      // })\n      return setColorMap(this.$fields || [], this.colors)\n    },\n    $option() {\n      return {\n        legend: {\n          position: 'right-center',\n          layout: 'line', // line 同行  vertical 分上下两行\n          ...this.legend\n        },\n        guide: {\n          layout: '', // reverse 上下文案反转\n          ...this.guide\n        }\n      }\n    }\n  },\n  methods: {\n    initDv() {\n      this.dv = new View()\n      this.dv.source(this.dataSource)\n      this.dv\n        .transform({\n          type: 'map',\n          callback(row) {\n            row.value = +(row.value || 0)\n            return row\n          }\n        })\n        .transform({\n          type: 'percent',\n          field: 'value', // 统计销量\n          dimension: 'name', // 每年的占比\n          as: 'percent' // 结果存储在 percent 字段\n        })\n    },\n    initChart() {\n      // chart初始化实例\n      this.getChartInstance()\n      // 加载数据\n      this.chart.source(this.dv, {\n        value: {\n          formatter: v => (this.unitBack ? v + this.unit : this.unit + v)\n        }\n      })\n      // 设置坐标系\n      this.setCoord()\n      // 设置提示信息\n      this.setTooltip()\n      // 设置图例\n      this.setLegend()\n      // 设置复制元素\n      this.setGuideHtml()\n      // 设置渲染环形图\n      this.getintervalStack()\n    },\n    getintervalStack() {\n      // 环形图初始化\n      this.intervalStack = this.chart\n        .intervalStack()\n        .style({\n          fillOpacity: 1,\n          cursor: 'pointer'\n        })\n        .tooltip('name*percent', function(name, percent) {\n          return {\n            name,\n            percent: (function(p) {\n              // 百分比处理，精确至 0.001%（最小值）\n              const r = 10\n              let u = 1,\n                i = 0\n              p = p * 100\n              while (p < u && i < 3) {\n                u = u / 10\n                i++\n              }\n              if (p < u) p = u\n              return (i <= 0 ? Math.floor(p) : p.toFixed(i)) + '%'\n            })(percent)\n          }\n        })\n        .position('value')\n        // .color(`name*${this.colorKey}`, ['#E9EDF2', ...this.colors])\n        .color(\n          `name*${this.colorKey}`,\n          !this.fields\n            ? ['#E9EDF2', ...this.colors]\n            : (name, key) => {\n                if (this.total === 0 || !this.total) return '#E9EDF2'\n                console.log('color', name, key, this.$colorMap[name])\n                return this.$colorMap[name]\n              }\n        )\n        .select(false)\n        .active({\n          style: {\n            fillOpacity: 1,\n            lineWidth: 8\n          }\n        })\n      this.chart.render()\n      // 自定义监听环形图事件\n      this.chartEvent()\n    },\n    getChartInstance() {\n      this.chart = new Chart({\n        container: this.$el,\n        forceFit: true,\n        padding: this.padding,\n        height: this.height\n      })\n    },\n    setTooltip() {\n      this.chart.tooltip({\n        showTitle: false,\n        itemTpl: `<li class=\"tooltip-item-{name}\">\n                    <span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>\n                    {name}\n                    <span class=\"st-g2-tooltip-value\">| {percent}</span>\n                  </li>`\n      })\n    },\n    setCoord() {\n      this.chart.coord('theta', {\n        innerRadius: 0.65\n      })\n    },\n    valFormat(val) {\n      return Number((+val).toFixed(1)).toLocaleString()\n    },\n    setLegend() {\n      this.chart.legend({\n        position: this.$option.legend.position,\n        useHtml: true,\n        itemTpl: (name, color, checked, index) => {\n          const row = this.dv.findRow({ name })\n          const value = this.valFormat(row.value)\n          const tooltipId = this.tooltipMap && this.tooltipMap[row.key]\n          return `<li class=\"g2-legend-list-item item-{originValue} item-{index} {checked} ${\n            this.$option.legend.layout\n          }\" data-color=\"{originColor}\" data-value=\"{originValue}\">\n                    <div>\n                      <i class=\"g2-legend-marker\" style=\"background-color:{color};\"></i>\n                      <span class=\"g2-legend-text\">${name}</span>\n                      <span id='legend-{index}'></span>\n                    </div>\n                    <div class='legend-right'>\n                      <span class='legend-percent'>${\n                        this.unitBack ? value + this.unit : this.unit + value\n                      }</span>\n                    </div>\n                  </li>`\n        },\n        onHover: ev => {\n          // 总计为 0 是阻止事件继续执行hover\n          if (!this.total) return\n          const $s = this.$el.querySelector.bind(this.$el)\n          const name = ev.item.value\n          const row = this.dv.findRow({ name })\n          const shapes = ev.shapes\n          const geom = ev.geom\n          const legend = ev.currentTarget\n          // 选中对应单元\n          this.total && geom.setShapesActived(shapes)\n          legend.addEventListener('mouseleave', () => {\n            this.resetTotal()\n          })\n          $s('.guide-value').textContent = this.valFormat(row.value)\n          $s('.guide-name-text').textContent = row.name\n          $s('.guide-name-tooltip').setAttribute('style', 'display: none')\n        }\n      })\n    },\n    setGuideHtml() {\n      // 总计的自定义DOM\n      this.chart.guide().html({\n        position: ['50%', '50%'],\n        html: () => {\n          this.resize = Math.random()\n          return `<div class='guide ${\n            this.$option.guide.layout\n          }' style='width: ${this.height / 2}px'>\n                    <div class='guide-name'>\n                      <span class=\"guide-name-text\">${this.totalName}</span>\n                      <span class=\"guide-name-tooltip\" id=\"guide-name-tooltip${\n                        this.tooltipId\n                      }\"></span>\n                    </div>\n                    <div class='guide-title'>\n                      <span class='guide-unit' style=\"display: ${\n                        this.unitBack ? 'none' : 'inline-block'\n                      }\">${this.unit}</span>\n                      <span class='guide-value'>${this.valFormat(this.total) ||\n                        0}</span>\n                      <span class='guide-unit' style=\"display: ${\n                        !this.unitBack ? 'none' : 'inline-block'\n                      }\">${this.unit}</span>\n                    </div>\n                  </div>`\n        }\n      })\n    },\n    resetTotal() {\n      const $s = this.$el.querySelector.bind(this.$el)\n      $s('.guide-value').textContent = this.valFormat(this.total) || 0\n      // 总计的时候显示tooltip\n      $s('.guide-name-tooltip').setAttribute(\n        'style',\n        this.tooltipId ? 'display: inline' : 'display: none'\n      )\n      $s('.guide-name-text').textContent = this.totalName\n    },\n    setUnit(e) {\n      const $s = this.$el.querySelector.bind(this.$el)\n      // 当环形图总计都是零的时候隐藏tooltip\n      if (e.data._origin.name === 'empty') {\n        $s('.g2-tooltip').setAttribute('style', 'display: none')\n        return\n      }\n      const origin = e.data._origin\n      const shapes = e.shapes\n      const geom = e.geom\n\n      $s('.guide-value').textContent = this.valFormat(origin.value)\n      $s('.guide-name-text').textContent = origin.name\n      // 不是总计的时候隐藏tooltip\n      $s('.guide-name-tooltip').setAttribute('style', 'display: none')\n    },\n    chartEvent() {\n      // 鼠标进入环形显示相关的值\n      this.chart.on('interval:mouseenter', ev => {\n        const shape = ev.shape\n        const origin = ev.data._origin\n        if (origin.name === 'empty') {\n          this.intervalStack.clearActivedShapes(shape)\n        }\n        this.setUnit(ev)\n      })\n      // 鼠标离开显示总值\n      this.chart.on('interval:mouseleave', e => {\n        this.resetTotal()\n      })\n    }\n  },\n  beforeDestroy() {\n    if (this.chart) {\n      // 注销图形所有事件\n      this.chart.off()\n    }\n  }\n}\n",{"version":3,"sources":["brand-stat-ring.vue"],"names":[],"mappingsfile":"brand-stat-ring.vue","sourceRoot":"src/views/biz-components/stat","sourcesContent":["<template>\n  <div class=\"brand-stat-ring\"></div>\n</template>\n\n<script>\nimport { Chart } from '@antv/g2'\nimport { View } from 'st-data-set'\nimport chartMixin from './mixin'\nimport { decimalFilter, setColorMap } from './filters'\nimport StHelpTooltip from '@/views/components/help-tooltip/help-tooltip'\n\nexport default {\n  name: 'BrandStatRing',\n  mixins: [chartMixin],\n  data() {\n    return {\n      intervalStack: {},\n      resize: -99\n    }\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    total: {\n      type: Number,\n      default: 0\n    },\n    unitBack: {\n      type: Boolean,\n      default: false\n    },\n    unit: {\n      type: String,\n      default: '¥'\n    },\n    totalName: {\n      type: String,\n      default: ''\n    },\n    tooltipId: {\n      type: String,\n      default: ''\n    },\n    tooltipMap: {\n      type: Object,\n      default: () => {}\n    },\n    legend: {\n      type: Object,\n      default: () => {}\n    },\n    guide: {\n      type: Object,\n      default: () => {}\n    },\n    fields: {\n      type: [Array, Boolean],\n      default: () => [\n        '会员卡',\n        '私教课',\n        '团体课',\n        '储值卡',\n        '课程包',\n        '定金',\n        '押金',\n        '储物柜',\n        '云店',\n        '小班课',\n        '其他',\n        '全部'\n      ]\n    },\n    colors: {\n      type: Array,\n      default: () => [\n        '#3F66F6',\n        '#798AFF',\n        '#06DB8C',\n        '#77FF74',\n        '#B8F10F',\n        '#FFE679',\n        '#FFB946',\n        '#5E83AC',\n        '#FF6466',\n        '#04A0AF',\n        '#C87FFF',\n        '#484F83'\n      ]\n    },\n    colorKey: {\n      type: String,\n      default: 'name'\n    },\n    colorMap: {\n      type: [Object, Boolean],\n      default: false\n    },\n    height: {\n      type: Number,\n      default: 210\n    },\n    padding: {\n      type: [Array, Number],\n      default: () => ['auto', 185, 'auto', 'auto']\n    }\n  },\n  watch: {\n    // 当浏览器窗口变小时，tooltip会消失问题\n    resize() {\n      this.$nextTick(() => {\n        const tooltipMap = this.tooltipMap\n        for (let key in tooltipMap) {\n          tooltipMap[key] &&\n            new Vue({\n              components: {\n                StHelpTooltip\n              },\n              render: h => <st-help-tooltip id={tooltipMap[key]} />\n            }).$mount(`#legend-${key}`)\n        }\n        if (this.tooltipId) {\n          const $s = this.$el.querySelector.bind(this.$el)\n          const component = new Vue({\n            components: {\n              StHelpTooltip\n            },\n            render: h => <st-help-tooltip id={this.tooltipId} />\n          }).$mount()\n          $s(`#guide-name-tooltip${this.tooltipId}`).appendChild(component.$el)\n        }\n      })\n    }\n  },\n  computed: {\n    dataSource() {\n      //传入的总计为0时，多一个环形图为0的灰色环形图\n      if (this.total === 0 || !this.total) {\n        return [{ name: 'empty', value: 1 }, ...this.data]\n      }\n      return [{ name: 'empty', value: 0 }, ...this.data]\n    },\n    $fields() {\n      let fields = []\n      if (!this.fields) return [...new Set(this.data.map(item => item.name))]\n      if (this.fields.length) {\n        fields = [...this.fields, ...new Set(this.data.map(item => item.name))]\n      }\n      return fields\n    },\n    $colorMap() {\n      if (this.colorMap) return this.colorMap\n      // const colorMap = {}\n      // this.$fields.map((key, idx) => {\n      //   colorMap[key] = this.colors[idx % this.colors.length]\n      // })\n      return setColorMap(this.$fields || [], this.colors)\n    },\n    $option() {\n      return {\n        legend: {\n          position: 'right-center',\n          layout: 'line', // line 同行  vertical 分上下两行\n          ...this.legend\n        },\n        guide: {\n          layout: '', // reverse 上下文案反转\n          ...this.guide\n        }\n      }\n    }\n  },\n  methods: {\n    initDv() {\n      this.dv = new View()\n      this.dv.source(this.dataSource)\n      this.dv\n        .transform({\n          type: 'map',\n          callback(row) {\n            row.value = +(row.value || 0)\n            return row\n          }\n        })\n        .transform({\n          type: 'percent',\n          field: 'value', // 统计销量\n          dimension: 'name', // 每年的占比\n          as: 'percent' // 结果存储在 percent 字段\n        })\n    },\n    initChart() {\n      // chart初始化实例\n      this.getChartInstance()\n      // 加载数据\n      this.chart.source(this.dv, {\n        value: {\n          formatter: v => (this.unitBack ? v + this.unit : this.unit + v)\n        }\n      })\n      // 设置坐标系\n      this.setCoord()\n      // 设置提示信息\n      this.setTooltip()\n      // 设置图例\n      this.setLegend()\n      // 设置复制元素\n      this.setGuideHtml()\n      // 设置渲染环形图\n      this.getintervalStack()\n    },\n    getintervalStack() {\n      // 环形图初始化\n      this.intervalStack = this.chart\n        .intervalStack()\n        .style({\n          fillOpacity: 1,\n          cursor: 'pointer'\n        })\n        .tooltip('name*percent', function(name, percent) {\n          return {\n            name,\n            percent: (function(p) {\n              // 百分比处理，精确至 0.001%（最小值）\n              const r = 10\n              let u = 1,\n                i = 0\n              p = p * 100\n              while (p < u && i < 3) {\n                u = u / 10\n                i++\n              }\n              if (p < u) p = u\n              return (i <= 0 ? Math.floor(p) : p.toFixed(i)) + '%'\n            })(percent)\n          }\n        })\n        .position('value')\n        // .color(`name*${this.colorKey}`, ['#E9EDF2', ...this.colors])\n        .color(\n          `name*${this.colorKey}`,\n          !this.fields\n            ? ['#E9EDF2', ...this.colors]\n            : (name, key) => {\n                if (this.total === 0 || !this.total) return '#E9EDF2'\n                console.log('color', name, key, this.$colorMap[name])\n                return this.$colorMap[name]\n              }\n        )\n        .select(false)\n        .active({\n          style: {\n            fillOpacity: 1,\n            lineWidth: 8\n          }\n        })\n      this.chart.render()\n      // 自定义监听环形图事件\n      this.chartEvent()\n    },\n    getChartInstance() {\n      this.chart = new Chart({\n        container: this.$el,\n        forceFit: true,\n        padding: this.padding,\n        height: this.height\n      })\n    },\n    setTooltip() {\n      this.chart.tooltip({\n        showTitle: false,\n        itemTpl: `<li class=\"tooltip-item-{name}\">\n                    <span style=\"background-color:{color};\" class=\"g2-tooltip-marker\"></span>\n                    {name}\n                    <span class=\"st-g2-tooltip-value\">| {percent}</span>\n                  </li>`\n      })\n    },\n    setCoord() {\n      this.chart.coord('theta', {\n        innerRadius: 0.65\n      })\n    },\n    valFormat(val) {\n      return Number((+val).toFixed(1)).toLocaleString()\n    },\n    setLegend() {\n      this.chart.legend({\n        position: this.$option.legend.position,\n        useHtml: true,\n        itemTpl: (name, color, checked, index) => {\n          const row = this.dv.findRow({ name })\n          const value = this.valFormat(row.value)\n          const tooltipId = this.tooltipMap && this.tooltipMap[row.key]\n          return `<li class=\"g2-legend-list-item item-{originValue} item-{index} {checked} ${\n            this.$option.legend.layout\n          }\" data-color=\"{originColor}\" data-value=\"{originValue}\">\n                    <div>\n                      <i class=\"g2-legend-marker\" style=\"background-color:{color};\"></i>\n                      <span class=\"g2-legend-text\">${name}</span>\n                      <span id='legend-{index}'></span>\n                    </div>\n                    <div class='legend-right'>\n                      <span class='legend-percent'>${\n                        this.unitBack ? value + this.unit : this.unit + value\n                      }</span>\n                    </div>\n                  </li>`\n        },\n        onHover: ev => {\n          // 总计为 0 是阻止事件继续执行hover\n          if (!this.total) return\n          const $s = this.$el.querySelector.bind(this.$el)\n          const name = ev.item.value\n          const row = this.dv.findRow({ name })\n          const shapes = ev.shapes\n          const geom = ev.geom\n          const legend = ev.currentTarget\n          // 选中对应单元\n          this.total && geom.setShapesActived(shapes)\n          legend.addEventListener('mouseleave', () => {\n            this.resetTotal()\n          })\n          $s('.guide-value').textContent = this.valFormat(row.value)\n          $s('.guide-name-text').textContent = row.name\n          $s('.guide-name-tooltip').setAttribute('style', 'display: none')\n        }\n      })\n    },\n    setGuideHtml() {\n      // 总计的自定义DOM\n      this.chart.guide().html({\n        position: ['50%', '50%'],\n        html: () => {\n          this.resize = Math.random()\n          return `<div class='guide ${\n            this.$option.guide.layout\n          }' style='width: ${this.height / 2}px'>\n                    <div class='guide-name'>\n                      <span class=\"guide-name-text\">${this.totalName}</span>\n                      <span class=\"guide-name-tooltip\" id=\"guide-name-tooltip${\n                        this.tooltipId\n                      }\"></span>\n                    </div>\n                    <div class='guide-title'>\n                      <span class='guide-unit' style=\"display: ${\n                        this.unitBack ? 'none' : 'inline-block'\n                      }\">${this.unit}</span>\n                      <span class='guide-value'>${this.valFormat(this.total) ||\n                        0}</span>\n                      <span class='guide-unit' style=\"display: ${\n                        !this.unitBack ? 'none' : 'inline-block'\n                      }\">${this.unit}</span>\n                    </div>\n                  </div>`\n        }\n      })\n    },\n    resetTotal() {\n      const $s = this.$el.querySelector.bind(this.$el)\n      $s('.guide-value').textContent = this.valFormat(this.total) || 0\n      // 总计的时候显示tooltip\n      $s('.guide-name-tooltip').setAttribute(\n        'style',\n        this.tooltipId ? 'display: inline' : 'display: none'\n      )\n      $s('.guide-name-text').textContent = this.totalName\n    },\n    setUnit(e) {\n      const $s = this.$el.querySelector.bind(this.$el)\n      // 当环形图总计都是零的时候隐藏tooltip\n      if (e.data._origin.name === 'empty') {\n        $s('.g2-tooltip').setAttribute('style', 'display: none')\n        return\n      }\n      const origin = e.data._origin\n      const shapes = e.shapes\n      const geom = e.geom\n\n      $s('.guide-value').textContent = this.valFormat(origin.value)\n      $s('.guide-name-text').textContent = origin.name\n      // 不是总计的时候隐藏tooltip\n      $s('.guide-name-tooltip').setAttribute('style', 'display: none')\n    },\n    chartEvent() {\n      // 鼠标进入环形显示相关的值\n      this.chart.on('interval:mouseenter', ev => {\n        const shape = ev.shape\n        const origin = ev.data._origin\n        if (origin.name === 'empty') {\n          this.intervalStack.clearActivedShapes(shape)\n        }\n        this.setUnit(ev)\n      })\n      // 鼠标离开显示总值\n      this.chart.on('interval:mouseleave', e => {\n        this.resetTotal()\n      })\n    }\n  },\n  beforeDestroy() {\n    if (this.chart) {\n      // 注销图形所有事件\n      this.chart.off()\n    }\n  }\n}\n</script>\n"]}]}