{"remainingRequest":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/face/recognition.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangzhigang/Desktop/styd/web/src/views/biz-modals/face/recognition.vue","mtime":1596188219487},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/babel-loader/lib/index.js","mtime":1591062567418},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/cache-loader/dist/cjs.js","mtime":1591062571898},{"path":"/Users/wangzhigang/Desktop/styd/web/node_modules/vue-loader/lib/index.js","mtime":1591062572376}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { OssService } from '@/services/oss.service'\nimport { AppConfig } from '@/constants/config'\nimport { MessageService } from '@/services/message.service'\nimport { RecognitionService } from './recognition.service'\nimport BrowserType from './recognition-browser'\nimport { get } from 'lodash-es'\nexport default {\n  bem: {\n    recognition: 'st-face-recognition'\n  },\n  serviceInject() {\n    return {\n      oss: OssService,\n      appConfig: AppConfig,\n      messageService: MessageService,\n      recognitionService: RecognitionService\n    }\n  },\n  rxState() {\n    return {\n      loading: this.recognitionService.loading$\n    }\n  },\n  props: {\n    fileList: {\n      type: Array,\n      default: () => []\n    },\n    props: {\n      type: Object,\n      default: () => ({\n        image_id: 'image_id',\n        image_key: 'image_key',\n        image_url: 'image_url'\n      })\n    }\n  },\n  data() {\n    return {\n      title: '人脸信息录入',\n      okText: '确认上传',\n      show: false,\n      list: this.fileList,\n      face: null,\n      canvasElm: null,\n      confirmLoading: false,\n      openCameraError: false, // 开启摄像头失败\n      isLoading: false,\n      picWidth: 270,\n      picHeight: 270,\n      canvasCardContext: '',\n      canvasCard: ''\n    }\n  },\n  watch: {\n    fileList(newList) {\n      this.list = this.fileList\n      if (this.list.length) {\n        this.face = {\n          url: this.list[0][this.imageUrl],\n          fileKey: this.list[0][this.imageKey]\n        }\n      }\n    },\n    'loading.getMemberCheckResult'(v) {\n      this.$emit('loadingChange', v)\n    },\n    progress(v) {\n      this.$emit('progressChange', v)\n    }\n  },\n  computed: {\n    imageId() {\n      return this.props.image_id\n    },\n    imageKey() {\n      return this.props.image_key\n    },\n    imageUrl() {\n      return this.props.image_url\n    },\n    userImgSrc() {\n      return get(this.face, 'url', '')\n    }\n  },\n  created() {\n    // 现在已不需要在兼容firefox\n    // const browserV = BrowserType()\n    // if (browserV === 'FF') {\n    //   this.picHeight = 202\n    // }\n    this.createOutCanvas()\n  },\n  mounted() {\n    this.$nextTick(() => {\n      if (\n        navigator.mediaDevices.getUserMedia ||\n        navigator.getUserMedia ||\n        navigator.webkitGetUserMedia ||\n        navigator.mozGetUserMedia\n      ) {\n        // 调用用户媒体设备, 访问摄像头\n        this.openCamera()\n        this.canvasElm = this.$refs.canvas\n      } else {\n        this.openCameraError = true\n        this.face = null\n      }\n    })\n  },\n  methods: {\n    // 取消人脸识别图片上传\n    onCancel() {\n      this.show = false\n    },\n    // 人脸图片上传\n    uploadUserImageFormPhoto(data) {\n      this.isLoading = true\n      this.oss\n        .put({\n          business: 'face',\n          isPrivate: true,\n          file: data.file\n        })\n        .subscribe({\n          next: val => {\n            console.log('val', val)\n            this.face = val\n          },\n          error: val => {\n            this.messageService.error({ content: `Error ${val.message}` })\n            this.isLoading = false\n          },\n          complete: () => {\n            this.isLoading = false\n          }\n        })\n    },\n    uploadUserImageFormCamera(data) {\n      let canvas = this.canvasElm\n      canvas.toBlob(blob => {\n        this.isLoading = true\n        this.oss\n          .put({\n            file: blob,\n            isPrivate: true,\n            business: 'face',\n            uploadProgress: e => {\n              this.progress = parseInt((e.loaded / e.total) * 100)\n            }\n          })\n          .subscribe({\n            next: val => {\n              this.isLoading = false\n              this.face = val\n            },\n            error: val => {\n              this.isLoading = false\n              this.messageService.error({ content: `Error ${val.message}` })\n            },\n            complete: () => {\n              // 图片上传成功\n              this.isLoading = false\n            }\n          })\n      })\n    },\n    // 图片质量检测\n    uploadUserImageAndQualityTest() {\n      let image = this.face\n      this.recognitionService\n        .getMemberCheckResult({\n          image_key: image.fileKey\n        })\n        .subscribe(res => {\n          let isScan = res.is_scan\n          if (isScan) {\n            let imageId = this.list.length && this.list[0][this.imageId]\n            let current = this.list.length && this.list[0]\n            if (current) {\n              current[this.imageKey] = image.fileKey\n            } else {\n              this.list.push({\n                [this.imageId]: 0,\n                [this.imageKey]: image.fileKey,\n                [this.imageUrl]: image.url\n              })\n            }\n            this.$emit('change', this.list)\n            this.show = false\n          } else {\n            this.messageService.error({\n              content: `上传图片质量不佳,请重新拍照`\n            })\n            this.face = null\n          }\n        })\n    },\n    // 创建人脸照片绘制所需的canvas\n    createOutCanvas() {\n      this.canvasCard = document.createElement('canvas')\n      this.canvasCard.style.opacity = 0\n      this.canvasCard.width = this.picWidth\n      this.canvasCard.height = this.picHeight\n      this.canvasCard.style.width = this.picWidth + 'px'\n      this.canvasCard.style.height = this.picHeight + 'px'\n      this.canvasCardContext = this.canvasCard.getContext('2d')\n      this.canvasCardContext.fillStyle = '#ffffff'\n      this.canvasCardContext.fillRect(0, 0, this.picWidth, this.picHeight)\n    },\n    // 拍照\n    handlerTakePhoto() {\n      // 如果已有用户头像,则对数组操作,去除当前数据\n      if (this.userImgSrc) {\n        this.face = null\n        return\n      }\n      // 如果已拍照,显示重拍,点击重新展示相机\n      // 如果未拍照,显示为拍照,点击拍照\n      let context = this.canvasElm.getContext('2d')\n      let video = this.$refs.video\n      context.drawImage(video, 0, 0, this.picWidth, this.picHeight)\n      //const imgSrc = this.canvasElm.toDataURL('image/png')\n      this.canvasCardContext.drawImage(\n        this.canvasElm,\n        0,\n        0,\n        this.picWidth,\n        this.picHeight,\n        0,\n        0,\n        this.picWidth,\n        this.picHeight\n      )\n      //this.userImgSrc = this.canvasElm.toDataURL('image/png')\n      this.uploadUserImageFormCamera()\n    },\n    // 开启摄像头\n    openCamera() {\n      if (!navigator.mediaDevices.getUserMedia) {\n        navigator.mediaDevices.getUserMedia = function(constraints) {\n          // 首先获取现存的getUserMedia(如果存在)\n          let getUserMedia =\n            navigator.webkitGetUserMedia ||\n            navigator.mozGetUserMedia ||\n            navigator.getUserMedia\n          // 有些浏览器不支持，会返回错误信息\n          // 保持接口一致\n          if (!getUserMedia) {\n            this.openCameraError = true\n            return Promise.reject(\n              new Error('getUserMedia is not implemented in this browser')\n            )\n          }\n          this.openCameraError = false\n          // 否则，使用Promise将调用包装到旧的navigator.getUserMedia\n          return new Promise(function(resolve, reject) {\n            getUserMedia.call(navigator, constraints, resolve, reject)\n          })\n        }\n      }\n      let constraints = {\n        video: {\n          width: this.picWidth,\n          height: this.picHeight\n        }\n      }\n      this.isLoading = true\n      navigator.mediaDevices\n        .getUserMedia(constraints)\n        .then(this.CameraOpensuccess)\n        .catch(this.CameraOpenerror)\n    },\n    // 关闭摄像头\n    closeCamera() {\n      console.log('关闭摄像头')\n      if (!this.$refs['video'].srcObject) return\n      let stream = this.$refs['video'].srcObject\n      let tracks = stream.getTracks()\n      tracks.forEach(track => {\n        track.stop()\n      })\n      this.$refs['video'].srcObject = null\n    },\n    // 摄像头开启成功\n    CameraOpensuccess(stream) {\n      let video = this.$refs.video\n      if ('srcObject' in video) {\n        video.srcObject = stream\n      } else {\n        // 避免在新的浏览器中使用它，因为它正在被弃用。\n        video.src = window.URL.createObjectURL(stream)\n      }\n      let that = this\n      video.oncanplay = function(e) {\n        console.log('oncanplay')\n        that.isLoading = false\n      }\n      video.onloadedmetadata = function(e) {\n        video.play()\n        // video.style.transform = 'scaleX(-1)'\n      }\n    },\n    // 摄像呕吐开启失败\n    CameraOpenerror(error) {\n      console.log(`error message ${error}`)\n      this.openCameraError = true\n      this.isLoading = false\n    },\n    // 图片uri转化\n    dataURItoBlob(dataURI) {\n      // 图片转成Buffer\n      let byteString = atob(dataURI.split(',')[1])\n      let mimeString = dataURI\n        .split(',')[0]\n        .split(':')[1]\n        .split(';')[0]\n      let ab = new ArrayBuffer(byteString.length)\n      let ia = new Uint8Array(ab)\n      for (let i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i)\n      }\n      return new Blob([ab], { type: mimeString })\n    }\n  },\n  beforeDestroy() {\n    this.closeCamera()\n  }\n}\n",null]}